/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={478:(t,n,e)=>{"use strict";e.d(n,{Z:()=>a});var r=e(829),i=e(222),o=(0,r.Z)((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*i.yB)/i.UD}),(function(t){return t.getDate()-1}));const a=o;o.range},222:(t,n,e)=>{"use strict";e.d(n,{Ym:()=>r,yB:()=>i,Y2:()=>o,UD:()=>a,iM:()=>u});var r=1e3,i=6e4,o=36e5,a=864e5,u=6048e5},829:(t,n,e)=>{"use strict";e.d(n,{Z:()=>o});var r=new Date,i=new Date;function o(t,n,e,a){function u(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return u.floor=function(n){return t(n=new Date(+n)),n},u.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},u.round=function(t){var n=u(t),e=u.ceil(t);return t-n<e-t?n:e},u.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},u.range=function(e,r,i){var o,a=[];if(e=u.ceil(e),i=null==i?1:Math.floor(i),!(e<r&&i>0))return a;do{a.push(o=new Date(+e)),n(e,i),t(e)}while(o<e&&e<r);return a},u.filter=function(e){return o((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(u.count=function(n,o){return r.setTime(+n),i.setTime(+o),t(r),t(i),Math.floor(e(r,i))},u.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?u.filter(a?function(n){return a(n)%t==0}:function(n){return u.count(0,n)%t==0}):u:null}),u}},692:(t,n,e)=>{"use strict";e.d(n,{Z:()=>a});var r=e(829),i=e(222),o=(0,r.Z)((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/i.UD}),(function(t){return t.getUTCDate()-1}));const a=o;o.range},326:(t,n,e)=>{"use strict";e.d(n,{Ox:()=>a,l6:()=>u,hB:()=>s});var r=e(829),i=e(222);function o(t){return(0,r.Z)((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/i.iM}))}var a=o(0),u=o(1),c=o(2),f=o(3),s=o(4),l=o(5),h=o(6);a.range,u.range,c.range,f.range,s.range,l.range,h.range},181:(t,n,e)=>{"use strict";e.d(n,{Z:()=>o});var r=e(829),i=(0,r.Z)((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));i.every=function(t){return isFinite(t=Math.floor(t))&&t>0?(0,r.Z)((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};const o=i;i.range},776:(t,n,e)=>{"use strict";e.d(n,{OM:()=>a,wA:()=>u,bL:()=>s});var r=e(829),i=e(222);function o(t){return(0,r.Z)((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*i.yB)/i.iM}))}var a=o(0),u=o(1),c=o(2),f=o(3),s=o(4),l=o(5),h=o(6);a.range,u.range,c.range,f.range,s.range,l.range,h.range},209:(t,n,e)=>{"use strict";e.d(n,{Z:()=>o});var r=e(829),i=(0,r.Z)((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));i.every=function(t){return isFinite(t=Math.floor(t))&&t>0?(0,r.Z)((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};const o=i;i.range},16:function(t,n,e){!function(t,n,e,r,i){"use strict";function o(t){return!e.has(t,"children")}var a=Object.freeze({__proto__:null,graft_a_node:function(t,n,e,r){let i=this.nodes.descendants();if(t.parent&&i.indexOf(t)>=0){let i=t.parent.children.indexOf(t),o={name:e,parent:t.parent,attribute:r?r[2]:null,original_child_order:t.original_child_order},a={name:n,parent:o,attribute:r?r[1]:null,original_child_order:2};o.children=[t,a],t.parent.children[i]=o,t.parent=o,t.attribute=r?r[0]:null,t.original_child_order=1}return this},delete_a_node:function(t){let n=this.nodes.descendants();if("number"!=typeof t)return this.delete_a_node(n.indexOf(t));if(t>0&&t<n.length){let e=n[t];if(e.parent){let r=e.parent.children.indexOf(e);r>=0&&(n.splice(t,1),e.children&&e.children.forEach((function(t){t.original_child_order=e.parent.children.length,e.parent.children.push(t),t.parent=e.parent})),e.parent.children.length>2?e.parent.children.splice(r,1):e.parent.parent?(e.parent.parent.children[e.parent.parent.children.indexOf(e.parent)]=e.parent.children[1-r],e.parent.children[1-r].parent=e.parent.parent,n.splice(n.indexOf(e.parent),1)):(n.splice(0,1),n.parent=null,delete n.data.attribute,delete n.data.annotation,delete n.data.original_child_order,n.name="root",n.data.name="root"))}}return this},get_tips:function(){return e.filter(this.nodes.descendants(),(t=>!e.has(t,"children")))},get_internals:function(){return e.filter(this.nodes.descendants(),(t=>e.has(t,"children")))},get_root_node:function(){return this.nodes},get_nodes:function(){return this.nodes},get_node_by_name:function(t){return e.filter(this.nodes.descendants(),(n=>n.data.name==t))[0]},assign_attributes:function(t){e.each(this.nodes,(function(n){e.indexOf(e.keys(t),n.name)>=0&&(n.annotations=t[n.name])}))},is_leafnode:o,update_key_name:function(t,n){return this.nodes.each((function(e){t in e&&(n&&(e[n]=e[t]),delete e[t])})),this},clear_internal_nodes:function(t){t||this.nodes.each((t=>{o(t)||(t[this.selection_attribute_name]=!1)}))}});function u(t,n,e){let r=e||"{",i="{"==r?"}":"]",o=[];function a(){let t=o[o.length-1];"children"in t||(t.children=[]),o.push({name:null}),t.children.push(o[o.length-1]),o[o.length-1].original_child_order=t.children.length}function u(){let t=o.pop();t.name=s,"children"in t?t.bootstrap_values=s:t.name=s,t.attribute=l,t.annotation=h,s="",l="",h=""}function c(n){return{json:null,error:"Unexpected '"+t[n]+"' in '"+t.substring(n-20,n+1)+"[ERROR HERE]"+t.substring(n+1,n+20)+"'"}}let f=0,s="",l="",h="",d=null,p={"'":1,'"':1},_={name:"root"};o.push(_);for(var g=/\s/,v=0;v<t.length;v++)try{var y=t[v];switch(f){case 0:"("==y&&(a(),f=1);break;case 1:case 3:if(":"==y)f=3;else if(","==y||")"==y)try{u(),f=1,","==y&&a()}catch(t){return c(v)}else if("("==y){if(s.length>0)return c(v);a()}else{if(y in p){if(1==f&&0===s.length&&0===l.length&&0===h.length){f=2,d=y;continue}return c(v)}if(y==r){if(h.length)return c(v);f=4}else if(3==f)l+=y;else{if(g.test(y))continue;if(";"==y){v=t.length;break}s+=y}}break;case 2:if(y==d){if(v<t.length-1&&t[v+1]==d){v++,s+=d;continue}d=0,f=1;continue}s+=y;break;case 4:if(y==i)f=3;else{if(y==r)return c(v);h+=y}}}catch(t){return c(v)}return 1!=o.length?c(t.length-1):{json:_,error:null}}function c(t){let n=t,r=n.toUpperCase().indexOf("BEGIN DATA;"),i=n.slice(r);if(i.length<2)return"";r=i.toUpperCase().indexOf("END;");let o=i.slice(0,r);i=e.map(o.split(";"),(t=>t.trim()));let a=e.filter(i,(t=>t.toUpperCase().startsWith("DIMENSION")));a=a[0].split(" "),a=e.object(e.map(e.rest(a),(t=>t.split("="))));let u=e.filter(i,(t=>t.toUpperCase().startsWith("FORMAT")));u=u[0].split(" "),u=e.object(e.map(e.rest(u),(t=>t.split("=")))),u.symbols=e.reject(u.symbols.split(""),(t=>'"'==t));let c=e.filter(i,(t=>t.toUpperCase().startsWith("MATRIX")));return c=c[0].split("\n"),c=e.object(e.map(e.rest(c),(t=>e.compact(t.split(" "))))),c=e.mapObject(c,((t,n)=>"?"==t?u.symbols:Array(t))),{dimensions:a,format:u,matrix:c}}function f(t,n,r){e.each(t.get_tips(),(t=>{t.data.test=r.matrix[t.data.name]}))}function s(t){let n=t,r=n.toUpperCase().indexOf("BEGIN TREES;"),i=n.slice(r);if(i.length<2)return"";r=i.toUpperCase().indexOf("END;");let o=i.slice(0,r).split("\n");return o=e.filter(o,(t=>t.trim().toUpperCase().startsWith("TREE"))),u(o[0])}var l=Object.freeze({__proto__:null,parse_annotations:c,load_annotations:f,default:s});function h(t){var n={};if(1==t.nodeType){if(t.attributes.length>0){n["@attributes"]={};for(var e=0;e<t.attributes.length;e++){var r=t.attributes.item(e);n["@attributes"][r.nodeName]=r.nodeValue}}}else 3==t.nodeType&&(n=t.nodeValue);if(t.hasChildNodes()&&1===t.childNodes.length&&3===t.childNodes[0].nodeType)n=t.childNodes[0].nodeValue;else if(t.hasChildNodes())for(var i=0;i<t.childNodes.length;i++){var o=t.childNodes.item(i),a=o.nodeName;if(void 0===n[a])n[a]=h(o);else{if(void 0===n[a].push){var u=n[a];n[a]=[],n[a].push(u)}n[a].push(h(o))}}return n}var d=function(t,n){var e;return(e=(t=h(t)).phyloxml.phylogeny.clade).name="root",function t(n,e){n.clade&&(n.clade.forEach(t),n.children=n.clade,delete n.clade),n.annotation=1,n.attribute="0.01",n.branch_length&&(n.attribute=n.branch_length),n.taxonomy&&(n.name=n.taxonomy.scientific_name),n.annotation=""}(e),{json:e,error:null}};var p={nexml:function(t,n){var r;return parseString(t,(function(t,n){r=n["nex:nexml"].trees[0].tree.map((function(t){var n=t.node.map((t=>t.$)),r=n.reduce((function(t,n){return n.edges=[],n.name=n.id,t[n.id]=n,t}),{}),i=n.filter((t=>t.root)),o=i>0?i[0].id:n[0].id;return r[o].name="root",t.edge.map((t=>t.$)).forEach((function(t){r[t.source].edges.push(t)})),function t(n,i){if(n.edges){var o=e.pluck(n.edges,"target");n.children=e.values(e.pick(r,o)),n.children.forEach((function(t,e){t.attribute=n.edges[e].length||""})),n.children.forEach(t),n.annotation=""}}(r[o]),r[o]}))})),r},phyloxml:d,nexus:s,nwk:u,beast:function(t){const n=u(t,0,"[");return function t(n){if(n.annotation){n.beast={};const t=n.annotation.split(/=|,|{|}/).filter((t=>t));for(var e=0;e<t.length;e+=2){let r=t[e].replace(/&|%/g,"");/[a-df-zA-DF-Z]+/.test(t[e+2])?n.beast[r]=+t[e+1]:(n.beast[r]=[+t[e+1],+t[e+2]],e++)}}n.annotation=void 0,n.children&&n.children.forEach(t)}(n.json),n}};function _(t,n,e){let r,i,o,a=[t],u=[];for(;t=a.pop();)if((!e||!e(t))&&(u.push(t),r=t.children,r))for(i=0,o=r.length;i<o;++i)a.push(r[i]);for(;t=u.pop();)n(t);return t}function g(t,n,e){let r,i,o=[t];for(;t=o.pop();)if((!e||!e(t))&&(n(t),r=t.children,r))for(i=r.length-1;i>=0;--i)o.push(r[i]);return t}function v(t,n,e){let r,i,o,a,u=[t];do{for(r=u.reverse(),u=[];t=r.pop();)if((!e||!e(t))&&(n(t),i=t.children,i))for(o=0,a=i.length;o<a;++o)u.push(i[o])}while(u.length);return t}function y(t){return _(t,(function(t){t.children&&(t.children[0].data.multiway_parent=t,t.children[1].data.multiway_parent=t.parent)})),r.map(t.descendants(),(t=>{let n=t.data.multiway_parent,e="unknown";return n&&n.data.name,{source:t.data.multiway_parent,target:t}}))}function b(t,n){let e=t.data;if("attribute"in e&&e.attribute&&e.attribute.length){n>0&&(e.attribute=String(n));let t=parseFloat(e.attribute);if(!isNaN(t))return Math.max(0,t)}}var m=Object.freeze({__proto__:null,reroot:function(t,r){let i=this.nodes.descendants();if(r=void 0!==r?r:.5,t.parent){var o=n.hierarchy({name:"new_root",children:[{name:t.data.name}]});e.extendOwn(o.children[0],t),o.children[0].parent=o,i.forEach((t=>{t.__mapped_bl=this.branch_length_accessor(t),t.data.__mapped_bl=this.branch_length_accessor(t)})),this.set_branch_length((function(t){return t.__mapped_bl||t.data.__mapped_bl}));let u=t,c=t.parent,f=e.noop(),s=void 0===t.data.__mapped_bl?void 0:t.data.__mapped_bl*r;var a;if(f=c.data.__mapped_bl,c.data.__mapped_bl=void 0===t.data.__mapped_bl?void 0:t.__mapped_bl-s,t.data._mapped_bl=s,c.parent){for(o.children.push(c);c.parent;){a=c.children.indexOf(u),c.parent.parent?c.children.splice(a,1,c.parent):c.children.splice(a,1);let t=c.parent.data.__mapped_bl;void 0!==t&&(c.parent.data.__mapped_bl=f,f=t),u=c,c=c.parent}a=c.children.indexOf(u),c.children.splice(a,1)}else a=c.children.indexOf(u),c.children.splice(a,1),f=c.data.__mapped_bl,u=o;if(1==c.children.length)f&&(c.children[0].data.__mapped_bl+=f),u.children=u.children.concat(c.children);else{let r=new n.hierarchy({name:"__reroot_top_clade",__mapped_bl:f});e.extendOwn(o.children[0],t),r.data.__mapped_bl=f,r.children=c.children.map((function(t){return t.parent=r,t})),r.parent=u,u.children.push(r)}}if(this.update(o),this.traverse_and_compute((t=>{e.each(t.children,(n=>{n.parent=t}))}),"pre-order"),!e.isUndefined(this.display)){let t=this.display.container,n=this.display.options;delete this.display,this.render(t,n)}return this},rootpath:function(t,n){if(t=t||"attribute",n=n||"y_scaled","parent"in this){let e=parseFloat(this[t]);this[n]=this.parent[n]+(isNaN(e)?.1:e)}else this[n]=0;return this[n]},path_to_root:function(t){let n=[];for(;t;)n.push(t),t=t.parent;return n}});function x(t){return t.y}function w(t){return t.x}function M(t,n,e){return{x:e+t*Math.sin(n),y:e+t*Math.cos(n)}}function A(t,n,e,r,i,o){t.radius=n*(t.radius+e),t.angle=2*Math.PI*t.x*i[0]/o[0];let a=M(t.radius,t.angle,r);return t.x=a.x,t.y=a.y,t}function T(t,n){var e=M(t[0].radius,t[0].angle,n),r=M(t[0].radius,t[1].angle,n);return"M "+x(e)+","+w(e)+" A "+t[0].radius+","+t[0].radius+" 0,0, "+(t[1].angle>t[0].angle?1:0)+" "+x(r)+","+w(r)+" L "+x(t[1])+","+w(t[1])}function k(t,n,e){var r=M(t.target.radius+(t.source.radius-t.target.radius)*n,t.target.angle,e);return{x:x(r),y:w(r)}}var S=n.line().x((function(t){return x(t)})).y((function(t){return w(t)})).curve(n.curveStepBefore);function E(t,n){return{x:x(t.target)+(x(t.source)-x(t.target))*n,y:w(t.target)}}function N(t){return t.tag||!1}function C(t,n){return t[n]||!1}const z={"tree-container":"phylotree-container","tree-scale-bar":"tree-scale-bar",node:"node","internal-node":"internal-node","tagged-node":"node-tagged","selected-node":"node-selected","collapsed-node":"node-collapsed","root-node":"root-node",branch:"branch","selected-branch":"branch-selected","tagged-branch":"branch-tagged","tree-selection-brush":"tree-selection-brush","branch-tracer":"branch-tracer",clade:"clade",node_text:"phylotree-node-text"};function U(t){return arguments.length?(U="string"==typeof t&&"equal"==t?function(t){return 1}:t,phylotree):U}var O={all:t=>!0,none:t=>!1,"all-leaf-nodes":t=>o(t.target),"all-internal-nodes":t=>!o(t.target)};var D=Object.freeze({__proto__:null,css_classes:z,internal_names:function(t){return arguments.length?(this.options["internal-names"]=t,this):this.options["internal-names"]},radial:function(t){return arguments.length?(this.options["is-radial"]=t,this):this.options["is-radial"]},align_tips:function(t){return arguments.length?(this.options["align-tips"]=t,this):this.options["align-tips"]},node_bubble_size:function(t){return this.options["draw-size-bubbles"]?this.relative_node_span(t)*this.scales[0]*.25:0},shift_tip:function(t){return this.options["is-radial"]?[("end"==t.text_align?-1:1)*(this.radius_pad_for_bubbles-t.radius),0]:(this.options["right-to-left"],[this.right_most_leaf-t.screen_x,0])},layout_handler:function(t){return arguments.length?(this.layout_listener_handler=t,this):this.layout_listener_handler},selection_label:function(t){return arguments.length?(this.selection_attribute_name=t,this.sync_edge_labels(),this):this.selection_attribute_name},get node_span(){return U},predefined_selecters:O,selection_callback:function(t){return t?(this.selection_callback=t,this):this.selection_callback}});function j(t){return!(t.hidden||t.notshown)}function R(t){return t.notshown}function P(t){return t.has_hidden_nodes||!1}function L(t){return t.collapsed||!1}function F(t){return[t.node,t["internal-node"],t["collapsed-node"],t["tagged-node"],t["root-node"]].reduce((function(t,n,e,r){return t+"g."+n+(e<r.length-1?",":"")}),"")}function B(t){return o(t=t.data)?t.name||"":this.show_internal_name(t)?t.name:""}var I=Object.freeze({__proto__:null,shift_tip:function(t){return this.radial()?[("end"==t.text_align?-1:1)*(this.radius_pad_for_bubbles-t.radius),0]:(this.options["right-to-left"],[this.right_most_leaf-t.screen_x,0])},draw_node:function(t,e,r){t=n.select(t);var i=o(e);i&&(t=t.attr("data-node-name",e.data.name));let a=t.selectAll("text").data([e]),u=t.selectAll("line");if(i||this.show_internal_name(e)&&!L(e))if(a=a.enter().append("text").classed(this.css_classes.node_text,!0).merge(a).on("click",this.handle_node_click).attr("dy",(t=>.33*this.shown_font_size)).text((t=>this.options["show-labels"]?this._node_label(t):"")).style("font-size",(t=>this.ensure_size_is_in_px(this.shown_font_size))),a=this.radial()?a.attr("transform",(t=>this.d3_phylotree_svg_rotate(t.text_angle)+this.d3_phylotree_svg_translate(this.align_tips()?this.shift_tip(t):null))).attr("text-anchor",(t=>t.text_align)):a.attr("text-anchor","start").attr("transform",(t=>"right-to-left"==this.options.layout?this.d3_phylotree_svg_translate([-20,0]):this.d3_phylotree_svg_translate(this.align_tips()?this.shift_tip(t):null))),this.align_tips()?(u=u.data([e]),r?u=u.enter().append("line").classed(this.css_classes["branch-tracer"],!0).merge(u).attr("x1",(t=>("end"==t.text_align?-1:1)*this.node_bubble_size(e))).attr("x2",0).attr("y1",0).attr("y2",0).attr("x2",(t=>"right-to-left"==this.options.layout?t.screen_x:this.shift_tip(t)[0])).attr("transform",(t=>this.d3_phylotree_svg_rotate(t.text_angle))).attr("x2",(t=>"right-to-left"==this.options.layout?t.screen_x:this.shift_tip(t)[0])).attr("transform",(t=>this.d3_phylotree_svg_rotate(t.text_angle))):(u=u.enter().append("line").classed(this.css_classes["branch-tracer"],!0).merge(u).attr("x1",(t=>("end"==t.text_align?-1:1)*this.node_bubble_size(e))).attr("y2",0).attr("y1",0).attr("x2",(t=>this.shift_tip(t)[0])),u.attr("transform",(t=>this.d3_phylotree_svg_rotate(t.text_angle))))):u.remove(),this.options["draw-size-bubbles"]){var c=this.node_bubble_size(e);t.selectAll("circle").data([c]).enter().append("circle").attr("r",(function(t){return t})),this.shown_font_size>=5&&(a=a.attr("dx",(t=>("end"==t.text_align?-1:1)*((this.align_tips()?0:c)+.33*this.shown_font_size))))}else this.shown_font_size>=5&&(a=a.attr("dx",(t=>("end"==t.text_align?-1:1)*this.shown_font_size*.33)));if(!i){let n=t.selectAll("circle").data([e]).enter().append("circle"),r=this.node_circle_size()(e);r>0?n.merge(n).attr("r",(t=>Math.min(.75*this.shown_font_size,r))).on("click",(t=>{this.handle_node_click(t)})):n.remove()}return this.node_styler&&this.node_styler(t,e),e},update_has_hidden_nodes:function(){let t=this.phylotree.nodes.descendants();for(let n=t.length-1;n>=0;n-=1)o(t[n])?t[n].has_hidden_nodes=t[n].notshown:t[n].has_hidden_nodes=t[n].children.reduce((function(t,n){return n.notshown||t}),!1);return this},show_internal_name:function(t){const n=this.internal_names();return!!n&&("function"==typeof n?n(t):n)},node_span:function(t){return arguments.length?(this.node_span="string"==typeof t&&"equal"==t?function(t){return 1}:t,this):this.node_span},reclass_node:function(t){let n=z[o(t)?"node":"internal-node"];return N(t)&&(n+=" "+z["tagged-node"]),C(t,this.selection_attribute_name)&&(n+=" "+z["selected-node"]),t.parent||(n+=" "+z["root-node"]),(L(t)||P(t))&&(n+=" "+z["collapsed-node"]),n},node_visible:j,node_notshown:R,has_hidden_nodes:P,is_node_collapsed:L,node_css_selectors:F,internal_label:function(t,n){this.phylotree.clear_internal_nodes(n);for(var e=self.nodes.length-1;e>=0;e--){var r=self.nodes[e];o(r)||C(r,selection_attribute_name)||(r[selection_attribute_name]=t(r.children))}this.modify_selection((function(t,n){return o(t.target),t.target[selection_attribute_name]}))},def_node_label:B,node_label:function(t){return arguments.length?(this._node_label=t||B,this.update(),this):this._node_label}});function q(t){return[t.clade].reduce((function(t,n,e,r){return t+"path."+n+(e<r.length-1?",":"")}),"")}var Y=Object.freeze({__proto__:null,clade_css_selectors:q,update_collapsed_clades:function(t){let r=this.svg.selectAll("."+this.css_classes["tree-container"]).selectAll(q(this.css_classes)).data(this.phylotree.nodes.descendants().filter(L),(function(t){return t.id||(t.id=++node_id)})),i=function(){},o=e.noop();this.radial(),i=n.line().curve(n.curveBasis).y((function(t){return t[0]})).x((function(t){return t[1]})),o=function(t,n,e,r,i){return n?[e.screen_y+(t[0]-r)/50,e.screen_x+(t[1]-i)/50]:[e.screen_y,e.screen_x]},r.exit().each((function(t){t.collapsed_clade=null})).remove(),t?r.enter().insert("path",":first-child").attr("class",this.css_classes.clade).merge(r).attr("d",(function(t){if(t.collapsed_clade)return t.collapsed_clade;let n=t.collapsed[0][0],e=t.collapsed[0][1];return i(t.collapsed.map((function(r,i){return o(r,i,t,n,e)})))})).attr("d",(function(t){return t.collapsed_clade=i(t.collapsed)})):r.enter().insert("path",":first-child").attr("class",this.css_classes.clade).merge(r).attr("d",(function(t){return t.collapsed_clade=i(t.collapsed)}))}});function H(t){return!(t.target.hidden||t.target.notshown)}function Z(t){return[t.branch,t["selected-branch"],t["tagged-branch"]].reduce((function(t,n,e,r){return t+"path."+n+(e<r.length-1?",":"")}),"")}var W=Object.freeze({__proto__:null,draw_edge:function(t,e,r){t=(t=n.select(t)).attr("class",(t=>this.reclass_edge(t))).on("click",(t=>{this.modify_selection([t.target],this.selection_attribute_name)}));let i=this.draw_branch([e.source,e.target]);r?(t.datum().existing_path&&(t=t.attr("d",(function(t){return t.existing_path}))),t=t.attr("d",i)):t=t.attr("d",i),e.existing_path=i;var o=this.phylotree.branch_length_accessor(e.target);if(void 0!==o){var a=t.selectAll("title");a.empty()&&(a=t.append("title")),a.text("Length = "+o)}else t.selectAll("title").remove();return this.edge_styler&&this.edge_styler(t,e,r),this.phylotree},reclass_edge:function(t){let n=z.branch;return N(t)&&(n+=" "+z["tagged-branch"]),C(t,this.selection_attribute_name)&&(n+=" "+z["selected-branch"]),n},sync_edge_labels:function(){if(this.phylotree.links.forEach((t=>{t[this.selection_attribute_name]=t.target[this.selection_attribute_name]||!1,t.tag=t.target.tag||!1})),this.count_handler()){let t={};t[this.selection_attribute_name]=this.phylotree.links.reduce(((t,n)=>t+(n[this.selection_attribute_name]?1:0)),0),t.tagged=this.phylotree.links.reduce((function(t,n){return t+(N(n)?1:0)}),0),this.count_update(this,t,this.count_handler())}},edge_visible:H,edge_css_selectors:Z,place_along_an_edge:function(t,n){return this.edge_placer(t,n)}});let V="phylotree.event";function X(t){var n=new CustomEvent(V,{detail:["refresh",t]});document.dispatchEvent(n)}function G(t,n){var e=new CustomEvent(V,{detail:["count_update",n,t.count_handler()]});document.dispatchEvent(e)}function K(t){switch(t.detail[0]){case"refresh":t.detail[1].refresh();break;case"count_update":case"layout":t.detail[2](t.detail[1])}return!0}var Q=Object.freeze({__proto__:null,toggle_collapse:function(t){if(t.collapsed){t.collapsed=!1;let n=function(t){o(t)||t.collapsed||t.children.forEach(n),t.hidden=!1};n(t)}else t.collapsed=!0;return this.placenodes(),this},resize_svg:function(t,n,e){let r=this.size;if(this.radial()){let t=this.pad_width(),e="fit-to-size"!=this.options["top-bottom-spacing"]?this.pad_height():0;r=[r[1]+2*t,r[0]+2*t+e],n&&n.selectAll("."+z["tree-container"]).attr("transform","translate ("+t+","+(t+e)+")")}else r=[r[0]+("fit-to-size"!=this.options["top-bottom-spacing"]?this.pad_height():0),r[1]+("fit-to-size"!=this.options["left-right-spacing"]?this.pad_width():0)];return n&&(e&&(n=n.transition(100)),n.attr("height",r[0]).attr("width",r[1])),this.size=r,r},rescale:function(t,n){(n=n||"y_scaled")in this&&(this[n]*=t)},trigger_refresh:X,count_update:G,d3_phylotree_trigger_layout:function(t){var n=new CustomEvent(V,{detail:["layout",t,t.layout_handler()]});document.dispatchEvent(n)},d3_phylotree_event_listener:K,d3_phylotree_add_event_listener:function(){document.addEventListener(V,K,!1)},d3_phylotree_svg_translate:function(t){return!t||null===t[0]&&null===t[1]?"":"translate ("+(null!==t[0]?t[0]:0)+","+(null!==t[1]?t[1]:0)+") "},d3_phylotree_svg_rotate:function(t){return null!==t?"rotate ("+t+") ":""}});let J="d3_layout_phylotree_context_menu";var tt=Object.freeze({__proto__:null,node_dropdown_menu:function(t,r,i,a){let u=n.select(r).select("#d3_layout_phylotree_context_menu");if(u.empty()&&(u=n.select(r).append("div").attr("id",J).attr("class","dropdown-menu").attr("role","menu")),u.selectAll("a").remove(),u.selectAll("h6").remove(),u.selectAll("div").remove(),t){if(!e.some([Boolean(t.menu_items),a.hide,a.selectable,a.collapsible])||!a["show-menu"])return;o(t)||(a.collapsible&&(u.append("a").attr("class","dropdown-item").attr("tabindex","-1").text(L(t)?"Expand Subtree":"Collapse Subtree").on("click",(n=>{u.style("display","none"),this.toggle_collapse(t).update()})),a.selectable&&(u.append("div").attr("class","dropdown-divider"),u.append("h6").attr("class","dropdown-header").text("Toggle selection"))),a.selectable&&(u.append("a").attr("class","dropdown-item").attr("tabindex","-1").text("All descendant branches").on("click",(function(n){u.style("display","none"),i.modify_selection(i.select_all_descendants(t,!0,!0))})),u.append("a").attr("class","dropdown-item").attr("tabindex","-1").text("All terminal branches").on("click",(function(n){u.style("display","none"),i.modify_selection(i.select_all_descendants(t,!0,!1))})),u.append("a").attr("class","dropdown-item").attr("tabindex","-1").text("All internal branches").on("click",(function(n){u.style("display","none"),i.modify_selection(i.select_all_descendants(t,!1,!0))})))),t.parent&&(a.selectable&&(u.append("a").attr("class","dropdown-item").attr("tabindex","-1").text("Incident branch").on("click",(function(n){u.style("display","none"),i.modify_selection([t])})),u.append("a").attr("class","dropdown-item").attr("tabindex","-1").text("Path to root").on("click",(n=>{u.style("display","none"),this.modify_selection(this.phylotree.path_to_root(t))})),(a.reroot||a.hide)&&u.append("div").attr("class","dropdown-divider")),a.reroot&&u.append("a").attr("class","dropdown-item").attr("tabindex","-1").text("Reroot on this node").on("click",(n=>{u.style("display","none"),this.phylotree.reroot(t),this.refresh().update()})),a.hide&&u.append("a").attr("class","dropdown-item").attr("tabindex","-1").text("Hide this "+(o(t)?"node":"subtree")).on("click",(n=>{u.style("display","none"),this.modify_selection([t],"notshown",!0,!0).update_has_hidden_nodes().update()}))),P(t)&&u.append("a").attr("class","dropdown-item").attr("tabindex","-1").text("Show all descendant nodes").on("click",(function(n){u.style("display","none"),i.modify_selection(i.select_all_descendants(t,!0,!0),"notshown",!0,!0,"false").update_has_hidden_nodes().update()}));var c=[];if("menu_items"in t&&"object"==typeof t.menu_items&&t.menu_items.forEach((function(n){3==n.length&&(n[2]&&!n[2](t)||c.push([n[0],n[1]]))})),c.length){const n=[a.hide,a.selectable,a.collapsible];e.some(n)&&u.append("div").attr("class","dropdown-divider"),c.forEach((function(n){u.append("a").attr("class","dropdown-item").attr("tabindex","-1").text(constant(n[0])(t)).on("click",e.partial(n[1],t))}))}let f=$(r),s=n.mouse(f[0]);u.style("position","absolute").style("left",s[0]+"px").style("top",s[1]+"px").style("display","block")}else u.style("display","none")},add_custom_menu:function(t,n,e,r){"menu_items"in t||(t.menu_items=[]),t.menu_items.some((function(t){return t[0]==n&&t[1]==e&&t[2]==r}))||t.menu_items.push([n,e,r])},modify_selection:function(t,n,r,i,o){if(n=n||this.selection_attribute_name,o=o||"toggle",this.options["restricted-selectable"].length){if(!e.contains(e.keys(O),t))return;t=O[t]}if(!this.options["restricted-selectable"]&&!this.options.selectable||this.options["binary-selectable"])this.options["binary-selectable"]&&("function"==typeof t?this.phylotree.links.forEach((function(e){var r=t(e);e[n]=e[n]||!1,e[n]!=r&&(e[n]=r,u=!0,e.target[n]=r),this.options["attribute-list"].forEach((function(t){t!=n&&!0===e[n]&&(e[t]=!1,e.target[t]=!1)}))})):(t.forEach((function(t){var e;e=!t[n],t[n]!=e&&(t[n]=e,u=!0)})),this.phylotree.links.forEach((function(t){t[n]=t.target[n],this.phylotree.options["attribute-list"].forEach((function(e){e!=n&&!0!==t[n]&&(t[e]=!1,t.target[e]=!1)}))}))),u&&(i||X(this),this.count_handler()&&((a={})[n]=this.phylotree.links.reduce((function(t,e){return t+(e[n]?1:0)}),0),this.count_update(this,a,this.count_handler())),r&&this.placenodes()));else{var a,u=!1;"function"==typeof t?this.phylotree.links.forEach((function(e){var r=t(e);e[n]=e[n]||!1,e[n]!=r&&(e[n]=r,u=!0,e.target[n]=r)})):(t.forEach((function(t){var e;switch(o){case"true":e=!0;break;case"false":e=!1;break;default:e=!t[n]}t[n]!=e&&(t[n]=e,u=!0)})),this.links.forEach((function(t){t[n]=t.target[n]}))),u&&(i||X(this),this.count_handler()&&((a={})[n]=this.phylotree.links.reduce((function(t,e){return t+(e[n]?1:0)}),0),G(this,a,this.count_handler())),r&&this.placenodes())}return this.selection_callback&&"tag"!=n&&this.selection_callback(this.get_selection()),this.refresh(),this},get_selection:function(){return this.phylotree.nodes.filter((t=>t[this.selection_attribute_name]))},select_all_descendants:function(t,n,e){let r=[];return function i(a){o(a)?n&&a!=t&&r.push(a):(e&&a!=t&&r.push(a),a.children.forEach(i))}(t),r},selection_callback:function(t){return t?(this.selection_callback=t,this):this.selection_callback}});function nt(t){return function(){return t}}class et{constructor(t,n,r={}){this.css_classes=z,this.phylotree=t,this.container=n,this.separation=function(t,n){return 0},this._node_label=this.def_node_label,this.svg=null,this.selection_callback=null,this.scales=[1,1],this.size=[1,1],this.fixed_width=[30,20],this.font_size=12,this.scale_bar_font_size=12,this.offsets=[0,this.font_size/2],this.draw_branch=S,this.draw_scale_bar=null,this.edge_placer=E,this.count_listener_handler=function(){},this.layout_listener_handler=function(){},this.node_styler=void 0,this.edge_styler=void 0,this.shown_font_size=this.font_size,this.selection_attribute_name="selected",this.right_most_leaf=0,this.label_width=0,this.radial_center=0,this.radius=1,this.radius_pad_for_bubbles=0,this.rescale_node_span=1,this.node_span=function(t){return 1},this.relative_node_span=function(t){return this.node_span(t)/this.rescale_node_span};let i={layout:"left-to-right",logger:console,branches:"step",scaling:!0,bootstrap:!1,"color-fill":!0,"internal-names":!1,selectable:!0,"restricted-selectable":!1,collapsible:!0,"left-right-spacing":"fixed-step","top-bottom-spacing":"fixed-step","left-offset":0,"show-scale":"top","draw-size-bubbles":!1,"binary-selectable":!1,"is-radial":!1,"attribute-list":[],"max-radius":768,"annular-limit":.38196601125010515,compression:.2,"align-tips":!1,"maximum-per-node-spacing":100,"minimum-per-node-spacing":2,"maximum-per-level-spacing":100,"minimum-per-level-spacing":10,node_circle_size:nt(3),transitions:null,brush:!0,reroot:!0,hide:!0,"label-nodes-with-name":!1,zoom:!1,"show-menu":!0,"show-labels":!0};this.ensure_size_is_in_px=function(t){return"number"==typeof t?t+"px":t},this.options=e.defaults(r,i),this.width=this.options.width||800,this.height=this.options.height||600,this.rescale_node_span=this.phylotree.nodes.children.map((t=>{if(o(t)||this.show_internal_name(t))return this.node_span(t)})).reduce((function(t,n){return Math.min(n,t||1e200)}),null)||1,this.initialize_svg(this.container),this.links=this.phylotree.nodes.links(),this.update()}pad_height(){return this.draw_scale_bar?this.scale_bar_font_size+25:0}pad_width(){this.label_width=this._label_width(this.shown_font_size);const t=this.options["show-labels"]?this.label_width:0;return this.offsets[1]+this.options["left-offset"]+t}collapse_node(t){L(t)||(t.collapsed=!0)}set_size(t){if(!arguments.length)return this.size;let n=t;return"fixed-step"!=this.options["top-bottom-spacing"]&&(this.size[0]=n[0]),"fixed-step"!=this.options["left-right-spacing"]&&(this.size[1]=n[1]),this}initialize_svg(t){return arguments.length?(this.svg!==t&&(n.select(t).select("svg").remove(),this.svg=n.select(t).append("svg").attr("width",this.width).attr("height",this.height),this.set_size([this.height,this.width]),"phylotree-container"==this.css_classes["tree-container"]&&(this.svg.selectAll("*").remove(),this.svg.append("defs")),n.select(this.container).on("click",(t=>{this.handle_node_click(null)}),!0)),this):this.svg}update_layout(t,e){e&&(this.nodes=n.hierarchy(t),this.nodes.each((function(t){t.id=null}))),this.update(),this.sync_edge_labels()}update(t){var r=this;if(!this.svg)return this;this.placenodes(),t=this.transitions(t);let i=0,a=this.svg.selectAll("."+z["tree-container"]).data([0]);if(a=a.enter().append("g").attr("class",z["tree-container"]).merge(a).attr("transform",(t=>this.d3_phylotree_svg_translate([this.offsets[1]+this.options["left-offset"],this.pad_height()]))),this.draw_scale_bar){let t=this.svg.selectAll("."+z["tree-scale-bar"]).data([0]);t.enter().append("g").attr("class",z["tree-scale-bar"]).style("font-size",this.ensure_size_is_in_px(this.scale_bar_font_size)).merge(t).attr("transform",(t=>this.d3_phylotree_svg_translate([this.offsets[1]+this.options["left-offset"],this.pad_height()-10]))).call(this.draw_scale_bar),t.selectAll("text").style("text-anchor","end")}else this.svg.selectAll("."+z["tree-scale-bar"]).remove();a=this.svg.selectAll("."+z["tree-container"]).data([0]),this.update_collapsed_clades(t);let u=a.selectAll(Z(z)).data(this.links.filter(H),(t=>t.target.id||(t.target.id=++i)));u.exit().remove(),u=u.enter().insert("path",":first-child").merge(u).each((function(n){r.draw_edge(this,n,t)}));let c=a.selectAll(F(z)).data(this.phylotree.nodes.descendants().filter(j),(t=>t.id||(t.id=++i)));if(c.exit().remove(),c=c.enter().append("g").attr("class",this.reclass_node).merge(c).attr("transform",(t=>{const n="right-to-left"==this.options.layout&&o(t);return t.screen_x=x(t),t.screen_y=w(t),this.d3_phylotree_svg_translate([n?0:t.screen_x,t.screen_y])})).each((function(n){r.draw_node(this,n,t)})).attr("transform",(t=>{if(!e.isUndefined(t.screen_x)&&!e.isUndefined(t.screen_y))return"translate("+t.screen_x+","+t.screen_y+")"})),this.options["label-nodes-with-name"]&&(c=c.attr("id",(t=>"node-"+t.name))),this.resize_svg(this.phylotree,this.svg,t),this.options.brush){var f=a.selectAll("."+z["tree-selection-brush"]).data([0]).enter().insert("g",":first-child").attr("class",z["tree-selection-brush"]),s=n.brush().on("brush",(()=>{var t=n.event.target.extent(),e=this.links.filter(H).filter(((n,e)=>n.source.screen_x>=t[0][0]&&n.source.screen_x<=t[1][0]&&n.source.screen_y>=t[0][1]&&n.source.screen_y<=t[1][1]&&n.target.screen_x>=t[0][0]&&n.target.screen_x<=t[1][0]&&n.target.screen_y>=t[0][1]&&n.target.screen_y<=t[1][1])).map((t=>t.target));this.modify_selection(this.phylotree.links.map((t=>t.target)),"tag",!1,e.length>0,"false"),this.modify_selection(e,"tag",!1,!1,"true")})).on("end",(()=>{}));f.call(s)}if(this.sync_edge_labels(),this.options.zoom){let t=n.behavior.zoom().scaleExtent([.1,10]).on("zoom",(()=>{let t=n.event.translate;t[0]+=this.offsets[1]+this.options["left-offset"],t[1]+=this.pad_height(),n.select("."+z["tree-container"]).attr("transform","translate("+t+")scale("+n.event.scale+")")}));this.svg.call(t)}return this}_handle_single_node_layout(t,n,e,r,i){let o=this.node_span(t)/this.rescale_node_span;return this.x=t.x=this.x+this.separation(n,t)+.5*(e+o),this._extents[1][1]=Math.max(this._extents[1][1],t.y),this._extents[1][0]=Math.min(this._extents[1][0],t.y-.5*o),this._extents[0][1]=r?Math.max(this._extents[0][1],i+(t.x-i)*this.options.compression+this.save_span+(.5*o+this.separation(n,t))*this.options.compression):Math.max(this._extents[0][1],this.x+.5*o+this.separation(n,t)),n=t,e=o,this.last_node=n,this.last_span=e,[n,e]}tree_layout(t){if(R(t))return;let n=o(t);t.text_angle=null,t.text_align=null,t.radius=null,t.angle=null;let e=!1,r=!1;if(t.parent)if(this.do_scaling){if(e)return 0;if(t.y=this.phylotree.branch_length_accessor(t),void 0===t.y)return e=!0,0;t.y+=t.parent.y}else t.y=n?this.max_depth:t.depth;else this.x=0,t.y=0;if(n&&this._handle_single_node_layout(t,null,0,r,0),!n)if(L(t)&&!r){let n=this.x;if(this.save_span=.5*this.last_span,r=!0,this.process_internal_node(t),r=!1,"number"==typeof t.x){t.x=n+(t.x-n)*this.options.compression+this.save_span,t.collapsed=[[t.x,t.y]];var i=e=>{e.hidden=!0,o(e)?(this.x=e.x=n+(e.x-n)*this.options.compression+this.save_span,t.collapsed.push([e.x,e.y])):e.children.map(i)};this.x=n,i(t),t.collapsed.splice(1,0,[n,t.y]),t.collapsed.push([this.x,t.y]),t.collapsed.push([t.x,t.y]),t.hidden=!1}}else this.process_internal_node(t);return t.x}process_internal_node(t){let n=0;if(this.show_internal_name(t)){let n=t.children.length/2>>0,e=0,r=!1;for(let i=0;i<t.children.length;i++)"number"==typeof this.tree_layout(t.children[i]).bind(this)&&e++,e>=n&&!r&&(this._handle_single_node_layout(t),r=!0);0==e?(t.notshown=!0,t.x=void 0):r||this._handle_single_node_layout(t)}else t.x=t.children.map(this.tree_layout.bind(this)).reduce(((t,e)=>"number"==typeof e?t+e:(n+=1,t)),0),n==t.children.length?(t.notshown=!0,t.x=void 0):t.x/=t.children.length-n}do_lr(t){if(this.radial()&&t&&(this.offsets[1]=0),"fixed-step"==this.options["left-right-spacing"])this.size[1]=this.max_depth*this.fixed_width[1],this.scales[1]=(this.size[1]-this.offsets[1]-this.options["left-offset"])/this._extents[1][1],this.label_width=this._label_width(this.shown_font_size),this.radial()&&(this.label_width*=2);else{this.label_width=this._label_width(this.shown_font_size),t=!0;let n=this.size[1]-this.offsets[1]-this.options["left-offset"];.5*n<this.label_width&&(this.shown_font_size*=.5*n/this.label_width,this.label_width=.5*n),this.scales[1]=(this.size[1]-this.offsets[1]-this.options["left-offset"]-this.label_width)/this._extents[1][1]}}placenodes(){this._extents=[[0,0],[0,0]];this.save_x=0,this.save_span=0,this.do_scaling=this.options.scaling;this.is_under_collapsed_parent=!1,this.max_depth=1,this.phylotree.nodes.x=this.tree_layout(this.phylotree.nodes,this.do_scaling),this.max_depth=n.max(this.phylotree.nodes.descendants(),(t=>t.depth)),this.do_scaling;let t=!1;if(this.draw_scale_bar=this.options["show-scale"]&&this.do_scaling,this.offsets[1]=Math.max(this.font_size,-this._extents[1][0]*this.fixed_width[0]),"fixed-step"==this.options["top-bottom-spacing"]?(this.size[0]=this._extents[0][1]*this.fixed_width[0],this.scales[0]=this.fixed_width[0]):(this.scales[0]=(this.size[0]-this.pad_height())/this._extents[0][1],t=!0),this.shown_font_size=Math.min(this.font_size,this.scales[0]),this.radial()){this.draw_branch=e.partial(T,e,this.radial_center),this.edge_placer=k;let n=null,r=null,i=null,o=0,a=this._extents[0][1]*this.scales[0],u=function(t,n,e,r,i){return i=i||0,Math.sqrt((n-t)*(n-t)+2*(t+i)*(n+i)*(1-Math.cos(e-r)))},c=0;this.phylotree.nodes.each((t=>{let n=t.x*this.scales[0];t.angle=2*Math.PI*n/a,t.text_angle=t.angle-Math.PI/2,t.text_angle=t.text_angle>0&&t.text_angle<Math.PI,t.text_align=t.text_angle?"end":"start",t.text_angle=(t.text_angle?180:0)+180*t.angle/Math.PI})),this.do_lr(t),this.phylotree.nodes.each((t=>{t.radius=t.y*this.scales[1]/this.size[1],c=Math.max(t.radius,c)}));let f=0;this.phylotree.nodes.each((t=>{if(!t.children){let e=t.x*this.scales[0];if(null!==n){let a=e-r,s=u(t.radius,i,t.angle,n,f),l=s>0?a/s:10*this.options["max-radius"];if(l>this.options["max-radius"]){let e=a/this.options["max-radius"],r=t.radius+i,u=t.radius*i-(e*e-(i-t.radius)*(i-t.radius))/2/(1-Math.cos(n-t.angle)),s=Math.sqrt(r*r-4*u);f=Math.min(this.options["annular-limit"]*c,(-r+s)/2),o=this.options["max-radius"]}else o=Math.max(o,l)}n=t.angle,r=e,i=t.radius}})),this.radius=Math.min(this.options["max-radius"],Math.max(a/2/Math.PI,o)),t&&(this.radius=Math.min(this.radius,.5*(Math.min(a,this._extents[1][1]*this.scales[1])-this.label_width)-this.radius*f)),this.radial_center=this.radius_pad_for_bubbles=this.radius,this.draw_branch=e.partial(T,e,this.radial_center);let s=1;f&&(s=c/(c+f),this.radius*=s),this.phylotree.nodes.each((t=>{if(A(t,this.radius,f,this.radial_center,this.scales,this.size),c=Math.max(c,t.radius),this.options["draw-size-bubbles"]?this.radius_pad_for_bubbles=Math.max(this.radius_pad_for_bubbles,t.radius+this.node_bubble_size(t)):this.radius_pad_for_bubbles=Math.max(this.radius_pad_for_bubbles,t.radius),t.collapsed){t.collapsed=t.collapsed.map((t=>{let n={};return n.x=t[0],n.y=t[1],n=A(n,this.radius,f,this.radial_center,this.scales,this.size),[n.x,n.y]}));let n=t.collapsed[1];t.collapsed=t.collapsed.filter((function(e,r){return r<3||r>t.collapsed.length-4||Math.sqrt(Math.pow(e[0]-n[0],2)+Math.pow(e[1]-n[1],2))>3&&(n=e,!0)}))}})),this.size[0]=this.radial_center+this.radius/s,this.size[1]=this.radial_center+this.radius/s}else this.do_lr(),this.draw_branch=S,this.edge_placer=E,this.right_most_leaf=0,this.phylotree.nodes.each((t=>{if(t.x*=this.scales[0],t.y*=.8*this.scales[1],"right-to-left"==this.options.layout&&(t.y=this._extents[1][1]*this.scales[1]-t.y),o(t)&&(this.right_most_leaf=Math.max(this.right_most_leaf,t.y+this.node_bubble_size(t))),t.collapsed){t.collapsed.map((t=>[t[0]*=this.scales[0],t[1]*=this.scales[1]]));let n=t.collapsed[1][0];t.collapsed=t.collapsed.filter((function(e,r){return r<3||r>t.collapsed.length-4||e[0]-n>3&&(n=e[0],!0)}))}}));if(this.draw_scale_bar){let t,e;if(this.radial()){if(e=Math.min(this.radius/5,50),t=Math.pow(10,Math.ceil(Math.log(this._extents[1][1]*e/this.radius)/Math.log(10))),e=t*(this.radius/this._extents[1][1]),e<30){let n=Math.ceil(30/e);e*=n,t*=n}}else t=this._extents[1][1],e=this.size[1]-this.offsets[1]-this.options["left-offset"];let r=n.scaleLinear().domain([0,t]).range([this.shown_font_size,this.shown_font_size+e]),i=n.format(".2g");if(this.draw_scale_bar=n.axisTop().scale(r).tickFormat((function(t){return 0===t?"":i(t)})),this.radial())this.draw_scale_bar.tickValues([t]);else{let t=function(t,n){return n?Math.round(t*(n=Math.pow(10,n)))/n:Math.round(t)},n=r.ticks();n=n.length>1?n[1]:n[0],this.draw_scale_bar.ticks(Math.min(10,t(e/(this.shown_font_size*i(n).length*.8),0)))}}else this.draw_scale_bar=null;return this}spacing_x(t,n){return arguments.length?(this.fixed_width[0]!=t&&t>=this.options["minimum-per-node-spacing"]&&t<=this.options["maximum-per-node-spacing"]&&(this.fixed_width[0]=t,n||this.placenodes()),this):this.fixed_width[0]}spacing_y(t,n){return arguments.length?(this.fixed_width[1]!=t&&t>=this.options["minimum-per-level-spacing"]&&t<=this.options["maximum-per-level-spacing"]&&(this.fixed_width[1]=t,n||this.placenodes()),this):this.fixed_width[1]}_label_width(t){t=t||this.shown_font_size;let n=0;return this.phylotree.nodes.descendants().filter(j).forEach((e=>{let r=12+this._node_label(e).length*t*.8;null!==e.angle&&(r*=Math.max(Math.abs(Math.cos(e.angle)),Math.abs(Math.sin(e.angle)))),n=Math.max(r,n)})),n}font_size(t){return arguments.length?(this.font_size=void 0===t?12:t,this):this.font_size}scale_bar_font_size(t){return arguments.length?(this.scale_bar_font_size=void 0===t?12:t,this):this.scale_bar_font_size}node_circle_size(t,n){return arguments.length?(this.options.node_circle_size=nt(void 0===t?3:t),this):this.options.node_circle_size}css(t){if(0===arguments.length)return this.css_classes;if(arguments.length>2){var n={};return n[t[0]]=t[1],this.css(n)}for(var e in z)e in t&&t[e]!=z[e]&&(z[e]=t[e]);return this}transitions(t){return void 0!==t?t:null!==this.options.transitions?this.options.transitions:this.phylotree.nodes.descendants().length<=300}css_classes(t,n){if(!arguments.length)return this.css_classes;let e=!1;for(var r in z)r in t&&t[r]!=this.css_classes[r]&&(e=!0,this.css_classes[r]=t[r]);return n&&e&&this.layout(),this}layout(t){return this.svg?(this.svg.selectAll("."+this.css_classes["tree-container"]+",."+this.css_classes["tree-scale-bar"]+",."+this.css_classes["tree-selection-brush"]),this.d3_phylotree_trigger_layout(this),this.update()):(this.d3_phylotree_trigger_layout(this),this)}handle_node_click(t){this.node_dropdown_menu(t,this.container,this,this.options)}refresh(){if(this.svg){let t=this.svg.selectAll("."+this.css_classes["tree-container"]).selectAll(Z(this.css_classes)).attr("class",this.reclass_edge.bind(this));this.edge_styler&&t.each((function(t){this.edge_styler(n.select(this),t)}))}return this}count_handler(t){return arguments.length?(this.count_listener_handler=t,this):this.count_listener_handler}style_nodes(t){return arguments.length?(this.node_styler=t,this):this.node_styler}style_edges(t){return arguments.length?(this.edge_styler=t.bind(this),this):this.edge_styler}item_selected(t,n){return t[n]||!1}}e.extend(et.prototype,Y),e.extend(et.prototype,I),e.extend(et.prototype,W),e.extend(et.prototype,Q),e.extend(et.prototype,tt),e.extend(et.prototype,D);let rt=class{constructor(t,r={}){this.newick_string="",this.nodes=[],this.links=[],this.parsed_tags=[],this.partitions=[],this.branch_length_accessor=b,this.branch_length=b,this.logger=r.logger||console,this.selection_attribute_name="selected";r.bootstrap_values;var i=r.type||void 0,o=[],a=this;if(e.isString(i))i in p?o=p[i](t,r):a.logger.error("type "+i+" not in registry! Available types are "+e.keys(p));else if(e.isFunction(i))try{o=i(t,r)}catch(t){a.logger.error("Could not parse custom format!")}else"root"==t.name?o={json:t,error:null}:"string"!=typeof t?o=t:"application/xml"==t.contentType?o=d(t):(this.newick_string=t,o=u(t));if(o.json){a.nodes=n.hierarchy(o.json);let t={};a.nodes.each((n=>{n.data.annotation&&(t[n.data.annotation]=!0)})),a.parsed_tags=Object.keys(t)}else a.nodes=[];return a.links=a.nodes.links(),a}json(t){var n=0;this.traverse_and_compute((function(t){t.json_export_index=n++}),t);var r=new Array(n);return n=0,this.traverse_and_compute((function(t){let i=e.clone(t);delete i.json_export_index,t.parent&&(i.parent=t.parent.json_export_index),t.children&&(i.children=e.map(t.children,(function(t){return t.json_export_index}))),r[n++]=i}),t),this.traverse_and_compute((function(t){delete t.json_export_index}),t),JSON.stringify(r)}traverse_and_compute(t,n,r,i){return(n="pre-order"==(n=n||"post-order")?function(n){g(n,t,i)}:"in-order"==n?function(n){v(n,t,i)}:function(n){e.isUndefined(n)||_(n,t,i)})(r||this.nodes),this}get_parsed_tags(){return this.parsed_tags}update(t){this.nodes=t}render(t,n){return this.display=new et(this,t,n),this.display}};function it(t){var n=t.branch_length_accessor;if(!n)throw"A non-null branch lengths accessor function is required for this operation";var r=0;function i(t){for(var n=0;n<t.children.length;n++)for(var r=0;r<t.children.length;r++)n!=r&&e.each(t.children[r].cot_path_to_leaves_below,(function(e,i){t.children[n].cot_path_to_leaves_above&&(t.children[n].cot_path_to_leaves_above[i]=e+t.children[r].cot_computed_length)}))}return t.traverse_and_compute((function(i){if(i.cot_computed_length=n(i),i.parent&&e.isUndefined(i.cot_computed_length))throw"Non-null branch lengths are required for this operation: missing branch length at node "+i.data.name;t.is_leafnode(i)?(i.cot_leaf_index=r++,i.cot_path_to_leaves_below={},i.cot_path_to_leaves_below[i.cot_leaf_index]=0,i.cot_path_to_leaves_above={}):(i.cot_path_to_leaves_below={},i.cot_path_to_leaves_above={})})),t.traverse_and_compute((function(t){t.parent&&e.each(t.cot_path_to_leaves_below,(function(n,e){t.parent.cot_path_to_leaves_below[e]=n+t.cot_computed_length}))})),i(t.get_root_node()),t.traverse_and_compute((function(n){n.parent&&(e.each(n.parent.cot_path_to_leaves_above,(function(t,e){n.cot_path_to_leaves_above[e]=t+n.parent.cot_computed_length})),t.is_leafnode(n)||i(n))}),"pre-order"),r}function ot(t,n,e,r,i){var o=t.branch_length(n),a=!1;if(e||(r=n.data.root_to_tip,i=0,a=!0),n.children)for(var u=0;u<n.children.length;u++)n.children[u]!=e?ot(t,n.children[u],n,r,i):a=!0;n.data.rtta=n.data.root_to_tip-r+i,a&&(r-=o,i+=o),n.parent&&a&&ot(t,n.parent,n,r,i)}function at(t){var n=t.reduce((function(t,n){return n[2]+t}),0),e=t.reduce((function(t,n){return n[2]*n[0]+t}),0),r=t.reduce((function(t,n){return n[2]*n[1]+t}),0),i=e/n,o=r/n,a=0,u=0,c=0;t.forEach((function(t){var n=t[0]-i;u+=t[2]*n*n,a+=t[2]*n*t[1],c+=t[2]*(t[1]-o)*(t[1]-o)}));var f=(r-e*(a/=u))/n,s=0;return t.forEach((function(t){var n=t[1]-f-a*t[0];s+=t[2]*n*n})),{intercept:f,slope:a,r2:1-s/c,"var (intercept)":Math.sqrt((1+e*e/(n*u))/n),"var (slope)":Math.sqrt(1/u)}}function ut(t){var n=t.branch_length_accessor,r=0;t.traverse_and_compute((i=>{if(i.parent&&(i.data._computed_length=n(i),!e.isNumber(i.data._computed_length)))throw"root_to_tip cannot be run on trees with missing branch lengths";t.is_leafnode(i)&&(i.data.leaf_index=r++),"r2t"in i.data&&delete i.data.r2t})),t.traverse_and_compute((n=>{n.parent&&("r2t"in n.parent.data||(n.parent.data.r2t={}),t.is_leafnode(n)?n.parent.data.r2t[n.data.leaf_index]=n.data._computed_length:(e.each(n.data.r2t,(function(t,e){n.parent.data.r2t[e]=t+n.data._computed_length})),delete n.data.r2t),delete n.data._computed_length)}));var i=t.get_root_node().data.r2t;return t.traverse_and_compute((n=>{t.is_leafnode(n)&&(n.data.root_to_tip=i[n.data.leaf_index]||0,delete n.data.leaf_index)})),delete t.get_root_node().data.r2t,t}rt.prototype.is_leafnode=o,rt.prototype.mrca=function(){var t,n;return t=(t=1==arguments.length?arguments[0]:Array.from(arguments)).map((function(t){return"string"==typeof t?t:t.name})),this.traverse_and_compute((function(r){r.children?r.parent?(r.mrca=e.union(...r.descendants().map((t=>t.mrca))),n||r.mrca.length!=t.length||(n=r)):n||(n=r):r.mrca=e.intersection([r.name],t)})),n},rt.prototype.has_branch_lengths=function(){let t=this.branch_length;return!!t&&e.every(this.nodes.descendants(),(function(n){return!n.parent||!e.isUndefined(t(n))}))},rt.prototype.get_branch_lengths=function(){let t=this.branch_length;return e.map(this.nodes.descendants(),(n=>t(n)))},rt.prototype.branch_name=function(t){return arguments.length?(this.node_label=t||def_node_label,this):this.node_label},rt.prototype.normalize_branch_lengths=function(t){let n=this.branch_length,r=e.map(this.nodes.descendants(),(function(t){return n(t)?n(t):null}));const i=e.max(r),o=e.min(r);return e.each(this.nodes.descendants(),(t=>{let e=n(t);e&&n(t,(e-o)/(i-o))})),this},rt.prototype.scale_branch_lengths=function(t){let n=this.branch_length;return e.each(this.nodes.descendants(),(e=>{let r=n(e);r&&n(e,t(r))})),this},rt.prototype.get_newick=function(t){let n=this;t||(t=t=>t.data.name);let e=[];return t=t||"",function r(i){o(i)||(e.push("("),i.children.forEach((function(t,n){n&&e.push(","),r(t)})),e.push(")")),e.push(t(i));let a=n.branch_length_accessor(i);void 0!==a&&e.push(":"+a)}(this.nodes),e.join("")+";"},rt.prototype.resort_children=function(t,n,e){return this.nodes.sum((function(t){return t.value})).sort(t),this.display&&(this.display.update_layout(this.nodes),this.display.update()),this},rt.prototype.set_branch_length=function(t){return arguments.length?(this.branch_length_accessor=t||b,this):this.branch_length_accessor},rt.prototype.max_parsimony=function(t,n){const r=e.partial((function(t,n){if(t.mp=[[0,0],[!1,!1]],o(t))t.mp[1][0]=t.mp[1][1]=t.data.trait==n||!1,t.mp[0][0]=t.mp[1][0]?1:0,t.mp[0][1]=1-t.mp[0][0];else{t.children.forEach(r);var e=t.children.reduce((function(t,n){return n.mp[0][0]+t}),0),i=t.children.reduce((function(t,n){return n.mp[0][1]+t}),0);t.data.trait==n?(t.mp[0][0]=i+1,t.mp[1][0]=!0,t.mp[0][1]=i,t.mp[1][1]=!0):(e<i+1?(t.mp[0][0]=e,t.mp[1][0]=!1):(t.mp[0][0]=i+1,t.mp[1][0]=!0),i<e+1?(t.mp[0][1]=i,t.mp[1][1]=!0):(t.mp[0][1]=e+1,t.mp[1][1]=!1))}}),e,n);r(this.nodes),this.nodes.each((t=>{t.parent?t.mp=t.mp[1][t.parent.mp?1:0]:t.mp=t.mp[1][t.mp[0][0]<t.mp[0][1]?0:1],t.mp&&(t.data.trait=n)}))},rt.prototype.leftChildRightSibling=y,e.extend(rt.prototype,a),e.extend(rt.prototype,m),e.extend(rt.prototype,l);const ct=n.timeParse("%Y%m%d"),ft=/([0-9]{4}).?([0-9]{2}).?([0-9]{2})$/g,st=function(t){if(n.layout.phylotree.is_leafnode(t)&&"name"in t){var e=ft.exec(t.name);if(e)return e[1]+e[2]+e[3]}return null};t.center_of_tree=function(t,n){n=n||2;var r=it(t),i=Number.MAX_VALUE,o=0,a=null;return 2==n?t.traverse_and_compute((function(t){if(t.parent){var n=0,u=0,c=0,f=0,s=0;e.each(t.cot_path_to_leaves_below,(function(t){n+=t,u+=t*t,s++})),e.each(t.cot_path_to_leaves_above,(function(t){c+=t,f+=t*t}));var l=r-s,h=(c-n+t.cot_computed_length*l)/r;h<0?h=0:h>t.cot_computed_length&&(h=t.cot_computed_length);var d=f+u+2*(c*(t.cot_computed_length-h)+n*h)+s*h*h+(t.cot_computed_length-h)*(t.cot_computed_length-h)*l;d<i&&(a=t,o=h/t.cot_computed_length,i=d),delete t.cot_computed_length,delete t.cot_path_to_leaves_below,delete t.cot_path_to_leaves_above,delete t.cot_leaf_index}})):t.traverse_and_compute((function(t){if(t.parent)for(var r=t.cot_computed_length>0?.05*t.cot_computed_length:.1,u=0;u<t.cot_computed_length;){var c=0;e.each(t.cot_path_to_leaves_below,(function(t){c+=Math.pow(t+u,n)})),e.each(t.cot_path_to_leaves_above,(function(e){c+=Math.pow(e+(t.cot_computed_length-u),n)})),c<i&&(a=t,o=u/t.cot_computed_length,i=c),u+=r}})),{location:a,breakpoint:o,distance:i}},t.cluster_picker=function(t,n,r,i,o){i=i||t.get_root_node(),o=e.isNumber(o)?o:1;let a=t.branch_length;t.traverse_and_compute((function(t){if(t.parent){if(t._computed_length=a(t),!e.isNumber(t._computed_length))throw"cluster_picker cannot be run on trees with missing branch lengths";t.max_path_length=0}})),t.traverse_and_compute((function(t){t.parent&&(t.parent.max_path_length=Math.max(t.parent.max_path_length,t.max_path_length+t._computed_length))}));var u=[];return t.traverse_and_compute(e.noop,"pre-order",i,(function(i){if(!t.is_leafnode(i)){var a=e.isString(i.data.bootstrap_values)?+i.data.bootstrap_values:o;if(a>=n){var c=e.reduce(i.children,(function(t,n){return n.max_path_length+n._computed_length+t}),0);if(c<=r)return u.push({root:i,diameter:c,bootstrap:a}),!0}}return!1})),t.traverse_and_compute((function(t){t.parent&&(delete t._computed_length,delete t.max_path_length)}),"post-order",i),e.each(u,(function(n){n.members=[],t.traverse_and_compute((function(e){t.is_leafnode(e)&&n.members.push(e)}),"post-order",n.root)})),u},t.compute_midpoint=function(t){if(!t.has_branch_lengths())throw"Center of tree calculation cannot be performed on trees that do not have fully specified branch lengths";var n=t.branch_length;t.traverse_and_compute((function(e){if(e.parent){var r,i=n(e);t.is_leafnode(e)?(r=e,e.max_path=0,e.max_path_terminus=e):(i+=e.max_path,r=e.max_path_terminus),(!e.parent.max_path||e.parent.max_path<i)&&(e.parent.max_path=i,e.parent.max_path_terminus=r)}}));var e=t.get_root_node(),r=0;if(e.children.forEach((function(t){if(t.max_path_terminus!==e.max_path_terminus){var i=t.max_path+n(t);i>=r&&(r=i,t.max_path_terminus)}})),e.max_path>r){r=.5*(r+e.max_path);for(var i=e.max_path_terminus;;){var o=n(i);if(!(o<=r))return{location:i,breakpoint:r/o};r-=o,i=i.parent}}return{location:e,breakpoint:0}},t.extract_dates=function(t,n,e=ct){return n=n||st,t.traverse_and_compute((function(t){var r=n(t);if(r)try{t.data.date_value=e(r);var i=t.data.date_value.getFullYear(),o=new Date(i,0,1),a=new Date(i+1,0,1);return void(t.data.decimal_date_value=i+(t.data.date_value-o)/(a-o))}catch(t){}t.data.date_value=null,t.data.decimal_date_value=null})),t},t.fit_root_to_tip=function(t){var n=[],r=0,i=0;(function(t){t.traverse_and_compute((function(n){t.is_leafnode(n)&&(n.data.copy_number=1)}))})(t),ut(t),t.traverse_and_compute((function(r){t.is_leafnode(r)&&!e.isNull(r.data.decimal_date_value)&&n.push([r.data.decimal_date_value,r.data.rtta,r.data.copy_number])}));let o=at(n);return t.traverse_and_compute((function(a){if(t.is_leafnode(a)&&!e.isNull(a.data.decimal_date_value)){ot(t,a,null,0,0),n=[],t.traverse_and_compute((function(r){t.is_leafnode(r)&&!e.isNull(r.data.decimal_date_value)&&n.push([r.data.decimal_date_value,r.data.rtta,r.data.copy_number])}));var u=at(n),c=u.r2;c>r&&(r=c,i=a,o=u)}})),{root:i,fit:o}},t.fitch=function(t){_(t.nodes,(t=>{t.visited=!0}))},t.inOrder=v,t.leftChildRightSibling=y,t.load_annotations=f,t.pairwise_distances=it,t.parse_annotations=c,t.phylopart=function(t,n,r,i,o){i=e.isNumber(i)?i:1;var a=it(t),u=t.get_root_node().children[0],c=Number.MAX_VALUE,f=Number.MAX_VALUE;if(!(r>0&&r<1))throw"Invalid percentile threshold in perform_phylopart";t.traverse_and_compute((function(n){t.is_leafnode(n)&&(n.cot_computed_length<c?(c<f&&(f=c),c=n.cot_computed_length):n.cot_computed_length<f&&(f=n.cot_computed_length))})),c+=f;var s=e.reduce(u.cot_path_to_leaves_below,(function(t,n){return n>t?n:t}),0)+e.reduce(u.cot_path_to_leaves_above,(function(t,n){return n>t?n:t}),0)+u.cot_computed_length-c;e.isUndefined(o)&&(o=Math.min(.001,s/100));var l=1+(s/o>>0);l>500&&(o=s/(l=500));var h=t.get_root_node();h.paths_to_leaves=new Array(a),e.each(h.children,(function(t){e.each(h.cot_path_to_leaves_below,(function(n,e){h.paths_to_leaves[e]=n+t.cot_computed_length}))})),t.traverse_and_compute((function(n){if(!t.is_leafnode(n)){n.histogram=new Array(l);for(var r=0;r<l;r++)n.histogram[r]=0;if(n.parent){var i=0;n.paths_to_leaves=[],e.each(n.cot_path_to_leaves_below,(function(t,e){n.paths_to_leaves[i++]=t}))}}delete n.cot_path_to_leaves_above,delete n.cot_path_to_leaves_below})),t.traverse_and_compute((function(n){if(!t.is_leafnode(n)){for(var e=0;e<n.paths_to_leaves.length;e++)for(var r=e+1;r<n.paths_to_leaves.length;r++){var i=n.paths_to_leaves[e]+n.paths_to_leaves[r];n.histogram[(i-c)/o>>0]++}n.leaf_count=n.paths_to_leaves.length,delete n.paths_to_leaves}}));for(var d=(a-1)*a/2*r,p=0;p<l-1&&d>h.histogram[p];p++)d-=h.histogram[p];var _=c+(p+(h.histogram[p]-d)/h.histogram[p])*o,g=[];return t.traverse_and_compute(e.noop,"pre-order",null,(function(r){if(!t.is_leafnode(r)){var a=e.isString(r.data.bootstrap_values)?+r.data.bootstrap_values:i;if(a>=n){for(var u=r.leaf_count*(r.leaf_count-1)*.25,f=0;f<l-1&&u>r.histogram[f];f++)u-=r.histogram[f];var s=c+(f+(r.histogram[f]-u)/r.histogram[f])*o;if(s<=_)return g.push({root:r,median:s,bootstrap:a}),!0}}return!1})),t.traverse_and_compute((function(n){t.is_leafnode(n)||"histogram"in n&&(delete n.histogram,delete n.leaf_count)})),e.each(g,(function(n){n.members=[],t.traverse_and_compute((function(e){t.is_leafnode(e)&&n.members.push(e)}),"post-order",n.root)})),g},t.phylotree=rt,t.postOrder=_,t.preOrder=g,t.root_to_tip=ut,t.sackin=function(t){let n=t.get_tips(),r=e.map(n,(t=>t.depth));return e.reduce(r,(function(t,n){return t+n}),0)},Object.defineProperty(t,"__esModule",{value:!0})}(n,e(965),e(330),e(403),e(269))},269:(t,n,e)=>{"use strict";e.r(n),e.d(n,{isoFormat:()=>Pt,isoParse:()=>Lt,timeFormat:()=>p,timeFormatDefaultLocale:()=>jt,timeFormatLocale:()=>h,timeParse:()=>_,utcFormat:()=>g,utcParse:()=>v});var r=e(326),i=e(692),o=e(776),a=e(478),u=e(209),c=e(181);function f(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function s(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function l(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}function h(t){var n=t.dateTime,e=t.date,u=t.time,c=t.periods,h=t.days,d=t.shortDays,p=t.months,_=t.shortMonths,g=A(c),v=T(c),b=A(h),m=T(h),x=A(d),w=T(d),M=A(p),rt=T(p),Mt=A(_),jt=T(_),Rt={a:function(t){return d[t.getDay()]},A:function(t){return h[t.getDay()]},b:function(t){return _[t.getMonth()]},B:function(t){return p[t.getMonth()]},c:null,d:W,e:W,f:K,g:ct,G:st,H:V,I:X,j:$,L:G,m:Q,M:J,p:function(t){return c[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Ot,s:Dt,S:tt,u:nt,U:et,V:it,w:ot,W:at,x:null,X:null,y:ut,Y:ft,Z:lt,"%":Ut},Pt={a:function(t){return d[t.getUTCDay()]},A:function(t){return h[t.getUTCDay()]},b:function(t){return _[t.getUTCMonth()]},B:function(t){return p[t.getUTCMonth()]},c:null,d:ht,e:ht,f:vt,g:Et,G:Ct,H:dt,I:pt,j:_t,L:gt,m:yt,M:bt,p:function(t){return c[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Ot,s:Dt,S:mt,u:xt,U:wt,V:At,w:Tt,W:kt,x:null,X:null,y:St,Y:Nt,Z:zt,"%":Ut},Lt={a:function(t,n,e){var r=x.exec(n.slice(e));return r?(t.w=w[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=b.exec(n.slice(e));return r?(t.w=m[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=Mt.exec(n.slice(e));return r?(t.m=jt[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=M.exec(n.slice(e));return r?(t.m=rt[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return It(t,n,e,r)},d:R,e:R,f:q,g:U,G:z,H:L,I:L,j:P,L:I,m:j,M:F,p:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.p=v[r[0].toLowerCase()],e+r[0].length):-1},q:D,Q:H,s:Z,S:B,u:S,U:E,V:N,w:k,W:C,x:function(t,n,r){return It(t,e,n,r)},X:function(t,n,e){return It(t,u,n,e)},y:U,Y:z,Z:O,"%":Y};function Ft(t,n){return function(e){var r,i,o,a=[],u=-1,c=0,f=t.length;for(e instanceof Date||(e=new Date(+e));++u<f;)37===t.charCodeAt(u)&&(a.push(t.slice(c,u)),null!=(i=y[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),c=u+1);return a.push(t.slice(c,u)),a.join("")}}function Bt(t,n){return function(e){var u,c,h=l(1900,void 0,1);if(It(h,t,e+="",0)!=e.length)return null;if("Q"in h)return new Date(h.Q);if("s"in h)return new Date(1e3*h.s+("L"in h?h.L:0));if(n&&!("Z"in h)&&(h.Z=0),"p"in h&&(h.H=h.H%12+12*h.p),void 0===h.m&&(h.m="q"in h?h.q:0),"V"in h){if(h.V<1||h.V>53)return null;"w"in h||(h.w=1),"Z"in h?(c=(u=s(l(h.y,0,1))).getUTCDay(),u=c>4||0===c?r.l6.ceil(u):(0,r.l6)(u),u=i.Z.offset(u,7*(h.V-1)),h.y=u.getUTCFullYear(),h.m=u.getUTCMonth(),h.d=u.getUTCDate()+(h.w+6)%7):(c=(u=f(l(h.y,0,1))).getDay(),u=c>4||0===c?o.wA.ceil(u):(0,o.wA)(u),u=a.Z.offset(u,7*(h.V-1)),h.y=u.getFullYear(),h.m=u.getMonth(),h.d=u.getDate()+(h.w+6)%7)}else("W"in h||"U"in h)&&("w"in h||(h.w="u"in h?h.u%7:"W"in h?1:0),c="Z"in h?s(l(h.y,0,1)).getUTCDay():f(l(h.y,0,1)).getDay(),h.m=0,h.d="W"in h?(h.w+6)%7+7*h.W-(c+5)%7:h.w+7*h.U-(c+6)%7);return"Z"in h?(h.H+=h.Z/100|0,h.M+=h.Z%100,s(h)):f(h)}}function It(t,n,e,r){for(var i,o,a=0,u=n.length,c=e.length;a<u;){if(r>=c)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=Lt[i in y?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return Rt.x=Ft(e,Rt),Rt.X=Ft(u,Rt),Rt.c=Ft(n,Rt),Pt.x=Ft(e,Pt),Pt.X=Ft(u,Pt),Pt.c=Ft(n,Pt),{format:function(t){var n=Ft(t+="",Rt);return n.toString=function(){return t},n},parse:function(t){var n=Bt(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=Ft(t+="",Pt);return n.toString=function(){return t},n},utcParse:function(t){var n=Bt(t+="",!0);return n.toString=function(){return t},n}}}var d,p,_,g,v,y={"-":"",_:" ",0:"0"},b=/^\s*\d+/,m=/^%/,x=/[\\^$*+?|[\]().{}]/g;function w(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function M(t){return t.replace(x,"\\$&")}function A(t){return new RegExp("^(?:"+t.map(M).join("|")+")","i")}function T(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function k(t,n,e){var r=b.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function S(t,n,e){var r=b.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function E(t,n,e){var r=b.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function N(t,n,e){var r=b.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function C(t,n,e){var r=b.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function z(t,n,e){var r=b.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function U(t,n,e){var r=b.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function O(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function D(t,n,e){var r=b.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function j(t,n,e){var r=b.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function R(t,n,e){var r=b.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function P(t,n,e){var r=b.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function L(t,n,e){var r=b.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function F(t,n,e){var r=b.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function B(t,n,e){var r=b.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function I(t,n,e){var r=b.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function q(t,n,e){var r=b.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Y(t,n,e){var r=m.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function H(t,n,e){var r=b.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Z(t,n,e){var r=b.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function W(t,n){return w(t.getDate(),n,2)}function V(t,n){return w(t.getHours(),n,2)}function X(t,n){return w(t.getHours()%12||12,n,2)}function $(t,n){return w(1+a.Z.count((0,u.Z)(t),t),n,3)}function G(t,n){return w(t.getMilliseconds(),n,3)}function K(t,n){return G(t,n)+"000"}function Q(t,n){return w(t.getMonth()+1,n,2)}function J(t,n){return w(t.getMinutes(),n,2)}function tt(t,n){return w(t.getSeconds(),n,2)}function nt(t){var n=t.getDay();return 0===n?7:n}function et(t,n){return w(o.OM.count((0,u.Z)(t)-1,t),n,2)}function rt(t){var n=t.getDay();return n>=4||0===n?(0,o.bL)(t):o.bL.ceil(t)}function it(t,n){return t=rt(t),w(o.bL.count((0,u.Z)(t),t)+(4===(0,u.Z)(t).getDay()),n,2)}function ot(t){return t.getDay()}function at(t,n){return w(o.wA.count((0,u.Z)(t)-1,t),n,2)}function ut(t,n){return w(t.getFullYear()%100,n,2)}function ct(t,n){return w((t=rt(t)).getFullYear()%100,n,2)}function ft(t,n){return w(t.getFullYear()%1e4,n,4)}function st(t,n){var e=t.getDay();return w((t=e>=4||0===e?(0,o.bL)(t):o.bL.ceil(t)).getFullYear()%1e4,n,4)}function lt(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+w(n/60|0,"0",2)+w(n%60,"0",2)}function ht(t,n){return w(t.getUTCDate(),n,2)}function dt(t,n){return w(t.getUTCHours(),n,2)}function pt(t,n){return w(t.getUTCHours()%12||12,n,2)}function _t(t,n){return w(1+i.Z.count((0,c.Z)(t),t),n,3)}function gt(t,n){return w(t.getUTCMilliseconds(),n,3)}function vt(t,n){return gt(t,n)+"000"}function yt(t,n){return w(t.getUTCMonth()+1,n,2)}function bt(t,n){return w(t.getUTCMinutes(),n,2)}function mt(t,n){return w(t.getUTCSeconds(),n,2)}function xt(t){var n=t.getUTCDay();return 0===n?7:n}function wt(t,n){return w(r.Ox.count((0,c.Z)(t)-1,t),n,2)}function Mt(t){var n=t.getUTCDay();return n>=4||0===n?(0,r.hB)(t):r.hB.ceil(t)}function At(t,n){return t=Mt(t),w(r.hB.count((0,c.Z)(t),t)+(4===(0,c.Z)(t).getUTCDay()),n,2)}function Tt(t){return t.getUTCDay()}function kt(t,n){return w(r.l6.count((0,c.Z)(t)-1,t),n,2)}function St(t,n){return w(t.getUTCFullYear()%100,n,2)}function Et(t,n){return w((t=Mt(t)).getUTCFullYear()%100,n,2)}function Nt(t,n){return w(t.getUTCFullYear()%1e4,n,4)}function Ct(t,n){var e=t.getUTCDay();return w((t=e>=4||0===e?(0,r.hB)(t):r.hB.ceil(t)).getUTCFullYear()%1e4,n,4)}function zt(){return"+0000"}function Ut(){return"%"}function Ot(t){return+t}function Dt(t){return Math.floor(+t/1e3)}function jt(t){return d=h(t),p=d.format,_=d.parse,g=d.utcFormat,v=d.utcParse,d}jt({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Rt="%Y-%m-%dT%H:%M:%S.%LZ";const Pt=Date.prototype.toISOString?function(t){return t.toISOString()}:g(Rt),Lt=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:v(Rt)},965:(t,n,e)=>{"use strict";e.r(n),e.d(n,{FormatSpecifier:()=>fc,active:()=>Jr,arc:()=>lm,area:()=>vm,areaRadial:()=>km,ascending:()=>i,autoType:()=>Pa,axisBottom:()=>it,axisLeft:()=>ot,axisRight:()=>rt,axisTop:()=>et,bisect:()=>f,bisectLeft:()=>c,bisectRight:()=>u,bisector:()=>o,blob:()=>vu,brush:()=>Ei,brushSelection:()=>Ti,brushX:()=>ki,brushY:()=>Si,buffer:()=>bu,chord:()=>Pi,clientPoint:()=>ze,cluster:()=>kd,color:()=>Xn,contourDensity:()=>ua,contours:()=>na,create:()=>Lb,creator:()=>on,cross:()=>h,csv:()=>Au,csvFormat:()=>Aa,csvFormatBody:()=>Ta,csvFormatRow:()=>Sa,csvFormatRows:()=>ka,csvFormatValue:()=>Ea,csvParse:()=>wa,csvParseRows:()=>Ma,cubehelix:()=>Zo,curveBasis:()=>ax,curveBasisClosed:()=>cx,curveBasisOpen:()=>sx,curveBundle:()=>hx,curveCardinal:()=>_x,curveCardinalClosed:()=>vx,curveCardinalOpen:()=>bx,curveCatmullRom:()=>wx,curveCatmullRomClosed:()=>Ax,curveCatmullRomOpen:()=>kx,curveLinear:()=>dm,curveLinearClosed:()=>Ex,curveMonotoneX:()=>Rx,curveMonotoneY:()=>Px,curveNatural:()=>Bx,curveStep:()=>qx,curveStepAfter:()=>Hx,curveStepBefore:()=>Yx,customEvent:()=>vn,descending:()=>d,deviation:()=>g,dispatch:()=>ht,drag:()=>pa,dragDisable:()=>En,dragEnable:()=>Nn,dsv:()=>Mu,dsvFormat:()=>ma,easeBack:()=>lu,easeBackIn:()=>fu,easeBackInOut:()=>lu,easeBackOut:()=>su,easeBounce:()=>au,easeBounceIn:()=>ou,easeBounceInOut:()=>uu,easeBounceOut:()=>au,easeCircle:()=>ru,easeCircleIn:()=>nu,easeCircleInOut:()=>ru,easeCircleOut:()=>eu,easeCubic:()=>$r,easeCubicIn:()=>Vr,easeCubicInOut:()=>$r,easeCubicOut:()=>Xr,easeElastic:()=>pu,easeElasticIn:()=>du,easeElasticInOut:()=>_u,easeElasticOut:()=>pu,easeExp:()=>tu,easeExpIn:()=>Qa,easeExpInOut:()=>tu,easeExpOut:()=>Ja,easeLinear:()=>Fa,easePoly:()=>Za,easePolyIn:()=>Ya,easePolyInOut:()=>Za,easePolyOut:()=>Ha,easeQuad:()=>qa,easeQuadIn:()=>Ba,easeQuadInOut:()=>qa,easeQuadOut:()=>Ia,easeSin:()=>Ga,easeSinIn:()=>Xa,easeSinInOut:()=>Ga,easeSinOut:()=>$a,entries:()=>_o,event:()=>ln,extent:()=>v,forceCenter:()=>Ou,forceCollide:()=>Wu,forceLink:()=>$u,forceManyBody:()=>tc,forceRadial:()=>nc,forceSimulation:()=>Ju,forceX:()=>ec,forceY:()=>rc,format:()=>pc,formatDefaultLocale:()=>bc,formatLocale:()=>yc,formatPrefix:()=>_c,formatSpecifier:()=>cc,geoAlbers:()=>Ih,geoAlbersUsa:()=>qh,geoArea:()=>gf,geoAzimuthalEqualArea:()=>Wh,geoAzimuthalEqualAreaRaw:()=>Zh,geoAzimuthalEquidistant:()=>Xh,geoAzimuthalEquidistantRaw:()=>Vh,geoBounds:()=>cs,geoCentroid:()=>ms,geoCircle:()=>zs,geoClipAntimeridian:()=>Ys,geoClipCircle:()=>Hs,geoClipExtent:()=>Xs,geoClipRectangle:()=>Vs,geoConicConformal:()=>td,geoConicConformalRaw:()=>Jh,geoConicEqualArea:()=>Bh,geoConicEqualAreaRaw:()=>Fh,geoConicEquidistant:()=>id,geoConicEquidistantRaw:()=>rd,geoContains:()=>_l,geoDistance:()=>al,geoEqualEarth:()=>ld,geoEqualEarthRaw:()=>sd,geoEquirectangular:()=>ed,geoEquirectangularRaw:()=>nd,geoGnomonic:()=>dd,geoGnomonicRaw:()=>hd,geoGraticule:()=>yl,geoGraticule10:()=>bl,geoIdentity:()=>pd,geoInterpolate:()=>ml,geoLength:()=>rl,geoMercator:()=>Gh,geoMercatorRaw:()=>$h,geoNaturalEarth1:()=>gd,geoNaturalEarth1Raw:()=>_d,geoOrthographic:()=>yd,geoOrthographicRaw:()=>vd,geoPath:()=>wh,geoProjection:()=>Rh,geoProjectionMutator:()=>Ph,geoRotation:()=>Es,geoStereographic:()=>md,geoStereographicRaw:()=>bd,geoStream:()=>ef,geoTransform:()=>Mh,geoTransverseMercator:()=>wd,geoTransverseMercatorRaw:()=>xd,gray:()=>Ao,hcl:()=>Oo,hierarchy:()=>Ed,histogram:()=>z,hsl:()=>oe,html:()=>zu,image:()=>ku,interpolate:()=>Ne,interpolateArray:()=>xe,interpolateBasis:()=>fe,interpolateBasisClosed:()=>se,interpolateBlues:()=>lb,interpolateBrBG:()=>My,interpolateBuGn:()=>Iy,interpolateBuPu:()=>Yy,interpolateCividis:()=>wb,interpolateCool:()=>Tb,interpolateCubehelix:()=>Bp,interpolateCubehelixDefault:()=>Mb,interpolateCubehelixLong:()=>Ip,interpolateDate:()=>Me,interpolateDiscrete:()=>kp,interpolateGnBu:()=>Zy,interpolateGreens:()=>db,interpolateGreys:()=>_b,interpolateHcl:()=>Pp,interpolateHclLong:()=>Lp,interpolateHsl:()=>Op,interpolateHslLong:()=>Dp,interpolateHue:()=>Sp,interpolateInferno:()=>Rb,interpolateLab:()=>jp,interpolateMagma:()=>jb,interpolateNumber:()=>Ae,interpolateNumberArray:()=>be,interpolateObject:()=>Te,interpolateOrRd:()=>Vy,interpolateOranges:()=>xb,interpolatePRGn:()=>Ty,interpolatePiYG:()=>Sy,interpolatePlasma:()=>Pb,interpolatePuBu:()=>Ky,interpolatePuBuGn:()=>$y,interpolatePuOr:()=>Ny,interpolatePuRd:()=>Jy,interpolatePurples:()=>vb,interpolateRainbow:()=>Sb,interpolateRdBu:()=>zy,interpolateRdGy:()=>Oy,interpolateRdPu:()=>nb,interpolateRdYlBu:()=>jy,interpolateRdYlGn:()=>Py,interpolateReds:()=>bb,interpolateRgb:()=>_e,interpolateRgbBasis:()=>ve,interpolateRgbBasisClosed:()=>ye,interpolateRound:()=>Ep,interpolateSinebow:()=>zb,interpolateSpectral:()=>Fy,interpolateString:()=>Ee,interpolateTransformCss:()=>pr,interpolateTransformSvg:()=>_r,interpolateTurbo:()=>Ub,interpolateViridis:()=>Db,interpolateWarm:()=>Ab,interpolateYlGn:()=>ob,interpolateYlGnBu:()=>rb,interpolateYlOrBr:()=>ub,interpolateYlOrRd:()=>fb,interpolateZoom:()=>zp,interrupt:()=>or,interval:()=>SM,isoFormat:()=>kM.isoFormat,isoParse:()=>kM.isoParse,json:()=>Eu,keys:()=>ho,lab:()=>To,lch:()=>Uo,line:()=>gm,lineRadial:()=>Tm,linkHorizontal:()=>jm,linkRadial:()=>Pm,linkVertical:()=>Rm,local:()=>Bb,map:()=>eo,matcher:()=>vt,max:()=>j,mean:()=>R,median:()=>P,merge:()=>L,min:()=>F,mouse:()=>Oe,namespace:()=>Tt,namespaces:()=>At,nest:()=>ro,now:()=>He,pack:()=>Jd,packEnclose:()=>Dd,packSiblings:()=>Vd,pairs:()=>s,partition:()=>op,path:()=>Wi,permute:()=>B,pie:()=>mm,piecewise:()=>qp,pointRadial:()=>Sm,polygonArea:()=>Hp,polygonCentroid:()=>Zp,polygonContains:()=>Gp,polygonHull:()=>$p,polygonLength:()=>Kp,precisionFixed:()=>mc,precisionPrefix:()=>xc,precisionRound:()=>wc,quadtree:()=>Bu,quantile:()=>U,quantize:()=>Yp,radialArea:()=>km,radialLine:()=>Tm,randomBates:()=>r_,randomExponential:()=>i_,randomIrwinHall:()=>e_,randomLogNormal:()=>n_,randomNormal:()=>t_,randomUniform:()=>Jp,range:()=>M,rgb:()=>Qn,ribbon:()=>Qi,scaleBand:()=>h_,scaleDiverging:()=>oy,scaleDivergingLog:()=>ay,scaleDivergingPow:()=>cy,scaleDivergingSqrt:()=>fy,scaleDivergingSymlog:()=>uy,scaleIdentity:()=>E_,scaleImplicit:()=>s_,scaleLinear:()=>S_,scaleLog:()=>P_,scaleOrdinal:()=>l_,scalePoint:()=>p_,scalePow:()=>W_,scaleQuantile:()=>X_,scaleQuantize:()=>$_,scaleSequential:()=>Qv,scaleSequentialLog:()=>Jv,scaleSequentialPow:()=>ny,scaleSequentialQuantile:()=>ry,scaleSequentialSqrt:()=>ey,scaleSequentialSymlog:()=>ty,scaleSqrt:()=>V_,scaleSymlog:()=>I_,scaleThreshold:()=>G_,scaleTime:()=>qv,scaleUtc:()=>$v,scan:()=>I,schemeAccent:()=>hy,schemeBlues:()=>sb,schemeBrBG:()=>wy,schemeBuGn:()=>By,schemeBuPu:()=>qy,schemeCategory10:()=>ly,schemeDark2:()=>dy,schemeGnBu:()=>Hy,schemeGreens:()=>hb,schemeGreys:()=>pb,schemeOrRd:()=>Wy,schemeOranges:()=>mb,schemePRGn:()=>Ay,schemePaired:()=>py,schemePastel1:()=>_y,schemePastel2:()=>gy,schemePiYG:()=>ky,schemePuBu:()=>Gy,schemePuBuGn:()=>Xy,schemePuOr:()=>Ey,schemePuRd:()=>Qy,schemePurples:()=>gb,schemeRdBu:()=>Cy,schemeRdGy:()=>Uy,schemeRdPu:()=>tb,schemeRdYlBu:()=>Dy,schemeRdYlGn:()=>Ry,schemeReds:()=>yb,schemeSet1:()=>vy,schemeSet2:()=>yy,schemeSet3:()=>by,schemeSpectral:()=>Ly,schemeTableau10:()=>my,schemeYlGn:()=>ib,schemeYlGnBu:()=>eb,schemeYlOrBr:()=>ab,schemeYlOrRd:()=>cb,select:()=>Tn,selectAll:()=>qb,selection:()=>An,selector:()=>pt,selectorAll:()=>gt,set:()=>lo,shuffle:()=>q,stack:()=>Xx,stackOffsetDiverging:()=>Gx,stackOffsetExpand:()=>$x,stackOffsetNone:()=>Zx,stackOffsetSilhouette:()=>Kx,stackOffsetWiggle:()=>Qx,stackOrderAppearance:()=>Jx,stackOrderAscending:()=>nw,stackOrderDescending:()=>rw,stackOrderInsideOut:()=>iw,stackOrderNone:()=>Wx,stackOrderReverse:()=>ow,stratify:()=>sp,style:()=>Rt,sum:()=>Y,svg:()=>Uu,symbol:()=>ex,symbolCircle:()=>Lm,symbolCross:()=>Fm,symbolDiamond:()=>qm,symbolSquare:()=>Vm,symbolStar:()=>Wm,symbolTriangle:()=>$m,symbolWye:()=>tx,symbols:()=>nx,text:()=>xu,thresholdFreedmanDiaconis:()=>O,thresholdScott:()=>D,thresholdSturges:()=>C,tickFormat:()=>T_,tickIncrement:()=>E,tickStep:()=>N,ticks:()=>S,timeDay:()=>Sw,timeDays:()=>Ew,timeFormat:()=>kM.timeFormat,timeFormatDefaultLocale:()=>kM.timeFormatDefaultLocale,timeFormatLocale:()=>kM.timeFormatLocale,timeFriday:()=>jw,timeFridays:()=>qw,timeHour:()=>Aw,timeHours:()=>Tw,timeInterval:()=>cw,timeMillisecond:()=>sw,timeMilliseconds:()=>lw,timeMinute:()=>xw,timeMinutes:()=>ww,timeMonday:()=>zw,timeMondays:()=>Lw,timeMonth:()=>Zw,timeMonths:()=>Ww,timeParse:()=>kM.timeParse,timeSaturday:()=>Rw,timeSaturdays:()=>Yw,timeSecond:()=>yw,timeSeconds:()=>bw,timeSunday:()=>Cw,timeSundays:()=>Pw,timeThursday:()=>Dw,timeThursdays:()=>Iw,timeTuesday:()=>Uw,timeTuesdays:()=>Fw,timeWednesday:()=>Ow,timeWednesdays:()=>Bw,timeWeek:()=>Cw,timeWeeks:()=>Pw,timeYear:()=>Xw,timeYears:()=>$w,timeout:()=>Qe,timer:()=>Ve,timerFlush:()=>Xe,touch:()=>Ue,touches:()=>Yb,transition:()=>Hr,transpose:()=>H,tree:()=>vp,treemap:()=>wp,treemapBinary:()=>Mp,treemapDice:()=>ip,treemapResquarify:()=>Tp,treemapSlice:()=>yp,treemapSliceDice:()=>Ap,treemapSquarify:()=>xp,tsv:()=>Tu,tsvFormat:()=>Ua,tsvFormatBody:()=>Oa,tsvFormatRow:()=>ja,tsvFormatRows:()=>Da,tsvFormatValue:()=>Ra,tsvParse:()=>Ca,tsvParseRows:()=>za,utcDay:()=>rM,utcDays:()=>iM,utcFormat:()=>kM.utcFormat,utcFriday:()=>lM,utcFridays:()=>yM,utcHour:()=>tM,utcHours:()=>nM,utcMillisecond:()=>sw,utcMilliseconds:()=>lw,utcMinute:()=>Kw,utcMinutes:()=>Qw,utcMonday:()=>uM,utcMondays:()=>pM,utcMonth:()=>xM,utcMonths:()=>wM,utcParse:()=>kM.utcParse,utcSaturday:()=>hM,utcSaturdays:()=>bM,utcSecond:()=>yw,utcSeconds:()=>bw,utcSunday:()=>aM,utcSundays:()=>dM,utcThursday:()=>sM,utcThursdays:()=>vM,utcTuesday:()=>cM,utcTuesdays:()=>_M,utcWednesday:()=>fM,utcWednesdays:()=>gM,utcWeek:()=>aM,utcWeeks:()=>dM,utcYear:()=>AM,utcYears:()=>TM,values:()=>po,variance:()=>_,version:()=>r,voronoi:()=>dA,window:()=>Ut,xml:()=>Cu,zip:()=>W,zoom:()=>SA,zoomIdentity:()=>vA,zoomTransform:()=>yA});var r="5.16.0";function i(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function o(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}}var a=o(i),u=a.right,c=a.left;const f=u;function s(t,n){null==n&&(n=l);for(var e=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);e<r;)o[e]=n(i,i=t[++e]);return o}function l(t,n){return[t,n]}function h(t,n,e){var r,i,o,a,u=t.length,c=n.length,f=new Array(u*c);for(null==e&&(e=l),r=o=0;r<u;++r)for(a=t[r],i=0;i<c;++i,++o)f[o]=e(a,n[i]);return f}function d(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function p(t){return null===t?NaN:+t}function _(t,n){var e,r,i=t.length,o=0,a=-1,u=0,c=0;if(null==n)for(;++a<i;)isNaN(e=p(t[a]))||(c+=(r=e-u)*(e-(u+=r/++o)));else for(;++a<i;)isNaN(e=p(n(t[a],a,t)))||(c+=(r=e-u)*(e-(u+=r/++o)));if(o>1)return c/(o-1)}function g(t,n){var e=_(t,n);return e?Math.sqrt(e):e}function v(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}var y=Array.prototype,b=y.slice,m=y.map;function x(t){return function(){return t}}function w(t){return t}function M(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}var A=Math.sqrt(50),T=Math.sqrt(10),k=Math.sqrt(2);function S(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=E(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++u<i;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++u<i;)o[u]=(t-u)/a;return r&&o.reverse(),o}function E(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=A?10:o>=T?5:o>=k?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=A?10:o>=T?5:o>=k?2:1)}function N(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=A?i*=10:o>=T?i*=5:o>=k&&(i*=2),n<t?-i:i}function C(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1}function z(){var t=w,n=v,e=C;function r(r){var i,o,a=r.length,u=new Array(a);for(i=0;i<a;++i)u[i]=t(r[i],i,r);var c=n(u),s=c[0],l=c[1],h=e(u,s,l);Array.isArray(h)||(h=N(s,l,h),h=M(Math.ceil(s/h)*h,l,h));for(var d=h.length;h[0]<=s;)h.shift(),--d;for(;h[d-1]>l;)h.pop(),--d;var p,_=new Array(d+1);for(i=0;i<=d;++i)(p=_[i]=[]).x0=i>0?h[i-1]:s,p.x1=i<d?h[i]:l;for(i=0;i<a;++i)s<=(o=u[i])&&o<=l&&_[f(h,o,0,d)].push(r[i]);return _}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:x(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:x([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?x(b.call(t)):x(t),r):e},r}function U(t,n,e){if(null==e&&(e=p),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}}function O(t,n,e){return t=m.call(t,p).sort(i),Math.ceil((e-n)/(2*(U(t,.75)-U(t,.25))*Math.pow(t.length,-1/3)))}function D(t,n,e){return Math.ceil((e-n)/(3.5*g(t)*Math.pow(t.length,-1/3)))}function j(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}function R(t,n){var e,r=t.length,i=r,o=-1,a=0;if(null==n)for(;++o<r;)isNaN(e=p(t[o]))?--i:a+=e;else for(;++o<r;)isNaN(e=p(n(t[o],o,t)))?--i:a+=e;if(i)return a/i}function P(t,n){var e,r=t.length,o=-1,a=[];if(null==n)for(;++o<r;)isNaN(e=p(t[o]))||a.push(e);else for(;++o<r;)isNaN(e=p(n(t[o],o,t)))||a.push(e);return U(a.sort(i),.5)}function L(t){for(var n,e,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(e=new Array(a);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--a]=r[n];return e}function F(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}function B(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r}function I(t,n){if(e=t.length){var e,r,o=0,a=0,u=t[a];for(null==n&&(n=i);++o<e;)(n(r=t[o],u)<0||0!==n(u,u))&&(u=r,a=o);return 0===n(u,u)?a:void 0}}function q(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t}function Y(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o}function H(t){if(!(i=t.length))return[];for(var n=-1,e=F(t,Z),r=new Array(e);++n<e;)for(var i,o=-1,a=r[n]=new Array(i);++o<i;)a[o]=t[o][n];return r}function Z(t){return t.length}function W(){return H(arguments)}var V=Array.prototype.slice;function X(t){return t}var $=1e-6;function G(t){return"translate("+(t+.5)+",0)"}function K(t){return"translate(0,"+(t+.5)+")"}function Q(t){return function(n){return+t(n)}}function J(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function tt(){return!this.__axis}function nt(t,n){var e=[],r=null,i=null,o=6,a=6,u=3,c=1===t||4===t?-1:1,f=4===t||2===t?"x":"y",s=1===t||3===t?G:K;function l(l){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,d=null==i?n.tickFormat?n.tickFormat.apply(n,e):X:i,p=Math.max(o,0)+u,_=n.range(),g=+_[0]+.5,v=+_[_.length-1]+.5,y=(n.bandwidth?J:Q)(n.copy()),b=l.selection?l.selection():l,m=b.selectAll(".domain").data([null]),x=b.selectAll(".tick").data(h,n).order(),w=x.exit(),M=x.enter().append("g").attr("class","tick"),A=x.select("line"),T=x.select("text");m=m.merge(m.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(M),A=A.merge(M.append("line").attr("stroke","currentColor").attr(f+"2",c*o)),T=T.merge(M.append("text").attr("fill","currentColor").attr(f,c*p).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),l!==b&&(m=m.transition(l),x=x.transition(l),A=A.transition(l),T=T.transition(l),w=w.transition(l).attr("opacity",$).attr("transform",(function(t){return isFinite(t=y(t))?s(t):this.getAttribute("transform")})),M.attr("opacity",$).attr("transform",(function(t){var n=this.parentNode.__axis;return s(n&&isFinite(n=n(t))?n:y(t))}))),w.remove(),m.attr("d",4===t||2==t?a?"M"+c*a+","+g+"H0.5V"+v+"H"+c*a:"M0.5,"+g+"V"+v:a?"M"+g+","+c*a+"V0.5H"+v+"V"+c*a:"M"+g+",0.5H"+v),x.attr("opacity",1).attr("transform",(function(t){return s(y(t))})),A.attr(f+"2",c*o),T.attr(f,c*p).text(d),b.filter(tt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),b.each((function(){this.__axis=y}))}return l.scale=function(t){return arguments.length?(n=t,l):n},l.ticks=function(){return e=V.call(arguments),l},l.tickArguments=function(t){return arguments.length?(e=null==t?[]:V.call(t),l):e.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:V.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(i=t,l):i},l.tickSize=function(t){return arguments.length?(o=a=+t,l):o},l.tickSizeInner=function(t){return arguments.length?(o=+t,l):o},l.tickSizeOuter=function(t){return arguments.length?(a=+t,l):a},l.tickPadding=function(t){return arguments.length?(u=+t,l):u},l}function et(t){return nt(1,t)}function rt(t){return nt(2,t)}function it(t){return nt(3,t)}function ot(t){return nt(4,t)}var at={value:function(){}};function ut(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new ct(r)}function ct(t){this._=t}function ft(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function st(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function lt(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=at,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}ct.prototype=ut.prototype={constructor:ct,on:function(t,n){var e,r=this._,i=ft(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=lt(r[e],t.name,n);else if(null==n)for(e in r)r[e]=lt(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=st(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new ct(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const ht=ut;function dt(){}function pt(t){return null==t?dt:function(){return this.querySelector(t)}}function _t(){return[]}function gt(t){return null==t?_t:function(){return this.querySelectorAll(t)}}function vt(t){return function(){return this.matches(t)}}function yt(t){return new Array(t.length)}function bt(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function mt(t,n,e,r,i,o){for(var a,u=0,c=n.length,f=o.length;u<f;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new bt(t,o[u]);for(;u<c;++u)(a=n[u])&&(i[u]=a)}function xt(t,n,e,r,i,o,a){var u,c,f,s={},l=n.length,h=o.length,d=new Array(l);for(u=0;u<l;++u)(c=n[u])&&(d[u]=f="$"+a.call(c,c.__data__,u,n),f in s?i[u]=c:s[f]=c);for(u=0;u<h;++u)(c=s[f="$"+a.call(t,o[u],u,o)])?(r[u]=c,c.__data__=o[u],s[f]=null):e[u]=new bt(t,o[u]);for(u=0;u<l;++u)(c=n[u])&&s[d[u]]===c&&(i[u]=c)}function wt(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}bt.prototype={constructor:bt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Mt="http://www.w3.org/1999/xhtml";const At={svg:"http://www.w3.org/2000/svg",xhtml:Mt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function Tt(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),At.hasOwnProperty(n)?{space:At[n],local:t}:t}function kt(t){return function(){this.removeAttribute(t)}}function St(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Et(t,n){return function(){this.setAttribute(t,n)}}function Nt(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Ct(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function zt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function Ut(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Ot(t){return function(){this.style.removeProperty(t)}}function Dt(t,n,e){return function(){this.style.setProperty(t,n,e)}}function jt(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function Rt(t,n){return t.style.getPropertyValue(n)||Ut(t).getComputedStyle(t,null).getPropertyValue(n)}function Pt(t){return function(){delete this[t]}}function Lt(t,n){return function(){this[t]=n}}function Ft(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function Bt(t){return t.trim().split(/^|\s+/)}function It(t){return t.classList||new qt(t)}function qt(t){this._node=t,this._names=Bt(t.getAttribute("class")||"")}function Yt(t,n){for(var e=It(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function Ht(t,n){for(var e=It(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Zt(t){return function(){Yt(this,t)}}function Wt(t){return function(){Ht(this,t)}}function Vt(t,n){return function(){(n.apply(this,arguments)?Yt:Ht)(this,t)}}function Xt(){this.textContent=""}function $t(t){return function(){this.textContent=t}}function Gt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Kt(){this.innerHTML=""}function Qt(t){return function(){this.innerHTML=t}}function Jt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function tn(){this.nextSibling&&this.parentNode.appendChild(this)}function nn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function en(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===Mt&&n.documentElement.namespaceURI===Mt?n.createElement(t):n.createElementNS(e,t)}}function rn(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function on(t){var n=Tt(t);return(n.local?rn:en)(n)}function an(){return null}function un(){var t=this.parentNode;t&&t.removeChild(this)}function cn(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function fn(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}qt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var sn={},ln=null;function hn(t,n,e){return t=dn(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function dn(t,n,e){return function(r){var i=ln;ln=r;try{t.call(this,this.__data__,n,e)}finally{ln=i}}}function pn(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function _n(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function gn(t,n,e){var r=sn.hasOwnProperty(t.type)?hn:dn;return function(i,o,a){var u,c=this.__on,f=r(n,o,a);if(c)for(var s=0,l=c.length;s<l;++s)if((u=c[s]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=f,u.capture=e),void(u.value=n);this.addEventListener(t.type,f,e),u={type:t.type,name:t.name,value:n,listener:f,capture:e},c?c.push(u):this.__on=[u]}}function vn(t,n,e,r){var i=ln;t.sourceEvent=ln,ln=t;try{return n.apply(e,r)}finally{ln=i}}function yn(t,n,e){var r=Ut(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function bn(t,n){return function(){return yn(this,t,n)}}function mn(t,n){return function(){return yn(this,t,n.apply(this,arguments))}}"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(sn={mouseenter:"mouseover",mouseleave:"mouseout"}));var xn=[null];function wn(t,n){this._groups=t,this._parents=n}function Mn(){return new wn([[document.documentElement]],xn)}wn.prototype=Mn.prototype={constructor:wn,select:function(t){"function"!=typeof t&&(t=pt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],c=u.length,f=r[i]=new Array(c),s=0;s<c;++s)(o=u[s])&&(a=t.call(o,o.__data__,s,u))&&("__data__"in o&&(a.__data__=o.__data__),f[s]=a);return new wn(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=gt(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],c=u.length,f=0;f<c;++f)(a=u[f])&&(r.push(t.call(a,a.__data__,f,u)),i.push(a));return new wn(r,i)},filter:function(t){"function"!=typeof t&&(t=vt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],f=0;f<u;++f)(o=a[f])&&t.call(o,o.__data__,f,a)&&c.push(o);return new wn(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),s=-1,this.each((function(t){p[++s]=t})),p;var e,r=n?xt:mt,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),c=new Array(a),f=new Array(a),s=0;s<a;++s){var l=i[s],h=o[s],d=h.length,p=t.call(l,l&&l.__data__,s,i),_=p.length,g=c[s]=new Array(_),v=u[s]=new Array(_);r(l,h,g,v,f[s]=new Array(d),p,n);for(var y,b,m=0,x=0;m<_;++m)if(y=g[m]){for(m>=x&&(x=m+1);!(b=v[x])&&++x<_;);y._next=b||null}}return(u=new wn(u,i))._enter=c,u._exit=f,u},enter:function(){return new wn(this._enter||this._groups.map(yt),this._parents)},exit:function(){return new wn(this._exit||this._groups.map(yt),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,f=n[u],s=e[u],l=f.length,h=a[u]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;u<r;++u)a[u]=n[u];return new wn(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=wt);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],c=u.length,f=i[o]=new Array(c),s=0;s<c;++s)(a=u[s])&&(f[s]=a);f.sort(n)}return new wn(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=Tt(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?St:kt:"function"==typeof n?e.local?zt:Ct:e.local?Nt:Et)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?Ot:"function"==typeof n?jt:Dt)(t,n,null==e?"":e)):Rt(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?Pt:"function"==typeof n?Ft:Lt)(t,n)):this.node()[t]},classed:function(t,n){var e=Bt(t+"");if(arguments.length<2){for(var r=It(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?Vt:n?Zt:Wt)(e,n))},text:function(t){return arguments.length?this.each(null==t?Xt:("function"==typeof t?Gt:$t)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Kt:("function"==typeof t?Jt:Qt)(t)):this.node().innerHTML},raise:function(){return this.each(tn)},lower:function(){return this.each(nn)},append:function(t){var n="function"==typeof t?t:on(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:on(t),r=null==n?an:"function"==typeof n?n:pt(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(un)},clone:function(t){return this.select(t?fn:cn)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=pn(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?gn:_n,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var c,f=0,s=u.length;f<s;++f)for(r=0,c=u[f];r<a;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?mn:bn)(t,n))}};const An=Mn;function Tn(t){return"string"==typeof t?new wn([[document.querySelector(t)]],[document.documentElement]):new wn([[t]],xn)}function kn(){ln.stopImmediatePropagation()}function Sn(){ln.preventDefault(),ln.stopImmediatePropagation()}function En(t){var n=t.document.documentElement,e=Tn(t).on("dragstart.drag",Sn,!0);"onselectstart"in n?e.on("selectstart.drag",Sn,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}function Nn(t,n){var e=t.document.documentElement,r=Tn(t).on("dragstart.drag",null);n&&(r.on("click.drag",Sn,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function Cn(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function zn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Un(){}var On=.7,Dn=1/On,jn="\\s*([+-]?\\d+)\\s*",Rn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Pn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Ln=/^#([0-9a-f]{3,8})$/,Fn=new RegExp("^rgb\\("+[jn,jn,jn]+"\\)$"),Bn=new RegExp("^rgb\\("+[Pn,Pn,Pn]+"\\)$"),In=new RegExp("^rgba\\("+[jn,jn,jn,Rn]+"\\)$"),qn=new RegExp("^rgba\\("+[Pn,Pn,Pn,Rn]+"\\)$"),Yn=new RegExp("^hsl\\("+[Rn,Pn,Pn]+"\\)$"),Hn=new RegExp("^hsla\\("+[Rn,Pn,Pn,Rn]+"\\)$"),Zn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Wn(){return this.rgb().formatHex()}function Vn(){return this.rgb().formatRgb()}function Xn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Ln.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?$n(n):3===e?new Jn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?Gn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?Gn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Fn.exec(t))?new Jn(n[1],n[2],n[3],1):(n=Bn.exec(t))?new Jn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=In.exec(t))?Gn(n[1],n[2],n[3],n[4]):(n=qn.exec(t))?Gn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Yn.exec(t))?re(n[1],n[2]/100,n[3]/100,1):(n=Hn.exec(t))?re(n[1],n[2]/100,n[3]/100,n[4]):Zn.hasOwnProperty(t)?$n(Zn[t]):"transparent"===t?new Jn(NaN,NaN,NaN,0):null}function $n(t){return new Jn(t>>16&255,t>>8&255,255&t,1)}function Gn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Jn(t,n,e,r)}function Kn(t){return t instanceof Un||(t=Xn(t)),t?new Jn((t=t.rgb()).r,t.g,t.b,t.opacity):new Jn}function Qn(t,n,e,r){return 1===arguments.length?Kn(t):new Jn(t,n,e,null==r?1:r)}function Jn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function te(){return"#"+ee(this.r)+ee(this.g)+ee(this.b)}function ne(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function ee(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function re(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new ae(t,n,e,r)}function ie(t){if(t instanceof ae)return new ae(t.h,t.s,t.l,t.opacity);if(t instanceof Un||(t=Xn(t)),!t)return new ae;if(t instanceof ae)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,c=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=c<.5?o+i:2-o-i,a*=60):u=c>0&&c<1?0:a,new ae(a,u,c,t.opacity)}function oe(t,n,e,r){return 1===arguments.length?ie(t):new ae(t,n,e,null==r?1:r)}function ae(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ue(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function ce(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}function fe(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return ce((e-r/n)*n,a,i,o,u)}}function se(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return ce((e-r/n)*n,i,o,a,u)}}function le(t){return function(){return t}}function he(t,n){return function(e){return t+e*n}}function de(t,n){var e=n-t;return e?he(t,e>180||e<-180?e-360*Math.round(e/360):e):le(isNaN(t)?n:t)}function pe(t,n){var e=n-t;return e?he(t,e):le(isNaN(t)?n:t)}Cn(Un,Xn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Wn,formatHex:Wn,formatHsl:function(){return ie(this).formatHsl()},formatRgb:Vn,toString:Vn}),Cn(Jn,Qn,zn(Un,{brighter:function(t){return t=null==t?Dn:Math.pow(Dn,t),new Jn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?On:Math.pow(On,t),new Jn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:te,formatHex:te,formatRgb:ne,toString:ne})),Cn(ae,oe,zn(Un,{brighter:function(t){return t=null==t?Dn:Math.pow(Dn,t),new ae(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?On:Math.pow(On,t),new ae(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Jn(ue(t>=240?t-240:t+120,i,r),ue(t,i,r),ue(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const _e=function t(n){var e=function(t){return 1==(t=+t)?pe:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):le(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=Qn(t)).r,(n=Qn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=pe(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function ge(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=Qn(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}var ve=ge(fe),ye=ge(se);function be(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}}function me(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function xe(t,n){return(me(n)?be:we)(t,n)}function we(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=Ne(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}function Me(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}}function Ae(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}function Te(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Ne(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}var ke=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Se=new RegExp(ke.source,"g");function Ee(t,n){var e,r,i,o=ke.lastIndex=Se.lastIndex=0,a=-1,u=[],c=[];for(t+="",n+="";(e=ke.exec(t))&&(r=Se.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,c.push({i:a,x:Ae(e,r)})),o=Se.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)u[(e=c[r]).i]=e.x(t);return u.join("")})}function Ne(t,n){var e,r=typeof n;return null==n||"boolean"===r?le(n):("number"===r?Ae:"string"===r?(e=Xn(n))?(n=e,_e):Ee:n instanceof Xn?_e:n instanceof Date?Me:me(n)?be:Array.isArray(n)?we:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Te:Ae)(t,n)}function Ce(){for(var t,n=ln;t=n.sourceEvent;)n=t;return n}function ze(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}function Ue(t,n,e){arguments.length<3&&(e=n,n=Ce().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return ze(t,r);return null}function Oe(t){var n=Ce();return n.changedTouches&&(n=n.changedTouches[0]),ze(t,n)}var De,je,Re=0,Pe=0,Le=0,Fe=0,Be=0,Ie=0,qe="object"==typeof performance&&performance.now?performance:Date,Ye="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function He(){return Be||(Ye(Ze),Be=qe.now()+Ie)}function Ze(){Be=0}function We(){this._call=this._time=this._next=null}function Ve(t,n,e){var r=new We;return r.restart(t,n,e),r}function Xe(){He(),++Re;for(var t,n=De;n;)(t=Be-n._time)>=0&&n._call.call(null,t),n=n._next;--Re}function $e(){Be=(Fe=qe.now())+Ie,Re=Pe=0;try{Xe()}finally{Re=0,function(){for(var t,n,e=De,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:De=n);je=t,Ke(r)}(),Be=0}}function Ge(){var t=qe.now(),n=t-Fe;n>1e3&&(Ie-=n,Fe=t)}function Ke(t){Re||(Pe&&(Pe=clearTimeout(Pe)),t-Be>24?(t<1/0&&(Pe=setTimeout($e,t-qe.now()-Ie)),Le&&(Le=clearInterval(Le))):(Le||(Fe=qe.now(),Le=setInterval(Ge,1e3)),Re=1,Ye($e)))}function Qe(t,n,e){var r=new We;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r}We.prototype=Ve.prototype={constructor:We,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?He():+e)+(null==n?0:+n),this._next||je===this||(je?je._next=this:De=this,je=this),this._call=t,this._time=e,Ke()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ke())}};var Je=ht("start","end","cancel","interrupt"),tr=[];function nr(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var f,s,l,h;if(1!==e.state)return u();for(f in i)if((h=i[f]).name===e.name){if(3===h.state)return Qe(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[f]):+f<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[f])}if(Qe((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(c))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(l=e.tween.length),f=0,s=-1;f<l;++f)(h=e.tween[f].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=h);r.length=s+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Ve((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Je,tween:tr,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function er(t,n){var e=ir(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function rr(t,n){var e=ir(t,n);if(e.state>3)throw new Error("too late; already running");return e}function ir(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function or(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}var ar,ur,cr,fr,sr=180/Math.PI,lr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function hr(t,n,e,r,i,o){var a,u,c;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,c/=u),t*r<n*e&&(t=-t,n=-n,c=-c,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*sr,skewX:Math.atan(c)*sr,scaleX:a,scaleY:u}}function dr(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],c=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var c=a.push("translate(",null,n,null,e);u.push({i:c-4,x:Ae(t,i)},{i:c-2,x:Ae(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Ae(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Ae(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,c),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Ae(t,e)},{i:u-2,x:Ae(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,c),o=a=null,function(t){for(var n,e=-1,r=c.length;++e<r;)u[(n=c[e]).i]=n.x(t);return u.join("")}}}var pr=dr((function(t){return"none"===t?lr:(ar||(ar=document.createElement("DIV"),ur=document.documentElement,cr=document.defaultView),ar.style.transform=t,t=cr.getComputedStyle(ur.appendChild(ar),null).getPropertyValue("transform"),ur.removeChild(ar),hr(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),_r=dr((function(t){return null==t?lr:(fr||(fr=document.createElementNS("http://www.w3.org/2000/svg","g")),fr.setAttribute("transform",t),(t=fr.transform.baseVal.consolidate())?hr((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):lr)}),", ",")",")");function gr(t,n){var e,r;return function(){var i=rr(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function vr(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=rr(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},c=0,f=i.length;c<f;++c)if(i[c].name===n){i[c]=u;break}c===f&&i.push(u)}o.tween=i}}function yr(t,n,e){var r=t._id;return t.each((function(){var t=rr(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return ir(t,r).value[n]}}function br(t,n){var e;return("number"==typeof n?Ae:n instanceof Xn?_e:(e=Xn(n))?(n=e,_e):Ee)(t,n)}function mr(t){return function(){this.removeAttribute(t)}}function xr(t){return function(){this.removeAttributeNS(t.space,t.local)}}function wr(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function Mr(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function Ar(t,n,e){var r,i,o;return function(){var a,u,c=e(this);if(null!=c)return(a=this.getAttribute(t))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,c));this.removeAttribute(t)}}function Tr(t,n,e){var r,i,o;return function(){var a,u,c=e(this);if(null!=c)return(a=this.getAttributeNS(t.space,t.local))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,c));this.removeAttributeNS(t.space,t.local)}}function kr(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function Sr(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Er(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Sr(t,i)),e}return i._value=n,i}function Nr(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&kr(t,i)),e}return i._value=n,i}function Cr(t,n){return function(){er(this,t).delay=+n.apply(this,arguments)}}function zr(t,n){return n=+n,function(){er(this,t).delay=n}}function Ur(t,n){return function(){rr(this,t).duration=+n.apply(this,arguments)}}function Or(t,n){return n=+n,function(){rr(this,t).duration=n}}function Dr(t,n){if("function"!=typeof n)throw new Error;return function(){rr(this,t).ease=n}}function jr(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?er:rr;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}var Rr=An.prototype.constructor;function Pr(t){return function(){this.style.removeProperty(t)}}function Lr(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Fr(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&Lr(t,o,e)),r}return o._value=n,o}function Br(t){return function(n){this.textContent=t.call(this,n)}}function Ir(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Br(r)),n}return r._value=t,r}var qr=0;function Yr(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Hr(t){return An().transition(t)}function Zr(){return++qr}var Wr=An.prototype;function Vr(t){return t*t*t}function Xr(t){return--t*t*t+1}function $r(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}Yr.prototype=Hr.prototype={constructor:Yr,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=pt(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,c,f=r[a],s=f.length,l=o[a]=new Array(s),h=0;h<s;++h)(u=f[h])&&(c=t.call(u,u.__data__,h,f))&&("__data__"in u&&(c.__data__=u.__data__),l[h]=c,nr(l[h],n,e,h,l,ir(u,e)));return new Yr(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=gt(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var c,f=r[u],s=f.length,l=0;l<s;++l)if(c=f[l]){for(var h,d=t.call(c,c.__data__,l,f),p=ir(c,e),_=0,g=d.length;_<g;++_)(h=d[_])&&nr(h,n,e,_,d,p);o.push(d),a.push(c)}return new Yr(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=vt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],f=0;f<u;++f)(o=a[f])&&t.call(o,o.__data__,f,a)&&c.push(o);return new Yr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,f=n[u],s=e[u],l=f.length,h=a[u]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;u<r;++u)a[u]=n[u];return new Yr(a,this._parents,this._name,this._id)},selection:function(){return new Rr(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Zr(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,f=0;f<c;++f)if(a=u[f]){var s=ir(a,n);nr(a,t,e,f,u,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new Yr(r,this._parents,t,e)},call:Wr.call,nodes:Wr.nodes,node:Wr.node,size:Wr.size,empty:Wr.empty,each:Wr.each,on:function(t,n){var e=this._id;return arguments.length<2?ir(this.node(),e).on.on(t):this.each(jr(e,t,n))},attr:function(t,n){var e=Tt(t),r="transform"===e?_r:br;return this.attrTween(t,"function"==typeof n?(e.local?Tr:Ar)(e,r,yr(this,"attr."+t,n)):null==n?(e.local?xr:mr)(e):(e.local?Mr:wr)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=Tt(t);return this.tween(e,(r.local?Er:Nr)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?pr:br;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Rt(this,t),a=(this.style.removeProperty(t),Rt(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,Pr(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=Rt(this,t),u=e(this),c=u+"";return null==u&&(this.style.removeProperty(t),c=u=Rt(this,t)),a===c?null:a===r&&c===i?o:(i=c,o=n(r=a,u))}}(t,r,yr(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var c=rr(this,t),f=c.on,s=null==c.value[a]?o||(o=Pr(n)):void 0;f===e&&i===s||(r=(e=f).copy()).on(u,i=s),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=Rt(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Fr(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(yr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Ir(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=ir(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?gr:vr)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Cr:zr)(n,t)):ir(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ur:Or)(n,t)):ir(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(Dr(n,t)):ir(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var u={value:a},c={value:function(){0==--i&&o()}};e.each((function(){var e=rr(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(c)),e.on=n}))}))}};var Gr={time:null,delay:0,duration:250,ease:$r};function Kr(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Gr.time=He(),Gr;return e}An.prototype.interrupt=function(t){return this.each((function(){or(this,t)}))},An.prototype.transition=function(t){var n,e;t instanceof Yr?(n=t._id,t=t._name):(n=Zr(),(e=Gr).time=He(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,f=0;f<c;++f)(a=u[f])&&nr(a,t,n,f,u,e||Kr(a,n));return new Yr(r,this._parents,t,n)};var Qr=[null];function Jr(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>1&&e.name===n)return new Yr([[t]],Qr,n,+r);return null}function ti(t){return function(){return t}}function ni(t,n,e){this.target=t,this.type=n,this.selection=e}function ei(){ln.stopImmediatePropagation()}function ri(){ln.preventDefault(),ln.stopImmediatePropagation()}var ii={name:"drag"},oi={name:"space"},ai={name:"handle"},ui={name:"center"};function ci(t){return[+t[0],+t[1]]}function fi(t){return[ci(t[0]),ci(t[1])]}function si(t){return function(n){return Ue(n,ln.touches,t)}}var li={name:"x",handles:["w","e"].map(bi),input:function(t,n){return null==t?null:[[+t[0],n[0][1]],[+t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},hi={name:"y",handles:["n","s"].map(bi),input:function(t,n){return null==t?null:[[n[0][0],+t[0]],[n[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},di={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(bi),input:function(t){return null==t?null:fi(t)},output:function(t){return t}},pi={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},_i={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},gi={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},vi={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},yi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function bi(t){return{type:t}}function mi(){return!ln.ctrlKey&&!ln.button}function xi(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function wi(){return navigator.maxTouchPoints||"ontouchstart"in this}function Mi(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Ai(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Ti(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function ki(){return Ni(li)}function Si(){return Ni(hi)}function Ei(){return Ni(di)}function Ni(t){var n,e=xi,r=mi,i=wi,o=!0,a=ht("start","brush","end"),u=6;function c(n){var e=n.property("__brush",_).selectAll(".overlay").data([bi("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",pi.overlay).merge(e).each((function(){var t=Mi(this).extent;Tn(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([bi("selection")]).enter().append("rect").attr("class","selection").attr("cursor",pi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return pi[t.type]})),n.each(f).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",h).filter(i).on("touchstart.brush",h).on("touchmove.brush",d).on("touchend.brush touchcancel.brush",p).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function f(){var t=Tn(this),n=Mi(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-u/2:n[0][0]-u/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-u/2:n[0][1]-u/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+u:u})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+u:u}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function s(t,n,e){var r=t.__brush.emitter;return!r||e&&r.clean?new l(t,n,e):r}function l(t,n,e){this.that=t,this.args=n,this.state=t.__brush,this.active=0,this.clean=e}function h(){if((!n||ln.touches)&&r.apply(this,arguments)){var e,i,a,u,c,l,h,d,p,_,g,v=this,y=ln.target.__data__.type,b="selection"===(o&&ln.metaKey?y="overlay":y)?ii:o&&ln.altKey?ui:ai,m=t===hi?null:vi[y],x=t===li?null:yi[y],w=Mi(v),M=w.extent,A=w.selection,T=M[0][0],k=M[0][1],S=M[1][0],E=M[1][1],N=0,C=0,z=m&&x&&o&&ln.shiftKey,U=ln.touches?si(ln.changedTouches[0].identifier):Oe,O=U(v),D=O,j=s(v,arguments,!0).beforestart();"overlay"===y?(A&&(p=!0),w.selection=A=[[e=t===hi?T:O[0],a=t===li?k:O[1]],[c=t===hi?S:e,h=t===li?E:a]]):(e=A[0][0],a=A[0][1],c=A[1][0],h=A[1][1]),i=e,u=a,l=c,d=h;var R=Tn(v).attr("pointer-events","none"),P=R.selectAll(".overlay").attr("cursor",pi[y]);if(ln.touches)j.moved=F,j.ended=I;else{var L=Tn(ln.view).on("mousemove.brush",F,!0).on("mouseup.brush",I,!0);o&&L.on("keydown.brush",q,!0).on("keyup.brush",Y,!0),En(ln.view)}ei(),or(v),f.call(v),j.start()}function F(){var t=U(v);!z||_||g||(Math.abs(t[0]-D[0])>Math.abs(t[1]-D[1])?g=!0:_=!0),D=t,p=!0,ri(),B()}function B(){var t;switch(N=D[0]-O[0],C=D[1]-O[1],b){case oi:case ii:m&&(N=Math.max(T-e,Math.min(S-c,N)),i=e+N,l=c+N),x&&(C=Math.max(k-a,Math.min(E-h,C)),u=a+C,d=h+C);break;case ai:m<0?(N=Math.max(T-e,Math.min(S-e,N)),i=e+N,l=c):m>0&&(N=Math.max(T-c,Math.min(S-c,N)),i=e,l=c+N),x<0?(C=Math.max(k-a,Math.min(E-a,C)),u=a+C,d=h):x>0&&(C=Math.max(k-h,Math.min(E-h,C)),u=a,d=h+C);break;case ui:m&&(i=Math.max(T,Math.min(S,e-N*m)),l=Math.max(T,Math.min(S,c+N*m))),x&&(u=Math.max(k,Math.min(E,a-C*x)),d=Math.max(k,Math.min(E,h+C*x)))}l<i&&(m*=-1,t=e,e=c,c=t,t=i,i=l,l=t,y in _i&&P.attr("cursor",pi[y=_i[y]])),d<u&&(x*=-1,t=a,a=h,h=t,t=u,u=d,d=t,y in gi&&P.attr("cursor",pi[y=gi[y]])),w.selection&&(A=w.selection),_&&(i=A[0][0],l=A[1][0]),g&&(u=A[0][1],d=A[1][1]),A[0][0]===i&&A[0][1]===u&&A[1][0]===l&&A[1][1]===d||(w.selection=[[i,u],[l,d]],f.call(v),j.brush())}function I(){if(ei(),ln.touches){if(ln.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500)}else Nn(ln.view,p),L.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);R.attr("pointer-events","all"),P.attr("cursor",pi.overlay),w.selection&&(A=w.selection),Ai(A)&&(w.selection=null,f.call(v)),j.end()}function q(){switch(ln.keyCode){case 16:z=m&&x;break;case 18:b===ai&&(m&&(c=l-N*m,e=i+N*m),x&&(h=d-C*x,a=u+C*x),b=ui,B());break;case 32:b!==ai&&b!==ui||(m<0?c=l-N:m>0&&(e=i-N),x<0?h=d-C:x>0&&(a=u-C),b=oi,P.attr("cursor",pi.selection),B());break;default:return}ri()}function Y(){switch(ln.keyCode){case 16:z&&(_=g=z=!1,B());break;case 18:b===ui&&(m<0?c=l:m>0&&(e=i),x<0?h=d:x>0&&(a=u),b=ai,B());break;case 32:b===oi&&(ln.altKey?(m&&(c=l-N*m,e=i+N*m),x&&(h=d-C*x,a=u+C*x),b=ui):(m<0?c=l:m>0&&(e=i),x<0?h=d:x>0&&(a=u),b=ai),P.attr("cursor",pi[y]),B());break;default:return}ri()}}function d(){s(this,arguments).moved()}function p(){s(this,arguments).ended()}function _(){var n=this.__brush||{selection:null};return n.extent=fi(e.apply(this,arguments)),n.dim=t,n}return c.move=function(n,e){n.selection?n.on("start.brush",(function(){s(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){s(this,arguments).end()})).tween("brush",(function(){var n=this,r=n.__brush,i=s(n,arguments),o=r.selection,a=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),u=Ne(o,a);function c(t){r.selection=1===t&&null===a?null:u(t),f.call(n),i.brush()}return null!==o&&null!==a?c:c(1)})):n.each((function(){var n=this,r=arguments,i=n.__brush,o=t.input("function"==typeof e?e.apply(n,r):e,i.extent),a=s(n,r).beforestart();or(n),i.selection=null===o?null:o,f.call(n),a.start().brush().end()}))},c.clear=function(t){c.move(t,null)},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){vn(new ni(c,n,t.output(this.state.selection)),a.apply,a,[n,this.that,this.args])}},c.extent=function(t){return arguments.length?(e="function"==typeof t?t:ti(fi(t)),c):e},c.filter=function(t){return arguments.length?(r="function"==typeof t?t:ti(!!t),c):r},c.touchable=function(t){return arguments.length?(i="function"==typeof t?t:ti(!!t),c):i},c.handleSize=function(t){return arguments.length?(u=+t,c):u},c.keyModifiers=function(t){return arguments.length?(o=!!t,c):o},c.on=function(){var t=a.on.apply(a,arguments);return t===a?c:t},c}var Ci=Math.cos,zi=Math.sin,Ui=Math.PI,Oi=Ui/2,Di=2*Ui,ji=Math.max;function Ri(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}function Pi(){var t=0,n=null,e=null,r=null;function i(i){var o,a,u,c,f,s,l=i.length,h=[],d=M(l),p=[],_=[],g=_.groups=new Array(l),v=new Array(l*l);for(o=0,f=-1;++f<l;){for(a=0,s=-1;++s<l;)a+=i[f][s];h.push(a),p.push(M(l)),o+=a}for(n&&d.sort((function(t,e){return n(h[t],h[e])})),e&&p.forEach((function(t,n){t.sort((function(t,r){return e(i[n][t],i[n][r])}))})),c=(o=ji(0,Di-t*l)/o)?t:Di/l,a=0,f=-1;++f<l;){for(u=a,s=-1;++s<l;){var y=d[f],b=p[y][s],m=i[y][b],x=a,w=a+=m*o;v[b*l+y]={index:y,subindex:b,startAngle:x,endAngle:w,value:m}}g[y]={index:y,startAngle:u,endAngle:a,value:h[y]},a+=c}for(f=-1;++f<l;)for(s=f-1;++s<l;){var A=v[s*l+f],T=v[f*l+s];(A.value||T.value)&&_.push(A.value<T.value?{source:T,target:A}:{source:A,target:T})}return r?_.sort(r):_}return i.padAngle=function(n){return arguments.length?(t=ji(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(r=Ri(t))._=t,i):r&&r._},i}var Li=Array.prototype.slice;function Fi(t){return function(){return t}}var Bi=Math.PI,Ii=2*Bi,qi=1e-6,Yi=Ii-qi;function Hi(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Zi(){return new Hi}Hi.prototype=Zi.prototype={constructor:Hi,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,u=e-t,c=r-n,f=o-t,s=a-n,l=f*f+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>qi)if(Math.abs(s*u-c*f)>qi&&i){var h=e-o,d=r-a,p=u*u+c*c,_=h*h+d*d,g=Math.sqrt(p),v=Math.sqrt(l),y=i*Math.tan((Bi-Math.acos((p+l-_)/(2*g*v)))/2),b=y/v,m=y/g;Math.abs(b-1)>qi&&(this._+="L"+(t+b*f)+","+(n+b*s)),this._+="A"+i+","+i+",0,0,"+ +(s*h>f*d)+","+(this._x1=t+m*u)+","+(this._y1=n+m*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n)},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var a=(e=+e)*Math.cos(r),u=e*Math.sin(r),c=t+a,f=n+u,s=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+f:(Math.abs(this._x1-c)>qi||Math.abs(this._y1-f)>qi)&&(this._+="L"+c+","+f),e&&(l<0&&(l=l%Ii+Ii),l>Yi?this._+="A"+e+","+e+",0,1,"+s+","+(t-a)+","+(n-u)+"A"+e+","+e+",0,1,"+s+","+(this._x1=c)+","+(this._y1=f):l>qi&&(this._+="A"+e+","+e+",0,"+ +(l>=Bi)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};const Wi=Zi;function Vi(t){return t.source}function Xi(t){return t.target}function $i(t){return t.radius}function Gi(t){return t.startAngle}function Ki(t){return t.endAngle}function Qi(){var t=Vi,n=Xi,e=$i,r=Gi,i=Ki,o=null;function a(){var a,u=Li.call(arguments),c=t.apply(this,u),f=n.apply(this,u),s=+e.apply(this,(u[0]=c,u)),l=r.apply(this,u)-Oi,h=i.apply(this,u)-Oi,d=s*Ci(l),p=s*zi(l),_=+e.apply(this,(u[0]=f,u)),g=r.apply(this,u)-Oi,v=i.apply(this,u)-Oi;if(o||(o=a=Wi()),o.moveTo(d,p),o.arc(0,0,s,l,h),l===g&&h===v||(o.quadraticCurveTo(0,0,_*Ci(g),_*zi(g)),o.arc(0,0,_,g,v)),o.quadraticCurveTo(0,0,d,p),o.closePath(),a)return o=null,a+""||null}return a.radius=function(t){return arguments.length?(e="function"==typeof t?t:Fi(+t),a):e},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Fi(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Fi(+t),a):i},a.source=function(n){return arguments.length?(t=n,a):t},a.target=function(t){return arguments.length?(n=t,a):n},a.context=function(t){return arguments.length?(o=null==t?null:t,a):o},a}var Ji="$";function to(){}function no(t,n){var e=new to;if(t instanceof to)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}to.prototype=no.prototype={constructor:to,has:function(t){return Ji+t in this},get:function(t){return this[Ji+t]},set:function(t,n){return this[Ji+t]=n,this},remove:function(t){var n=Ji+t;return n in this&&delete this[n]},clear:function(){for(var t in this)t[0]===Ji&&delete this[t]},keys:function(){var t=[];for(var n in this)n[0]===Ji&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)n[0]===Ji&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)n[0]===Ji&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)n[0]===Ji&&++t;return t},empty:function(){for(var t in this)if(t[0]===Ji)return!1;return!0},each:function(t){for(var n in this)n[0]===Ji&&t(this[n],n.slice(1),this)}};const eo=no;function ro(){var t,n,e,r=[],i=[];function o(e,i,a,u){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var c,f,s,l=-1,h=e.length,d=r[i++],p=eo(),_=a();++l<h;)(s=p.get(c=d(f=e[l])+""))?s.push(f):p.set(c,[f]);return p.each((function(t,n){u(_,n,o(t,i,a,u))})),_}function a(t,e){if(++e>r.length)return t;var o,u=i[e-1];return null!=n&&e>=r.length?o=t.entries():(o=[],t.each((function(t,n){o.push({key:n,values:a(t,e)})}))),null!=u?o.sort((function(t,n){return u(t.key,n.key)})):o}return e={object:function(t){return o(t,0,io,oo)},map:function(t){return o(t,0,ao,uo)},entries:function(t){return a(o(t,0,ao,uo),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}}function io(){return{}}function oo(t,n,e){t[n]=e}function ao(){return eo()}function uo(t,n,e){t.set(n,e)}function co(){}var fo=eo.prototype;function so(t,n){var e=new co;if(t instanceof co)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}co.prototype=so.prototype={constructor:co,has:fo.has,add:function(t){return this[Ji+(t+="")]=t,this},remove:fo.remove,clear:fo.clear,values:fo.keys,size:fo.size,empty:fo.empty,each:fo.each};const lo=so;function ho(t){var n=[];for(var e in t)n.push(e);return n}function po(t){var n=[];for(var e in t)n.push(t[e]);return n}function _o(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n}var go=Math.PI/180,vo=180/Math.PI,yo=.96422,bo=.82521,mo=4/29,xo=6/29,wo=3*xo*xo;function Mo(t){if(t instanceof ko)return new ko(t.l,t.a,t.b,t.opacity);if(t instanceof Do)return jo(t);t instanceof Jn||(t=Kn(t));var n,e,r=Co(t.r),i=Co(t.g),o=Co(t.b),a=So((.2225045*r+.7168786*i+.0606169*o)/1);return r===i&&i===o?n=e=a:(n=So((.4360747*r+.3850649*i+.1430804*o)/yo),e=So((.0139322*r+.0971045*i+.7141733*o)/bo)),new ko(116*a-16,500*(n-a),200*(a-e),t.opacity)}function Ao(t,n){return new ko(t,0,0,null==n?1:n)}function To(t,n,e,r){return 1===arguments.length?Mo(t):new ko(t,n,e,null==r?1:r)}function ko(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function So(t){return t>.008856451679035631?Math.pow(t,1/3):t/wo+mo}function Eo(t){return t>xo?t*t*t:wo*(t-mo)}function No(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Co(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function zo(t){if(t instanceof Do)return new Do(t.h,t.c,t.l,t.opacity);if(t instanceof ko||(t=Mo(t)),0===t.a&&0===t.b)return new Do(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*vo;return new Do(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Uo(t,n,e,r){return 1===arguments.length?zo(t):new Do(e,n,t,null==r?1:r)}function Oo(t,n,e,r){return 1===arguments.length?zo(t):new Do(t,n,e,null==r?1:r)}function Do(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function jo(t){if(isNaN(t.h))return new ko(t.l,0,0,t.opacity);var n=t.h*go;return new ko(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}Cn(ko,To,zn(Un,{brighter:function(t){return new ko(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new ko(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Jn(No(3.1338561*(n=yo*Eo(n))-1.6168667*(t=1*Eo(t))-.4906146*(e=bo*Eo(e))),No(-.9787684*n+1.9161415*t+.033454*e),No(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Cn(Do,Oo,zn(Un,{brighter:function(t){return new Do(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Do(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return jo(this).rgb()}}));var Ro=-.14861,Po=1.78277,Lo=-.29227,Fo=-.90649,Bo=1.97294,Io=Bo*Fo,qo=Bo*Po,Yo=Po*Lo-Fo*Ro;function Ho(t){if(t instanceof Wo)return new Wo(t.h,t.s,t.l,t.opacity);t instanceof Jn||(t=Kn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Yo*r+Io*n-qo*e)/(Yo+Io-qo),o=r-i,a=(Bo*(e-i)-Lo*o)/Fo,u=Math.sqrt(a*a+o*o)/(Bo*i*(1-i)),c=u?Math.atan2(a,o)*vo-120:NaN;return new Wo(c<0?c+360:c,u,i,t.opacity)}function Zo(t,n,e,r){return 1===arguments.length?Ho(t):new Wo(t,n,e,null==r?1:r)}function Wo(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}Cn(Wo,Zo,zn(Un,{brighter:function(t){return t=null==t?Dn:Math.pow(Dn,t),new Wo(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?On:Math.pow(On,t),new Wo(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*go,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Jn(255*(n+e*(Ro*r+Po*i)),255*(n+e*(Lo*r+Fo*i)),255*(n+e*(Bo*r)),this.opacity)}}));var Vo=Array.prototype.slice;function Xo(t,n){return t-n}function $o(t){return function(){return t}}function Go(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=Ko(t,n[r]))return e;return 0}function Ko(t,n){for(var e=n[0],r=n[1],i=-1,o=0,a=t.length,u=a-1;o<a;u=o++){var c=t[o],f=c[0],s=c[1],l=t[u],h=l[0],d=l[1];if(Qo(c,l,n))return 0;s>r!=d>r&&e<(h-f)*(r-s)/(d-s)+f&&(i=-i)}return i}function Qo(t,n,e){var r,i,o,a;return function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1])}(t,n,e)&&(i=t[r=+(t[0]===n[0])],o=e[r],a=n[r],i<=o&&o<=a||a<=o&&o<=i)}function Jo(){}var ta=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];function na(){var t=1,n=1,e=C,r=u;function i(t){var n=e(t);if(Array.isArray(n))n=n.slice().sort(Xo);else{var r=v(t),i=r[0],a=r[1];n=N(i,a,n),n=M(Math.floor(i/n)*n,Math.floor(a/n)*n,n)}return n.map((function(n){return o(t,n)}))}function o(e,i){var o=[],u=[];return function(e,r,i){var o,u,c,f,s,l,h=new Array,d=new Array;for(o=u=-1,f=e[0]>=r,ta[f<<1].forEach(p);++o<t-1;)c=f,f=e[o+1]>=r,ta[c|f<<1].forEach(p);for(ta[f<<0].forEach(p);++u<n-1;){for(o=-1,f=e[u*t+t]>=r,s=e[u*t]>=r,ta[f<<1|s<<2].forEach(p);++o<t-1;)c=f,f=e[u*t+t+o+1]>=r,l=s,s=e[u*t+o+1]>=r,ta[c|f<<1|s<<2|l<<3].forEach(p);ta[f|s<<3].forEach(p)}for(o=-1,s=e[u*t]>=r,ta[s<<2].forEach(p);++o<t-1;)l=s,s=e[u*t+o+1]>=r,ta[s<<2|l<<3].forEach(p);function p(t){var n,e,r=[t[0][0]+o,t[0][1]+u],c=[t[1][0]+o,t[1][1]+u],f=a(r),s=a(c);(n=d[f])?(e=h[s])?(delete d[n.end],delete h[e.start],n===e?(n.ring.push(c),i(n.ring)):h[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete d[n.end],n.ring.push(c),d[n.end=s]=n):(n=h[s])?(e=d[f])?(delete h[n.start],delete d[e.end],n===e?(n.ring.push(c),i(n.ring)):h[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[n.start],n.ring.unshift(r),h[n.start=f]=n):h[f]=d[s]={start:f,end:s,ring:[r,c]}}ta[s<<3].forEach(p)}(e,i,(function(t){r(t,e,i),function(t){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r}(t)>0?o.push([t]):u.push(t)})),u.forEach((function(t){for(var n,e=0,r=o.length;e<r;++e)if(-1!==Go((n=o[e])[0],t))return void n.push(t)})),{type:"MultiPolygon",value:i,coordinates:o}}function a(n){return 2*n[0]+n[1]*(t+1)*4}function u(e,r,i){e.forEach((function(e){var o,a=e[0],u=e[1],c=0|a,f=0|u,s=r[f*t+c];a>0&&a<t&&c===a&&(o=r[f*t+c-1],e[0]=a+(i-o)/(s-o)-.5),u>0&&u<n&&f===u&&(o=r[(f-1)*t+c],e[1]=u+(i-o)/(s-o)-.5)}))}return i.contour=o,i.size=function(e){if(!arguments.length)return[t,n];var r=Math.ceil(e[0]),o=Math.ceil(e[1]);if(!(r>0&&o>0))throw new Error("invalid size");return t=r,n=o,i},i.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?$o(Vo.call(t)):$o(t),i):e},i.smooth=function(t){return arguments.length?(r=t?u:Jo,i):r===u},i}function ea(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),a=0;a<i;++a)for(var u=0,c=0;u<r+e;++u)u<r&&(c+=t.data[u+a*r]),u>=e&&(u>=o&&(c-=t.data[u-o+a*r]),n.data[u-e+a*r]=c/Math.min(u+1,r-1+o-u,o))}function ra(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),a=0;a<r;++a)for(var u=0,c=0;u<i+e;++u)u<i&&(c+=t.data[a+u*r]),u>=e&&(u>=o&&(c-=t.data[a+(u-o)*r]),n.data[a+(u-e)*r]=c/Math.min(u+1,i-1+o-u,o))}function ia(t){return t[0]}function oa(t){return t[1]}function aa(){return 1}function ua(){var t=ia,n=oa,e=aa,r=960,i=500,o=20,a=2,u=3*o,c=r+2*u>>a,f=i+2*u>>a,s=$o(20);function l(r){var i=new Float32Array(c*f),l=new Float32Array(c*f);r.forEach((function(r,o,s){var l=+t(r,o,s)+u>>a,h=+n(r,o,s)+u>>a,d=+e(r,o,s);l>=0&&l<c&&h>=0&&h<f&&(i[l+h*c]+=d)})),ea({width:c,height:f,data:i},{width:c,height:f,data:l},o>>a),ra({width:c,height:f,data:l},{width:c,height:f,data:i},o>>a),ea({width:c,height:f,data:i},{width:c,height:f,data:l},o>>a),ra({width:c,height:f,data:l},{width:c,height:f,data:i},o>>a),ea({width:c,height:f,data:i},{width:c,height:f,data:l},o>>a),ra({width:c,height:f,data:l},{width:c,height:f,data:i},o>>a);var d=s(i);if(!Array.isArray(d)){var p=j(i);d=N(0,p,d),(d=M(0,Math.floor(p/d)*d,d)).shift()}return na().thresholds(d).size([c,f])(i).map(h)}function h(t){return t.value*=Math.pow(2,-2*a),t.coordinates.forEach(d),t}function d(t){t.forEach(p)}function p(t){t.forEach(_)}function _(t){t[0]=t[0]*Math.pow(2,a)-u,t[1]=t[1]*Math.pow(2,a)-u}function g(){return c=r+2*(u=3*o)>>a,f=i+2*u>>a,l}return l.x=function(n){return arguments.length?(t="function"==typeof n?n:$o(+n),l):t},l.y=function(t){return arguments.length?(n="function"==typeof t?t:$o(+t),l):n},l.weight=function(t){return arguments.length?(e="function"==typeof t?t:$o(+t),l):e},l.size=function(t){if(!arguments.length)return[r,i];var n=Math.ceil(t[0]),e=Math.ceil(t[1]);if(!(n>=0||n>=0))throw new Error("invalid size");return r=n,i=e,g()},l.cellSize=function(t){if(!arguments.length)return 1<<a;if(!((t=+t)>=1))throw new Error("invalid cell size");return a=Math.floor(Math.log(t)/Math.LN2),g()},l.thresholds=function(t){return arguments.length?(s="function"==typeof t?t:Array.isArray(t)?$o(Vo.call(t)):$o(t),l):s},l.bandwidth=function(t){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return o=Math.round((Math.sqrt(4*t*t+1)-1)/2),g()},l}function ca(t){return function(){return t}}function fa(t,n,e,r,i,o,a,u,c,f){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=a,this.dx=u,this.dy=c,this._=f}function sa(){return!ln.ctrlKey&&!ln.button}function la(){return this.parentNode}function ha(t){return null==t?{x:ln.x,y:ln.y}:t}function da(){return navigator.maxTouchPoints||"ontouchstart"in this}function pa(){var t,n,e,r,i=sa,o=la,a=ha,u=da,c={},f=ht("start","drag","end"),s=0,l=0;function h(t){t.on("mousedown.drag",d).filter(u).on("touchstart.drag",g).on("touchmove.drag",v).on("touchend.drag touchcancel.drag",y).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){if(!r&&i.apply(this,arguments)){var a=b("mouse",o.apply(this,arguments),Oe,this,arguments);a&&(Tn(ln.view).on("mousemove.drag",p,!0).on("mouseup.drag",_,!0),En(ln.view),kn(),e=!1,t=ln.clientX,n=ln.clientY,a("start"))}}function p(){if(Sn(),!e){var r=ln.clientX-t,i=ln.clientY-n;e=r*r+i*i>l}c.mouse("drag")}function _(){Tn(ln.view).on("mousemove.drag mouseup.drag",null),Nn(ln.view,e),Sn(),c.mouse("end")}function g(){if(i.apply(this,arguments)){var t,n,e=ln.changedTouches,r=o.apply(this,arguments),a=e.length;for(t=0;t<a;++t)(n=b(e[t].identifier,r,Ue,this,arguments))&&(kn(),n("start"))}}function v(){var t,n,e=ln.changedTouches,r=e.length;for(t=0;t<r;++t)(n=c[e[t].identifier])&&(Sn(),n("drag"))}function y(){var t,n,e=ln.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(n=c[e[t].identifier])&&(kn(),n("end"))}function b(t,n,e,r,i){var o,u,l,d=e(n,t),p=f.copy();if(vn(new fa(h,"beforestart",o,t,s,d[0],d[1],0,0,p),(function(){return null!=(ln.subject=o=a.apply(r,i))&&(u=o.x-d[0]||0,l=o.y-d[1]||0,!0)})))return function a(f){var _,g=d;switch(f){case"start":c[t]=a,_=s++;break;case"end":delete c[t],--s;case"drag":d=e(n,t),_=s}vn(new fa(h,f,o,t,_,d[0]+u,d[1]+l,d[0]-g[0],d[1]-g[1],p),p.apply,p,[f,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:ca(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:ca(t),h):o},h.subject=function(t){return arguments.length?(a="function"==typeof t?t:ca(t),h):a},h.touchable=function(t){return arguments.length?(u="function"==typeof t?t:ca(!!t),h):u},h.on=function(){var t=f.on.apply(f,arguments);return t===f?h:t},h.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,h):Math.sqrt(l)},h}fa.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var _a={},ga={};function va(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function ya(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function ba(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function ma(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,a=0,u=0,c=o<=0,f=!1;function s(){if(c)return ga;if(f)return f=!1,_a;var n,r,i=a;if(34===t.charCodeAt(i)){for(;a++<o&&34!==t.charCodeAt(a)||34===t.charCodeAt(++a););return(n=a)>=o?c=!0:10===(r=t.charCodeAt(a++))?f=!0:13===r&&(f=!0,10===t.charCodeAt(a)&&++a),t.slice(i+1,n-1).replace(/""/g,'"')}for(;a<o;){if(10===(r=t.charCodeAt(n=a++)))f=!0;else if(13===r)f=!0,10===t.charCodeAt(a)&&++a;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=s())!==ga;){for(var l=[];r!==_a&&r!==ga;)l.push(r),r=s();n&&null==(l=n(l,u++))||i.push(l)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return a(n[t])})).join(t)}))}function o(n){return n.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?function(t){var n=t.getUTCHours(),e=t.getUTCMinutes(),r=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":function(t){return t<0?"-"+ba(-t,6):t>9999?"+"+ba(t,6):ba(t,4)}(t.getUTCFullYear())+"-"+ba(t.getUTCMonth()+1,2)+"-"+ba(t.getUTCDate(),2)+(i?"T"+ba(n,2)+":"+ba(e,2)+":"+ba(r,2)+"."+ba(i,3)+"Z":r?"T"+ba(n,2)+":"+ba(e,2)+":"+ba(r,2)+"Z":e||n?"T"+ba(n,2)+":"+ba(e,2)+"Z":"")}(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=va(t);return function(r,i){return n(e(r),i,t)}}(t,n):va(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=ya(n)),[e.map(a).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=ya(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:a}}var xa=ma(","),wa=xa.parse,Ma=xa.parseRows,Aa=xa.format,Ta=xa.formatBody,ka=xa.formatRows,Sa=xa.formatRow,Ea=xa.formatValue,Na=ma("\t"),Ca=Na.parse,za=Na.parseRows,Ua=Na.format,Oa=Na.formatBody,Da=Na.formatRows,ja=Na.formatRow,Ra=Na.formatValue;function Pa(t){for(var n in t){var e,r,i=t[n].trim();if(i)if("true"===i)i=!0;else if("false"===i)i=!1;else if("NaN"===i)i=NaN;else if(isNaN(e=+i)){if(!(r=i.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)))continue;La&&r[4]&&!r[7]&&(i=i.replace(/-/g,"/").replace(/T/," ")),i=new Date(i)}else i=e;else i=null;t[n]=i}return t}var La=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours();function Fa(t){return+t}function Ba(t){return t*t}function Ia(t){return t*(2-t)}function qa(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}var Ya=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),Ha=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),Za=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Wa=Math.PI,Va=Wa/2;function Xa(t){return 1==+t?1:1-Math.cos(t*Va)}function $a(t){return Math.sin(t*Va)}function Ga(t){return(1-Math.cos(Wa*t))/2}function Ka(t){return 1.0009775171065494*(Math.pow(2,-10*t)-.0009765625)}function Qa(t){return Ka(1-+t)}function Ja(t){return 1-Ka(t)}function tu(t){return((t*=2)<=1?Ka(1-t):2-Ka(t-1))/2}function nu(t){return 1-Math.sqrt(1-t*t)}function eu(t){return Math.sqrt(1- --t*t)}function ru(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var iu=7.5625;function ou(t){return 1-au(1-t)}function au(t){return(t=+t)<.36363636363636365?iu*t*t:t<.7272727272727273?iu*(t-=.5454545454545454)*t+.75:t<.9090909090909091?iu*(t-=.8181818181818182)*t+.9375:iu*(t-=.9545454545454546)*t+.984375}function uu(t){return((t*=2)<=1?1-au(1-t):au(t-1)+1)/2}var cu=1.70158,fu=function t(n){function e(t){return(t=+t)*t*(n*(t-1)+t)}return n=+n,e.overshoot=t,e}(cu),su=function t(n){function e(t){return--t*t*((t+1)*n+t)+1}return n=+n,e.overshoot=t,e}(cu),lu=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(cu),hu=2*Math.PI,du=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=hu);function i(t){return n*Ka(- --t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*hu)},i.period=function(e){return t(n,e)},i}(1,.3),pu=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=hu);function i(t){return 1-n*Ka(t=+t)*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*hu)},i.period=function(e){return t(n,e)},i}(1,.3),_u=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=hu);function i(t){return((t=2*t-1)<0?n*Ka(-t)*Math.sin((r-t)/e):2-n*Ka(t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*hu)},i.period=function(e){return t(n,e)},i}(1,.3);function gu(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}function vu(t,n){return fetch(t,n).then(gu)}function yu(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}function bu(t,n){return fetch(t,n).then(yu)}function mu(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}function xu(t,n){return fetch(t,n).then(mu)}function wu(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),xu(n,e).then((function(n){return t(n,r)}))}}function Mu(t,n,e,r){3===arguments.length&&"function"==typeof e&&(r=e,e=void 0);var i=ma(t);return xu(n,e).then((function(t){return i.parse(t,r)}))}var Au=wu(wa),Tu=wu(Ca);function ku(t,n){return new Promise((function(e,r){var i=new Image;for(var o in n)i[o]=n[o];i.onerror=r,i.onload=function(){e(i)},i.src=t}))}function Su(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}function Eu(t,n){return fetch(t,n).then(Su)}function Nu(t){return function(n,e){return xu(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}const Cu=Nu("application/xml");var zu=Nu("text/html"),Uu=Nu("image/svg+xml");function Ou(t,n){var e;function r(){var r,i,o=e.length,a=0,u=0;for(r=0;r<o;++r)a+=(i=e[r]).x,u+=i.y;for(a=a/o-t,u=u/o-n,r=0;r<o;++r)(i=e[r]).x-=a,i.y-=u}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r}function Du(t){return function(){return t}}function ju(){return 1e-6*(Math.random()-.5)}function Ru(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,a,u,c,f,s,l,h,d=t._root,p={data:r},_=t._x0,g=t._y0,v=t._x1,y=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((f=n>=(o=(_+v)/2))?_=o:v=o,(s=e>=(a=(g+y)/2))?g=a:y=a,i=d,!(d=d[l=s<<1|f]))return i[l]=p,t;if(u=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===u&&e===c)return p.next=d,i?i[l]=p:t._root=p,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(f=n>=(o=(_+v)/2))?_=o:v=o,(s=e>=(a=(g+y)/2))?g=a:y=a}while((l=s<<1|f)==(h=(c>=a)<<1|u>=o));return i[h]=d,i[l]=p,t}function Pu(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i}function Lu(t){return t[0]}function Fu(t){return t[1]}function Bu(t,n,e){var r=new Iu(null==n?Lu:n,null==e?Fu:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Iu(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function qu(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Yu=Bu.prototype=Iu.prototype;function Hu(t){return t.x+t.vx}function Zu(t){return t.y+t.vy}function Wu(t){var n,e,r=1,i=1;function o(){for(var t,o,u,c,f,s,l,h=n.length,d=0;d<i;++d)for(o=Bu(n,Hu,Zu).visitAfter(a),t=0;t<h;++t)u=n[t],s=e[u.index],l=s*s,c=u.x+u.vx,f=u.y+u.vy,o.visit(p);function p(t,n,e,i,o){var a=t.data,h=t.r,d=s+h;if(!a)return n>c+d||i<c-d||e>f+d||o<f-d;if(a.index>u.index){var p=c-a.x-a.vx,_=f-a.y-a.vy,g=p*p+_*_;g<d*d&&(0===p&&(g+=(p=ju())*p),0===_&&(g+=(_=ju())*_),g=(d-(g=Math.sqrt(g)))/g*r,u.vx+=(p*=g)*(d=(h*=h)/(l+h)),u.vy+=(_*=g)*d,a.vx-=p*(d=1-d),a.vy-=_*d)}}}function a(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function u(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=Du(null==t?1:+t)),o.initialize=function(t){n=t,u()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:Du(+n),u(),o):t},o}function Vu(t){return t.index}function Xu(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}function $u(t){var n,e,r,i,o,a=Vu,u=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},c=Du(30),f=1;function s(r){for(var i=0,a=t.length;i<f;++i)for(var u,c,s,l,h,d,p,_=0;_<a;++_)c=(u=t[_]).source,l=(s=u.target).x+s.vx-c.x-c.vx||ju(),h=s.y+s.vy-c.y-c.vy||ju(),l*=d=((d=Math.sqrt(l*l+h*h))-e[_])/d*r*n[_],h*=d,s.vx-=l*(p=o[_]),s.vy-=h*p,c.vx+=l*(p=1-p),c.vy+=h*p}function l(){if(r){var u,c,f=r.length,s=t.length,l=eo(r,a);for(u=0,i=new Array(f);u<s;++u)(c=t[u]).index=u,"object"!=typeof c.source&&(c.source=Xu(l,c.source)),"object"!=typeof c.target&&(c.target=Xu(l,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(u=0,o=new Array(s);u<s;++u)c=t[u],o[u]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(s),h(),e=new Array(s),d()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+u(t[e],e,t)}function d(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+c(t[n],n,t)}return null==t&&(t=[]),s.initialize=function(t){r=t,l()},s.links=function(n){return arguments.length?(t=n,l(),s):t},s.id=function(t){return arguments.length?(a=t,s):a},s.iterations=function(t){return arguments.length?(f=+t,s):f},s.strength=function(t){return arguments.length?(u="function"==typeof t?t:Du(+t),h(),s):u},s.distance=function(t){return arguments.length?(c="function"==typeof t?t:Du(+t),d(),s):c},s}function Gu(t){return t.x}function Ku(t){return t.y}Yu.copy=function(){var t,n,e=new Iu(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=qu(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=qu(n));return e},Yu.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Ru(this.cover(n,e),n,e,t)},Yu.addAll=function(t){var n,e,r,i,o=t.length,a=new Array(o),u=new Array(o),c=1/0,f=1/0,s=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(a[e]=r,u[e]=i,r<c&&(c=r),r>s&&(s=r),i<f&&(f=i),i>l&&(l=i));if(c>s||f>l)return this;for(this.cover(c,f).cover(s,l),e=0;e<o;++e)Ru(this,a[e],u[e],t[e]);return this},Yu.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var a,u,c=i-e,f=this._root;e>t||t>=i||r>n||n>=o;)switch(u=(n<r)<<1|t<e,(a=new Array(4))[u]=f,f=a,c*=2,u){case 0:i=e+c,o=r+c;break;case 1:e=i-c,o=r+c;break;case 2:i=e+c,r=o-c;break;case 3:e=i-c,r=o-c}this._root&&this._root.length&&(this._root=f)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},Yu.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Yu.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Yu.find=function(t,n,e){var r,i,o,a,u,c,f,s=this._x0,l=this._y0,h=this._x1,d=this._y1,p=[],_=this._root;for(_&&p.push(new Pu(_,s,l,h,d)),null==e?e=1/0:(s=t-e,l=n-e,h=t+e,d=n+e,e*=e);c=p.pop();)if(!(!(_=c.node)||(i=c.x0)>h||(o=c.y0)>d||(a=c.x1)<s||(u=c.y1)<l))if(_.length){var g=(i+a)/2,v=(o+u)/2;p.push(new Pu(_[3],g,v,a,u),new Pu(_[2],i,v,g,u),new Pu(_[1],g,o,a,v),new Pu(_[0],i,o,g,v)),(f=(n>=v)<<1|t>=g)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-f],p[p.length-1-f]=c)}else{var y=t-+this._x.call(null,_.data),b=n-+this._y.call(null,_.data),m=y*y+b*b;if(m<e){var x=Math.sqrt(e=m);s=t-x,l=n-x,h=t+x,d=n+x,r=_.data}}return r},Yu.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var n,e,r,i,o,a,u,c,f,s,l,h,d=this._root,p=this._x0,_=this._y0,g=this._x1,v=this._y1;if(!d)return this;if(d.length)for(;;){if((f=o>=(u=(p+g)/2))?p=u:g=u,(s=a>=(c=(_+v)/2))?_=c:v=c,n=d,!(d=d[l=s<<1|f]))return this;if(!d.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)},Yu.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Yu.root=function(){return this._root},Yu.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Yu.visit=function(t){var n,e,r,i,o,a,u=[],c=this._root;for(c&&u.push(new Pu(c,this._x0,this._y0,this._x1,this._y1));n=u.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,a=n.y1)&&c.length){var f=(r+o)/2,s=(i+a)/2;(e=c[3])&&u.push(new Pu(e,f,s,o,a)),(e=c[2])&&u.push(new Pu(e,r,s,f,a)),(e=c[1])&&u.push(new Pu(e,f,i,o,s)),(e=c[0])&&u.push(new Pu(e,r,i,f,s))}return this},Yu.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new Pu(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,a=n.x0,u=n.y0,c=n.x1,f=n.y1,s=(a+c)/2,l=(u+f)/2;(o=i[0])&&e.push(new Pu(o,a,u,s,l)),(o=i[1])&&e.push(new Pu(o,s,u,c,l)),(o=i[2])&&e.push(new Pu(o,a,l,s,f)),(o=i[3])&&e.push(new Pu(o,s,l,c,f))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Yu.x=function(t){return arguments.length?(this._x=t,this):this._x},Yu.y=function(t){return arguments.length?(this._y=t,this):this._y};var Qu=Math.PI*(3-Math.sqrt(5));function Ju(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,a=.6,u=eo(),c=Ve(s),f=ht("tick","end");function s(){l(),f.call("tick",n),e<r&&(c.stop(),f.call("end",n))}function l(r){var c,f,s=t.length;void 0===r&&(r=1);for(var l=0;l<r;++l)for(e+=(o-e)*i,u.each((function(t){t(e)})),c=0;c<s;++c)null==(f=t[c]).fx?f.x+=f.vx*=a:(f.x=f.fx,f.vx=0),null==f.fy?f.y+=f.vy*=a:(f.y=f.fy,f.vy=0);return n}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,null!=n.fx&&(n.x=n.fx),null!=n.fy&&(n.y=n.fy),isNaN(n.x)||isNaN(n.y)){var i=10*Math.sqrt(e),o=e*Qu;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function d(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:l,restart:function(){return c.restart(s),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),u.each(d),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(a=1-t,n):1-a},force:function(t,e){return arguments.length>1?(null==e?u.remove(t):u.set(t,d(e)),n):u.get(t)},find:function(n,e,r){var i,o,a,u,c,f=0,s=t.length;for(null==r?r=1/0:r*=r,f=0;f<s;++f)(a=(i=n-(u=t[f]).x)*i+(o=e-u.y)*o)<r&&(c=u,r=a);return c},on:function(t,e){return arguments.length>1?(f.on(t,e),n):f.on(t)}}}function tc(){var t,n,e,r,i=Du(-30),o=1,a=1/0,u=.81;function c(r){var i,o=t.length,a=Bu(t,Gu,Ku).visitAfter(s);for(e=r,i=0;i<o;++i)n=t[i],a.visit(l)}function f(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function s(t){var n,e,i,o,a,u=0,c=0;if(t.length){for(i=o=a=0;a<4;++a)(n=t[a])&&(e=Math.abs(n.value))&&(u+=n.value,c+=e,i+=e*n.x,o+=e*n.y);t.x=i/c,t.y=o/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{u+=r[n.data.index]}while(n=n.next)}t.value=u}function l(t,i,c,f){if(!t.value)return!0;var s=t.x-n.x,l=t.y-n.y,h=f-i,d=s*s+l*l;if(h*h/u<d)return d<a&&(0===s&&(d+=(s=ju())*s),0===l&&(d+=(l=ju())*l),d<o&&(d=Math.sqrt(o*d)),n.vx+=s*t.value*e/d,n.vy+=l*t.value*e/d),!0;if(!(t.length||d>=a)){(t.data!==n||t.next)&&(0===s&&(d+=(s=ju())*s),0===l&&(d+=(l=ju())*l),d<o&&(d=Math.sqrt(o*d)));do{t.data!==n&&(h=r[t.data.index]*e/d,n.vx+=s*h,n.vy+=l*h)}while(t=t.next)}}return c.initialize=function(n){t=n,f()},c.strength=function(t){return arguments.length?(i="function"==typeof t?t:Du(+t),f(),c):i},c.distanceMin=function(t){return arguments.length?(o=t*t,c):Math.sqrt(o)},c.distanceMax=function(t){return arguments.length?(a=t*t,c):Math.sqrt(a)},c.theta=function(t){return arguments.length?(u=t*t,c):Math.sqrt(u)},c}function nc(t,n,e){var r,i,o,a=Du(.1);function u(t){for(var a=0,u=r.length;a<u;++a){var c=r[a],f=c.x-n||1e-6,s=c.y-e||1e-6,l=Math.sqrt(f*f+s*s),h=(o[a]-l)*i[a]*t/l;c.vx+=f*h,c.vy+=s*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+a(r[n],n,r)}}return"function"!=typeof t&&(t=Du(+t)),null==n&&(n=0),null==e&&(e=0),u.initialize=function(t){r=t,c()},u.strength=function(t){return arguments.length?(a="function"==typeof t?t:Du(+t),c(),u):a},u.radius=function(n){return arguments.length?(t="function"==typeof n?n:Du(+n),c(),u):t},u.x=function(t){return arguments.length?(n=+t,u):n},u.y=function(t){return arguments.length?(e=+t,u):e},u}function ec(t){var n,e,r,i=Du(.1);function o(t){for(var i,o=0,a=n.length;o<a;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function a(){if(n){var o,a=n.length;for(e=new Array(a),r=new Array(a),o=0;o<a;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=Du(null==t?0:+t)),o.initialize=function(t){n=t,a()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:Du(+t),a(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:Du(+n),a(),o):t},o}function rc(t){var n,e,r,i=Du(.1);function o(t){for(var i,o=0,a=n.length;o<a;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function a(){if(n){var o,a=n.length;for(e=new Array(a),r=new Array(a),o=0;o<a;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=Du(null==t?0:+t)),o.initialize=function(t){n=t,a()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:Du(+t),a(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:Du(+n),a(),o):t},o}function ic(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function oc(t){return(t=ic(Math.abs(t)))?t[1]:NaN}var ac,uc=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function cc(t){if(!(n=uc.exec(t)))throw new Error("invalid format: "+t);var n;return new fc({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function fc(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function sc(t,n){var e=ic(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}cc.prototype=fc.prototype,fc.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const lc={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return sc(100*t,n)},r:sc,s:function(t,n){var e=ic(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(ac=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+ic(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function hc(t){return t}var dc,pc,_c,gc=Array.prototype.map,vc=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function yc(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?hc:(n=gc.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=n[0],c=0;i>0&&u>0&&(c+u+1>r&&(u=Math.max(1,r-c)),o.push(t.substring(i-=u,i+u)),!((c+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?hc:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(gc.call(t.numerals,String)),c=void 0===t.percent?"%":t.percent+"",f=void 0===t.minus?"-":t.minus+"",s=void 0===t.nan?"NaN":t.nan+"";function l(t){var n=(t=cc(t)).fill,e=t.align,l=t.sign,h=t.symbol,d=t.zero,p=t.width,_=t.comma,g=t.precision,v=t.trim,y=t.type;"n"===y?(_=!0,y="g"):lc[y]||(void 0===g&&(g=12),v=!0,y="g"),(d||"0"===n&&"="===e)&&(d=!0,n="0",e="=");var b="$"===h?i:"#"===h&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",m="$"===h?o:/[%p]/.test(y)?c:"",x=lc[y],w=/[defgprs%]/.test(y);function M(t){var i,o,c,h=b,M=m;if("c"===y)M=x(t)+M,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?s:x(Math.abs(t),g),v&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),A&&0==+t&&"+"!==l&&(A=!1),h=(A?"("===l?l:f:"-"===l||"("===l?"":l)+h,M=("s"===y?vc[8+ac/3]:"")+M+(A&&"("===l?")":""),w)for(i=-1,o=t.length;++i<o;)if(48>(c=t.charCodeAt(i))||c>57){M=(46===c?a+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}_&&!d&&(t=r(t,1/0));var T=h.length+t.length+M.length,k=T<p?new Array(p-T+1).join(n):"";switch(_&&d&&(t=r(k+t,k.length?p-M.length:1/0),k=""),e){case"<":t=h+t+M+k;break;case"=":t=h+k+t+M;break;case"^":t=k.slice(0,T=k.length>>1)+h+t+M+k.slice(T);break;default:t=k+h+t+M}return u(t)}return g=void 0===g?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),M.toString=function(){return t+""},M}return{format:l,formatPrefix:function(t,n){var e=l(((t=cc(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(oc(n)/3))),i=Math.pow(10,-r),o=vc[8+r/3];return function(t){return e(i*t)+o}}}}function bc(t){return dc=yc(t),pc=dc.format,_c=dc.formatPrefix,dc}function mc(t){return Math.max(0,-oc(Math.abs(t)))}function xc(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(oc(n)/3)))-oc(Math.abs(t)))}function wc(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,oc(n)-oc(t))+1}function Mc(){return new Ac}function Ac(){this.reset()}bc({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Ac.prototype={constructor:Ac,reset:function(){this.s=this.t=0},add:function(t){kc(Tc,t,this.t),kc(this,Tc.s,this.s),this.s?this.t+=Tc.t:this.s=Tc.t},valueOf:function(){return this.s}};var Tc=new Ac;function kc(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var Sc=1e-6,Ec=1e-12,Nc=Math.PI,Cc=Nc/2,zc=Nc/4,Uc=2*Nc,Oc=180/Nc,Dc=Nc/180,jc=Math.abs,Rc=Math.atan,Pc=Math.atan2,Lc=Math.cos,Fc=Math.ceil,Bc=Math.exp,Ic=(Math.floor,Math.log),qc=Math.pow,Yc=Math.sin,Hc=Math.sign||function(t){return t>0?1:t<0?-1:0},Zc=Math.sqrt,Wc=Math.tan;function Vc(t){return t>1?0:t<-1?Nc:Math.acos(t)}function Xc(t){return t>1?Cc:t<-1?-Cc:Math.asin(t)}function $c(t){return(t=Yc(t/2))*t}function Gc(){}function Kc(t,n){t&&Jc.hasOwnProperty(t.type)&&Jc[t.type](t,n)}var Qc={Feature:function(t,n){Kc(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)Kc(e[r].geometry,n)}},Jc={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){tf(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)tf(e[r],n,0)},Polygon:function(t,n){nf(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)nf(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)Kc(e[r],n)}};function tf(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function nf(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)tf(t[e],n,1);n.polygonEnd()}function ef(t,n){t&&Qc.hasOwnProperty(t.type)?Qc[t.type](t,n):Kc(t,n)}var rf,of,af,uf,cf,ff=Mc(),sf=Mc(),lf={point:Gc,lineStart:Gc,lineEnd:Gc,polygonStart:function(){ff.reset(),lf.lineStart=hf,lf.lineEnd=df},polygonEnd:function(){var t=+ff;sf.add(t<0?Uc+t:t),this.lineStart=this.lineEnd=this.point=Gc},sphere:function(){sf.add(Uc)}};function hf(){lf.point=pf}function df(){_f(rf,of)}function pf(t,n){lf.point=_f,rf=t,of=n,af=t*=Dc,uf=Lc(n=(n*=Dc)/2+zc),cf=Yc(n)}function _f(t,n){var e=(t*=Dc)-af,r=e>=0?1:-1,i=r*e,o=Lc(n=(n*=Dc)/2+zc),a=Yc(n),u=cf*a,c=uf*o+u*Lc(i),f=u*r*Yc(i);ff.add(Pc(f,c)),af=t,uf=o,cf=a}function gf(t){return sf.reset(),ef(t,lf),2*sf}function vf(t){return[Pc(t[1],t[0]),Xc(t[2])]}function yf(t){var n=t[0],e=t[1],r=Lc(e);return[r*Lc(n),r*Yc(n),Yc(e)]}function bf(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function mf(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function xf(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function wf(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Mf(t){var n=Zc(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var Af,Tf,kf,Sf,Ef,Nf,Cf,zf,Uf,Of,Df,jf,Rf,Pf,Lf,Ff,Bf,If,qf,Yf,Hf,Zf,Wf,Vf,Xf,$f,Gf=Mc(),Kf={point:Qf,lineStart:ts,lineEnd:ns,polygonStart:function(){Kf.point=es,Kf.lineStart=rs,Kf.lineEnd=is,Gf.reset(),lf.polygonStart()},polygonEnd:function(){lf.polygonEnd(),Kf.point=Qf,Kf.lineStart=ts,Kf.lineEnd=ns,ff<0?(Af=-(kf=180),Tf=-(Sf=90)):Gf>Sc?Sf=90:Gf<-1e-6&&(Tf=-90),Of[0]=Af,Of[1]=kf},sphere:function(){Af=-(kf=180),Tf=-(Sf=90)}};function Qf(t,n){Uf.push(Of=[Af=t,kf=t]),n<Tf&&(Tf=n),n>Sf&&(Sf=n)}function Jf(t,n){var e=yf([t*Dc,n*Dc]);if(zf){var r=mf(zf,e),i=mf([r[1],-r[0],0],r);Mf(i),i=vf(i);var o,a=t-Ef,u=a>0?1:-1,c=i[0]*Oc*u,f=jc(a)>180;f^(u*Ef<c&&c<u*t)?(o=i[1]*Oc)>Sf&&(Sf=o):f^(u*Ef<(c=(c+360)%360-180)&&c<u*t)?(o=-i[1]*Oc)<Tf&&(Tf=o):(n<Tf&&(Tf=n),n>Sf&&(Sf=n)),f?t<Ef?os(Af,t)>os(Af,kf)&&(kf=t):os(t,kf)>os(Af,kf)&&(Af=t):kf>=Af?(t<Af&&(Af=t),t>kf&&(kf=t)):t>Ef?os(Af,t)>os(Af,kf)&&(kf=t):os(t,kf)>os(Af,kf)&&(Af=t)}else Uf.push(Of=[Af=t,kf=t]);n<Tf&&(Tf=n),n>Sf&&(Sf=n),zf=e,Ef=t}function ts(){Kf.point=Jf}function ns(){Of[0]=Af,Of[1]=kf,Kf.point=Qf,zf=null}function es(t,n){if(zf){var e=t-Ef;Gf.add(jc(e)>180?e+(e>0?360:-360):e)}else Nf=t,Cf=n;lf.point(t,n),Jf(t,n)}function rs(){lf.lineStart()}function is(){es(Nf,Cf),lf.lineEnd(),jc(Gf)>Sc&&(Af=-(kf=180)),Of[0]=Af,Of[1]=kf,zf=null}function os(t,n){return(n-=t)<0?n+360:n}function as(t,n){return t[0]-n[0]}function us(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}function cs(t){var n,e,r,i,o,a,u;if(Sf=kf=-(Af=Tf=1/0),Uf=[],ef(t,Kf),e=Uf.length){for(Uf.sort(as),n=1,o=[r=Uf[0]];n<e;++n)us(r,(i=Uf[n])[0])||us(r,i[1])?(os(r[0],i[1])>os(r[0],r[1])&&(r[1]=i[1]),os(i[0],r[1])>os(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(a=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(u=os(r[1],i[0]))>a&&(a=u,Af=i[0],kf=r[1])}return Uf=Of=null,Af===1/0||Tf===1/0?[[NaN,NaN],[NaN,NaN]]:[[Af,Tf],[kf,Sf]]}var fs={sphere:Gc,point:ss,lineStart:hs,lineEnd:_s,polygonStart:function(){fs.lineStart=gs,fs.lineEnd=vs},polygonEnd:function(){fs.lineStart=hs,fs.lineEnd=_s}};function ss(t,n){t*=Dc;var e=Lc(n*=Dc);ls(e*Lc(t),e*Yc(t),Yc(n))}function ls(t,n,e){++Df,Rf+=(t-Rf)/Df,Pf+=(n-Pf)/Df,Lf+=(e-Lf)/Df}function hs(){fs.point=ds}function ds(t,n){t*=Dc;var e=Lc(n*=Dc);Vf=e*Lc(t),Xf=e*Yc(t),$f=Yc(n),fs.point=ps,ls(Vf,Xf,$f)}function ps(t,n){t*=Dc;var e=Lc(n*=Dc),r=e*Lc(t),i=e*Yc(t),o=Yc(n),a=Pc(Zc((a=Xf*o-$f*i)*a+(a=$f*r-Vf*o)*a+(a=Vf*i-Xf*r)*a),Vf*r+Xf*i+$f*o);jf+=a,Ff+=a*(Vf+(Vf=r)),Bf+=a*(Xf+(Xf=i)),If+=a*($f+($f=o)),ls(Vf,Xf,$f)}function _s(){fs.point=ss}function gs(){fs.point=ys}function vs(){bs(Zf,Wf),fs.point=ss}function ys(t,n){Zf=t,Wf=n,t*=Dc,n*=Dc,fs.point=bs;var e=Lc(n);Vf=e*Lc(t),Xf=e*Yc(t),$f=Yc(n),ls(Vf,Xf,$f)}function bs(t,n){t*=Dc;var e=Lc(n*=Dc),r=e*Lc(t),i=e*Yc(t),o=Yc(n),a=Xf*o-$f*i,u=$f*r-Vf*o,c=Vf*i-Xf*r,f=Zc(a*a+u*u+c*c),s=Xc(f),l=f&&-s/f;qf+=l*a,Yf+=l*u,Hf+=l*c,jf+=s,Ff+=s*(Vf+(Vf=r)),Bf+=s*(Xf+(Xf=i)),If+=s*($f+($f=o)),ls(Vf,Xf,$f)}function ms(t){Df=jf=Rf=Pf=Lf=Ff=Bf=If=qf=Yf=Hf=0,ef(t,fs);var n=qf,e=Yf,r=Hf,i=n*n+e*e+r*r;return i<Ec&&(n=Ff,e=Bf,r=If,jf<Sc&&(n=Rf,e=Pf,r=Lf),(i=n*n+e*e+r*r)<Ec)?[NaN,NaN]:[Pc(e,n)*Oc,Xc(r/Zc(i))*Oc]}function xs(t){return function(){return t}}function ws(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}function Ms(t,n){return[jc(t)>Nc?t+Math.round(-t/Uc)*Uc:t,n]}function As(t,n,e){return(t%=Uc)?n||e?ws(ks(t),Ss(n,e)):ks(t):n||e?Ss(n,e):Ms}function Ts(t){return function(n,e){return[(n+=t)>Nc?n-Uc:n<-Nc?n+Uc:n,e]}}function ks(t){var n=Ts(t);return n.invert=Ts(-t),n}function Ss(t,n){var e=Lc(t),r=Yc(t),i=Lc(n),o=Yc(n);function a(t,n){var a=Lc(n),u=Lc(t)*a,c=Yc(t)*a,f=Yc(n),s=f*e+u*r;return[Pc(c*i-s*o,u*e-f*r),Xc(s*i+c*o)]}return a.invert=function(t,n){var a=Lc(n),u=Lc(t)*a,c=Yc(t)*a,f=Yc(n),s=f*i-c*o;return[Pc(c*i+f*o,u*e+s*r),Xc(s*e-u*r)]},a}function Es(t){function n(n){return(n=t(n[0]*Dc,n[1]*Dc))[0]*=Oc,n[1]*=Oc,n}return t=As(t[0]*Dc,t[1]*Dc,t.length>2?t[2]*Dc:0),n.invert=function(n){return(n=t.invert(n[0]*Dc,n[1]*Dc))[0]*=Oc,n[1]*=Oc,n},n}function Ns(t,n,e,r,i,o){if(e){var a=Lc(n),u=Yc(n),c=r*e;null==i?(i=n+r*Uc,o=n-c/2):(i=Cs(a,i),o=Cs(a,o),(r>0?i<o:i>o)&&(i+=r*Uc));for(var f,s=i;r>0?s>o:s<o;s-=c)f=vf([a,-u*Lc(s),-u*Yc(s)]),t.point(f[0],f[1])}}function Cs(t,n){(n=yf(n))[0]-=t,Mf(n);var e=Vc(-n[1]);return((-n[2]<0?-e:e)+Uc-Sc)%Uc}function zs(){var t,n,e=xs([0,0]),r=xs(90),i=xs(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=Oc,e[1]*=Oc}};function a(){var a=e.apply(this,arguments),u=r.apply(this,arguments)*Dc,c=i.apply(this,arguments)*Dc;return t=[],n=As(-a[0]*Dc,-a[1]*Dc,0).invert,Ns(o,u,c,1),a={type:"Polygon",coordinates:[t]},t=n=null,a}return a.center=function(t){return arguments.length?(e="function"==typeof t?t:xs([+t[0],+t[1]]),a):e},a.radius=function(t){return arguments.length?(r="function"==typeof t?t:xs(+t),a):r},a.precision=function(t){return arguments.length?(i="function"==typeof t?t:xs(+t),a):i},a}function Us(){var t,n=[];return{point:function(n,e,r){t.push([n,e,r])},lineStart:function(){n.push(t=[])},lineEnd:Gc,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}function Os(t,n){return jc(t[0]-n[0])<Sc&&jc(t[1]-n[1])<Sc}function Ds(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function js(t,n,e,r,i){var o,a,u=[],c=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],a=t[n];if(Os(r,a)){if(!r[2]&&!a[2]){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);return void i.lineEnd()}a[0]+=2e-6}u.push(e=new Ds(r,t,null,!0)),c.push(e.o=new Ds(r,null,e,!1)),u.push(e=new Ds(a,t,null,!1)),c.push(e.o=new Ds(a,null,e,!0))}})),u.length){for(c.sort(n),Rs(u),Rs(c),o=0,a=c.length;o<a;++o)c[o].e=e=!e;for(var f,s,l=u[0];;){for(var h=l,d=!0;h.v;)if((h=h.n)===l)return;f=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(o=0,a=f.length;o<a;++o)i.point((s=f[o])[0],s[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(f=h.p.z,o=f.length-1;o>=0;--o)i.point((s=f[o])[0],s[1]);else r(h.x,h.p.x,-1,i);h=h.p}f=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}}function Rs(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}Ms.invert=Ms;var Ps=Mc();function Ls(t){return jc(t[0])<=Nc?t[0]:Hc(t[0])*((jc(t[0])+Nc)%Uc-Nc)}function Fs(t,n){var e=Ls(n),r=n[1],i=Yc(r),o=[Yc(e),-Lc(e),0],a=0,u=0;Ps.reset(),1===i?r=Cc+Sc:-1===i&&(r=-Cc-Sc);for(var c=0,f=t.length;c<f;++c)if(l=(s=t[c]).length)for(var s,l,h=s[l-1],d=Ls(h),p=h[1]/2+zc,_=Yc(p),g=Lc(p),v=0;v<l;++v,d=b,_=x,g=w,h=y){var y=s[v],b=Ls(y),m=y[1]/2+zc,x=Yc(m),w=Lc(m),M=b-d,A=M>=0?1:-1,T=A*M,k=T>Nc,S=_*x;if(Ps.add(Pc(S*A*Yc(T),g*w+S*Lc(T))),a+=k?M+A*Uc:M,k^d>=e^b>=e){var E=mf(yf(h),yf(y));Mf(E);var N=mf(o,E);Mf(N);var C=(k^M>=0?-1:1)*Xc(N[2]);(r>C||r===C&&(E[0]||E[1]))&&(u+=k^M>=0?1:-1)}}return(a<-1e-6||a<Sc&&Ps<-1e-6)^1&u}function Bs(t,n,e,r){return function(i){var o,a,u,c=n(i),f=Us(),s=n(f),l=!1,h={point:d,lineStart:_,lineEnd:g,polygonStart:function(){h.point=v,h.lineStart=y,h.lineEnd=b,a=[],o=[]},polygonEnd:function(){h.point=d,h.lineStart=_,h.lineEnd=g,a=L(a);var t=Fs(o,r);a.length?(l||(i.polygonStart(),l=!0),js(a,qs,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),a=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function p(t,n){c.point(t,n)}function _(){h.point=p,c.lineStart()}function g(){h.point=d,c.lineEnd()}function v(t,n){u.push([t,n]),s.point(t,n)}function y(){s.lineStart(),u=[]}function b(){v(u[0][0],u[0][1]),s.lineEnd();var t,n,e,r,c=s.clean(),h=f.result(),d=h.length;if(u.pop(),o.push(u),u=null,d)if(1&c){if((n=(e=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&c&&h.push(h.pop().concat(h.shift())),a.push(h.filter(Is))}return h}}function Is(t){return t.length>1}function qs(t,n){return((t=t.x)[0]<0?t[1]-Cc-Sc:Cc-t[1])-((n=n.x)[0]<0?n[1]-Cc-Sc:Cc-n[1])}const Ys=Bs((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,a){var u=o>0?Nc:-Nc,c=jc(o-e);jc(c-Nc)<Sc?(t.point(e,r=(r+a)/2>0?Cc:-Cc),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(o,r),n=0):i!==u&&c>=Nc&&(jc(e-i)<Sc&&(e-=i*Sc),jc(o-u)<Sc&&(o-=u*Sc),r=function(t,n,e,r){var i,o,a=Yc(t-e);return jc(a)>Sc?Rc((Yc(n)*(o=Lc(r))*Yc(e)-Yc(r)*(i=Lc(n))*Yc(t))/(i*o*a)):(n+r)/2}(e,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),n=0),t.point(e=o,r=a),i=u},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*Cc,r.point(-Nc,i),r.point(0,i),r.point(Nc,i),r.point(Nc,0),r.point(Nc,-i),r.point(0,-i),r.point(-Nc,-i),r.point(-Nc,0),r.point(-Nc,i);else if(jc(t[0]-n[0])>Sc){var o=t[0]<n[0]?Nc:-Nc;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-Nc,-Cc]);function Hs(t){var n=Lc(t),e=6*Dc,r=n>0,i=jc(n)>Sc;function o(t,e){return Lc(t)*Lc(e)>n}function a(t,e,r){var i=[1,0,0],o=mf(yf(t),yf(e)),a=bf(o,o),u=o[0],c=a-u*u;if(!c)return!r&&t;var f=n*a/c,s=-n*u/c,l=mf(i,o),h=wf(i,f);xf(h,wf(o,s));var d=l,p=bf(h,d),_=bf(d,d),g=p*p-_*(bf(h,h)-1);if(!(g<0)){var v=Zc(g),y=wf(d,(-p-v)/_);if(xf(y,h),y=vf(y),!r)return y;var b,m=t[0],x=e[0],w=t[1],M=e[1];x<m&&(b=m,m=x,x=b);var A=x-m,T=jc(A-Nc)<Sc;if(!T&&M<w&&(b=w,w=M,M=b),T||A<Sc?T?w+M>0^y[1]<(jc(y[0]-m)<Sc?w:M):w<=y[1]&&y[1]<=M:A>Nc^(m<=y[0]&&y[0]<=x)){var k=wf(d,(-p+v)/_);return xf(k,h),[y,vf(k)]}}}function u(n,e){var i=r?t:Nc-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return Bs(o,(function(t){var n,e,c,f,s;return{lineStart:function(){f=c=!1,s=1},point:function(l,h){var d,p=[l,h],_=o(l,h),g=r?_?0:u(l,h):_?u(l+(l<0?Nc:-Nc),h):0;if(!n&&(f=c=_)&&t.lineStart(),_!==c&&(!(d=a(n,p))||Os(n,d)||Os(p,d))&&(p[2]=1),_!==c)s=0,_?(t.lineStart(),d=a(p,n),t.point(d[0],d[1])):(d=a(n,p),t.point(d[0],d[1],2),t.lineEnd()),n=d;else if(i&&n&&r^_){var v;g&e||!(v=a(p,n,!0))||(s=0,r?(t.lineStart(),t.point(v[0][0],v[0][1]),t.point(v[1][0],v[1][1]),t.lineEnd()):(t.point(v[1][0],v[1][1]),t.lineEnd(),t.lineStart(),t.point(v[0][0],v[0][1],3)))}!_||n&&Os(n,p)||t.point(p[0],p[1]),n=p,c=_,e=g},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return s|(f&&c)<<1}}}),(function(n,r,i,o){Ns(o,t,e,i,n,r)}),r?[0,-t]:[-Nc,t-Nc])}var Zs=1e9,Ws=-Zs;function Vs(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,u,f){var s=0,l=0;if(null==i||(s=a(i,u))!==(l=a(o,u))||c(i,o)<0^u>0)do{f.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+u+4)%4)!==l);else f.point(o[0],o[1])}function a(r,i){return jc(r[0]-t)<Sc?i>0?0:3:jc(r[0]-e)<Sc?i>0?2:1:jc(r[1]-n)<Sc?i>0?1:0:i>0?3:2}function u(t,n){return c(t.x,n.x)}function c(t,n){var e=a(t,1),r=a(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(a){var c,f,s,l,h,d,p,_,g,v,y,b=a,m=Us(),x={point:w,lineStart:function(){x.point=M,f&&f.push(s=[]),v=!0,g=!1,p=_=NaN},lineEnd:function(){c&&(M(l,h),d&&g&&m.rejoin(),c.push(m.result())),x.point=w,g&&b.lineEnd()},polygonStart:function(){b=m,c=[],f=[],y=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=f.length;e<i;++e)for(var o,a,u=f[e],c=1,s=u.length,l=u[0],h=l[0],d=l[1];c<s;++c)o=h,a=d,h=(l=u[c])[0],d=l[1],a<=r?d>r&&(h-o)*(r-a)>(d-a)*(t-o)&&++n:d<=r&&(h-o)*(r-a)<(d-a)*(t-o)&&--n;return n}(),e=y&&n,i=(c=L(c)).length;(e||i)&&(a.polygonStart(),e&&(a.lineStart(),o(null,null,1,a),a.lineEnd()),i&&js(c,u,n,o,a),a.polygonEnd()),b=a,c=f=s=null}};function w(t,n){i(t,n)&&b.point(t,n)}function M(o,a){var u=i(o,a);if(f&&s.push([o,a]),v)l=o,h=a,d=u,v=!1,u&&(b.lineStart(),b.point(o,a));else if(u&&g)b.point(o,a);else{var c=[p=Math.max(Ws,Math.min(Zs,p)),_=Math.max(Ws,Math.min(Zs,_))],m=[o=Math.max(Ws,Math.min(Zs,o)),a=Math.max(Ws,Math.min(Zs,a))];!function(t,n,e,r,i,o){var a,u=t[0],c=t[1],f=0,s=1,l=n[0]-u,h=n[1]-c;if(a=e-u,l||!(a>0)){if(a/=l,l<0){if(a<f)return;a<s&&(s=a)}else if(l>0){if(a>s)return;a>f&&(f=a)}if(a=i-u,l||!(a<0)){if(a/=l,l<0){if(a>s)return;a>f&&(f=a)}else if(l>0){if(a<f)return;a<s&&(s=a)}if(a=r-c,h||!(a>0)){if(a/=h,h<0){if(a<f)return;a<s&&(s=a)}else if(h>0){if(a>s)return;a>f&&(f=a)}if(a=o-c,h||!(a<0)){if(a/=h,h<0){if(a>s)return;a>f&&(f=a)}else if(h>0){if(a<f)return;a<s&&(s=a)}return f>0&&(t[0]=u+f*l,t[1]=c+f*h),s<1&&(n[0]=u+s*l,n[1]=c+s*h),!0}}}}}(c,m,t,n,e,r)?u&&(b.lineStart(),b.point(o,a),y=!1):(g||(b.lineStart(),b.point(c[0],c[1])),b.point(m[0],m[1]),u||b.lineEnd(),y=!1)}p=o,_=a,g=u}return x}}function Xs(){var t,n,e,r=0,i=0,o=960,a=500;return e={stream:function(e){return t&&n===e?t:t=Vs(r,i,o,a)(n=e)},extent:function(u){return arguments.length?(r=+u[0][0],i=+u[0][1],o=+u[1][0],a=+u[1][1],t=n=null,e):[[r,i],[o,a]]}}}var $s,Gs,Ks,Qs=Mc(),Js={sphere:Gc,point:Gc,lineStart:function(){Js.point=nl,Js.lineEnd=tl},lineEnd:Gc,polygonStart:Gc,polygonEnd:Gc};function tl(){Js.point=Js.lineEnd=Gc}function nl(t,n){$s=t*=Dc,Gs=Yc(n*=Dc),Ks=Lc(n),Js.point=el}function el(t,n){t*=Dc;var e=Yc(n*=Dc),r=Lc(n),i=jc(t-$s),o=Lc(i),a=r*Yc(i),u=Ks*e-Gs*r*o,c=Gs*e+Ks*r*o;Qs.add(Pc(Zc(a*a+u*u),c)),$s=t,Gs=e,Ks=r}function rl(t){return Qs.reset(),ef(t,Js),+Qs}var il=[null,null],ol={type:"LineString",coordinates:il};function al(t,n){return il[0]=t,il[1]=n,rl(ol)}var ul={Feature:function(t,n){return fl(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(fl(e[r].geometry,n))return!0;return!1}},cl={Sphere:function(){return!0},Point:function(t,n){return sl(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(sl(e[r],n))return!0;return!1},LineString:function(t,n){return ll(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(ll(e[r],n))return!0;return!1},Polygon:function(t,n){return hl(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(hl(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(fl(e[r],n))return!0;return!1}};function fl(t,n){return!(!t||!cl.hasOwnProperty(t.type))&&cl[t.type](t,n)}function sl(t,n){return 0===al(t,n)}function ll(t,n){for(var e,r,i,o=0,a=t.length;o<a;o++){if(0===(r=al(t[o],n)))return!0;if(o>0&&(i=al(t[o],t[o-1]))>0&&e<=i&&r<=i&&(e+r-i)*(1-Math.pow((e-r)/i,2))<Ec*i)return!0;e=r}return!1}function hl(t,n){return!!Fs(t.map(dl),pl(n))}function dl(t){return(t=t.map(pl)).pop(),t}function pl(t){return[t[0]*Dc,t[1]*Dc]}function _l(t,n){return(t&&ul.hasOwnProperty(t.type)?ul[t.type]:fl)(t,n)}function gl(t,n,e){var r=M(t,n-Sc,e).concat(n);return function(t){return r.map((function(n){return[t,n]}))}}function vl(t,n,e){var r=M(t,n-Sc,e).concat(n);return function(t){return r.map((function(n){return[n,t]}))}}function yl(){var t,n,e,r,i,o,a,u,c,f,s,l,h=10,d=h,p=90,_=360,g=2.5;function v(){return{type:"MultiLineString",coordinates:y()}}function y(){return M(Fc(r/p)*p,e,p).map(s).concat(M(Fc(u/_)*_,a,_).map(l)).concat(M(Fc(n/h)*h,t,h).filter((function(t){return jc(t%p)>Sc})).map(c)).concat(M(Fc(o/d)*d,i,d).filter((function(t){return jc(t%_)>Sc})).map(f))}return v.lines=function(){return y().map((function(t){return{type:"LineString",coordinates:t}}))},v.outline=function(){return{type:"Polygon",coordinates:[s(r).concat(l(a).slice(1),s(e).reverse().slice(1),l(u).reverse().slice(1))]}},v.extent=function(t){return arguments.length?v.extentMajor(t).extentMinor(t):v.extentMinor()},v.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],u=+t[0][1],a=+t[1][1],r>e&&(t=r,r=e,e=t),u>a&&(t=u,u=a,a=t),v.precision(g)):[[r,u],[e,a]]},v.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),v.precision(g)):[[n,o],[t,i]]},v.step=function(t){return arguments.length?v.stepMajor(t).stepMinor(t):v.stepMinor()},v.stepMajor=function(t){return arguments.length?(p=+t[0],_=+t[1],v):[p,_]},v.stepMinor=function(t){return arguments.length?(h=+t[0],d=+t[1],v):[h,d]},v.precision=function(h){return arguments.length?(g=+h,c=gl(o,i,90),f=vl(n,t,g),s=gl(u,a,90),l=vl(r,e,g),v):g},v.extentMajor([[-180,-89.999999],[180,89.999999]]).extentMinor([[-180,-80.000001],[180,80.000001]])}function bl(){return yl()()}function ml(t,n){var e=t[0]*Dc,r=t[1]*Dc,i=n[0]*Dc,o=n[1]*Dc,a=Lc(r),u=Yc(r),c=Lc(o),f=Yc(o),s=a*Lc(e),l=a*Yc(e),h=c*Lc(i),d=c*Yc(i),p=2*Xc(Zc($c(o-r)+a*c*$c(i-e))),_=Yc(p),g=p?function(t){var n=Yc(t*=p)/_,e=Yc(p-t)/_,r=e*s+n*h,i=e*l+n*d,o=e*u+n*f;return[Pc(i,r)*Oc,Pc(o,Zc(r*r+i*i))*Oc]}:function(){return[e*Oc,r*Oc]};return g.distance=p,g}function xl(t){return t}var wl,Ml,Al,Tl,kl=Mc(),Sl=Mc(),El={point:Gc,lineStart:Gc,lineEnd:Gc,polygonStart:function(){El.lineStart=Nl,El.lineEnd=Ul},polygonEnd:function(){El.lineStart=El.lineEnd=El.point=Gc,kl.add(jc(Sl)),Sl.reset()},result:function(){var t=kl/2;return kl.reset(),t}};function Nl(){El.point=Cl}function Cl(t,n){El.point=zl,wl=Al=t,Ml=Tl=n}function zl(t,n){Sl.add(Tl*t-Al*n),Al=t,Tl=n}function Ul(){zl(wl,Ml)}const Ol=El;var Dl=1/0,jl=Dl,Rl=-Dl,Pl=Rl;const Ll={point:function(t,n){t<Dl&&(Dl=t),t>Rl&&(Rl=t),n<jl&&(jl=n),n>Pl&&(Pl=n)},lineStart:Gc,lineEnd:Gc,polygonStart:Gc,polygonEnd:Gc,result:function(){var t=[[Dl,jl],[Rl,Pl]];return Rl=Pl=-(jl=Dl=1/0),t}};var Fl,Bl,Il,ql,Yl=0,Hl=0,Zl=0,Wl=0,Vl=0,Xl=0,$l=0,Gl=0,Kl=0,Ql={point:Jl,lineStart:th,lineEnd:rh,polygonStart:function(){Ql.lineStart=ih,Ql.lineEnd=oh},polygonEnd:function(){Ql.point=Jl,Ql.lineStart=th,Ql.lineEnd=rh},result:function(){var t=Kl?[$l/Kl,Gl/Kl]:Xl?[Wl/Xl,Vl/Xl]:Zl?[Yl/Zl,Hl/Zl]:[NaN,NaN];return Yl=Hl=Zl=Wl=Vl=Xl=$l=Gl=Kl=0,t}};function Jl(t,n){Yl+=t,Hl+=n,++Zl}function th(){Ql.point=nh}function nh(t,n){Ql.point=eh,Jl(Il=t,ql=n)}function eh(t,n){var e=t-Il,r=n-ql,i=Zc(e*e+r*r);Wl+=i*(Il+t)/2,Vl+=i*(ql+n)/2,Xl+=i,Jl(Il=t,ql=n)}function rh(){Ql.point=Jl}function ih(){Ql.point=ah}function oh(){uh(Fl,Bl)}function ah(t,n){Ql.point=uh,Jl(Fl=Il=t,Bl=ql=n)}function uh(t,n){var e=t-Il,r=n-ql,i=Zc(e*e+r*r);Wl+=i*(Il+t)/2,Vl+=i*(ql+n)/2,Xl+=i,$l+=(i=ql*t-Il*n)*(Il+t),Gl+=i*(ql+n),Kl+=3*i,Jl(Il=t,ql=n)}const ch=Ql;function fh(t){this._context=t}fh.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Uc)}},result:Gc};var sh,lh,hh,dh,ph,_h=Mc(),gh={point:Gc,lineStart:function(){gh.point=vh},lineEnd:function(){sh&&yh(lh,hh),gh.point=Gc},polygonStart:function(){sh=!0},polygonEnd:function(){sh=null},result:function(){var t=+_h;return _h.reset(),t}};function vh(t,n){gh.point=yh,lh=dh=t,hh=ph=n}function yh(t,n){dh-=t,ph-=n,_h.add(Zc(dh*dh+ph*ph)),dh=t,ph=n}const bh=gh;function mh(){this._string=[]}function xh(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function wh(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),ef(t,e(r))),r.result()}return o.area=function(t){return ef(t,e(Ol)),Ol.result()},o.measure=function(t){return ef(t,e(bh)),bh.result()},o.bounds=function(t){return ef(t,e(Ll)),Ll.result()},o.centroid=function(t){return ef(t,e(ch)),ch.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,xl):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new mh):new fh(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)}function Mh(t){return{stream:Ah(t)}}function Ah(t){return function(n){var e=new Th;for(var r in t)e[r]=t[r];return e.stream=n,e}}function Th(){}function kh(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),ef(e,t.stream(Ll)),n(Ll.result()),null!=r&&t.clipExtent(r),t}function Sh(t,n,e){return kh(t,(function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),a=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,u=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([a,u])}),e)}function Eh(t,n,e){return Sh(t,[[0,0],n],e)}function Nh(t,n,e){return kh(t,(function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,a=-i*e[0][1];t.scale(150*i).translate([o,a])}),e)}function Ch(t,n,e){return kh(t,(function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],a=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,a])}),e)}mh.prototype={_radius:4.5,_circle:xh(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=xh(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}},Th.prototype={constructor:Th,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var zh=Lc(30*Dc);function Uh(t,n){return+n?function(t,n){function e(r,i,o,a,u,c,f,s,l,h,d,p,_,g){var v=f-r,y=s-i,b=v*v+y*y;if(b>4*n&&_--){var m=a+h,x=u+d,w=c+p,M=Zc(m*m+x*x+w*w),A=Xc(w/=M),T=jc(jc(w)-1)<Sc||jc(o-l)<Sc?(o+l)/2:Pc(x,m),k=t(T,A),S=k[0],E=k[1],N=S-r,C=E-i,z=y*N-v*C;(z*z/b>n||jc((v*N+y*C)/b-.5)>.3||a*h+u*d+c*p<zh)&&(e(r,i,o,a,u,c,S,E,T,m/=M,x/=M,w,_,g),g.point(S,E),e(S,E,T,m,x,w,f,s,l,h,d,p,_,g))}}return function(n){var r,i,o,a,u,c,f,s,l,h,d,p,_={point:g,lineStart:v,lineEnd:b,polygonStart:function(){n.polygonStart(),_.lineStart=m},polygonEnd:function(){n.polygonEnd(),_.lineStart=v}};function g(e,r){e=t(e,r),n.point(e[0],e[1])}function v(){s=NaN,_.point=y,n.lineStart()}function y(r,i){var o=yf([r,i]),a=t(r,i);e(s,l,f,h,d,p,s=a[0],l=a[1],f=r,h=o[0],d=o[1],p=o[2],16,n),n.point(s,l)}function b(){_.point=g,n.lineEnd()}function m(){v(),_.point=x,_.lineEnd=w}function x(t,n){y(r=t,n),i=s,o=l,a=h,u=d,c=p,_.point=y}function w(){e(s,l,f,h,d,p,i,o,r,a,u,c,16,n),_.lineEnd=b,b()}return _}}(t,n):function(t){return Ah({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)}var Oh=Ah({point:function(t,n){this.stream.point(t*Dc,n*Dc)}});function Dh(t,n,e,r,i){function o(o,a){return[n+t*(o*=r),e-t*(a*=i)]}return o.invert=function(o,a){return[(o-n)/t*r,(e-a)/t*i]},o}function jh(t,n,e,r,i,o){var a=Lc(o),u=Yc(o),c=a*t,f=u*t,s=a/t,l=u/t,h=(u*e-a*n)/t,d=(u*n+a*e)/t;function p(t,o){return[c*(t*=r)-f*(o*=i)+n,e-f*t-c*o]}return p.invert=function(t,n){return[r*(s*t-l*n+h),i*(d-l*t-s*n)]},p}function Rh(t){return Ph((function(){return t}))()}function Ph(t){var n,e,r,i,o,a,u,c,f,s,l=150,h=480,d=250,p=0,_=0,g=0,v=0,y=0,b=0,m=1,x=1,w=null,M=Ys,A=null,T=xl,k=.5;function S(t){return c(t[0]*Dc,t[1]*Dc)}function E(t){return(t=c.invert(t[0],t[1]))&&[t[0]*Oc,t[1]*Oc]}function N(){var t=jh(l,0,0,m,x,b).apply(null,n(p,_)),r=(b?jh:Dh)(l,h-t[0],d-t[1],m,x,b);return e=As(g,v,y),u=ws(n,r),c=ws(e,u),a=Uh(u,k),C()}function C(){return f=s=null,S}return S.stream=function(t){return f&&s===t?f:f=Oh(function(t){return Ah({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(M(a(T(s=t)))))},S.preclip=function(t){return arguments.length?(M=t,w=void 0,C()):M},S.postclip=function(t){return arguments.length?(T=t,A=r=i=o=null,C()):T},S.clipAngle=function(t){return arguments.length?(M=+t?Hs(w=t*Dc):(w=null,Ys),C()):w*Oc},S.clipExtent=function(t){return arguments.length?(T=null==t?(A=r=i=o=null,xl):Vs(A=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),C()):null==A?null:[[A,r],[i,o]]},S.scale=function(t){return arguments.length?(l=+t,N()):l},S.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],N()):[h,d]},S.center=function(t){return arguments.length?(p=t[0]%360*Dc,_=t[1]%360*Dc,N()):[p*Oc,_*Oc]},S.rotate=function(t){return arguments.length?(g=t[0]%360*Dc,v=t[1]%360*Dc,y=t.length>2?t[2]%360*Dc:0,N()):[g*Oc,v*Oc,y*Oc]},S.angle=function(t){return arguments.length?(b=t%360*Dc,N()):b*Oc},S.reflectX=function(t){return arguments.length?(m=t?-1:1,N()):m<0},S.reflectY=function(t){return arguments.length?(x=t?-1:1,N()):x<0},S.precision=function(t){return arguments.length?(a=Uh(u,k=t*t),C()):Zc(k)},S.fitExtent=function(t,n){return Sh(S,t,n)},S.fitSize=function(t,n){return Eh(S,t,n)},S.fitWidth=function(t,n){return Nh(S,t,n)},S.fitHeight=function(t,n){return Ch(S,t,n)},function(){return n=t.apply(this,arguments),S.invert=n.invert&&E,N()}}function Lh(t){var n=0,e=Nc/3,r=Ph(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*Dc,e=t[1]*Dc):[n*Oc,e*Oc]},i}function Fh(t,n){var e=Yc(t),r=(e+Yc(n))/2;if(jc(r)<Sc)return function(t){var n=Lc(t);function e(t,e){return[t*n,Yc(e)/n]}return e.invert=function(t,e){return[t/n,Xc(e*n)]},e}(t);var i=1+e*(2*r-e),o=Zc(i)/r;function a(t,n){var e=Zc(i-2*r*Yc(n))/r;return[e*Yc(t*=r),o-e*Lc(t)]}return a.invert=function(t,n){var e=o-n,a=Pc(t,jc(e))*Hc(e);return e*r<0&&(a-=Nc*Hc(t)*Hc(e)),[a/r,Xc((i-(t*t+e*e)*r*r)/(2*r))]},a}function Bh(){return Lh(Fh).scale(155.424).center([0,33.6442])}function Ih(){return Bh().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function qh(){var t,n,e,r,i,o,a=Ih(),u=Bh().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=Bh().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(t,n){o=[t,n]}};function s(t){var n=t[0],a=t[1];return o=null,e.point(n,a),o||(r.point(n,a),o)||(i.point(n,a),o)}function l(){return t=n=null,s}return s.invert=function(t){var n=a.scale(),e=a.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?u:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:a).invert(t)},s.stream=function(e){return t&&n===e?t:(r=[a.stream(n=e),u.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},s.precision=function(t){return arguments.length?(a.precision(t),u.precision(t),c.precision(t),l()):a.precision()},s.scale=function(t){return arguments.length?(a.scale(t),u.scale(.35*t),c.scale(t),s.translate(a.translate())):a.scale()},s.translate=function(t){if(!arguments.length)return a.translate();var n=a.scale(),o=+t[0],s=+t[1];return e=a.translate(t).clipExtent([[o-.455*n,s-.238*n],[o+.455*n,s+.238*n]]).stream(f),r=u.translate([o-.307*n,s+.201*n]).clipExtent([[o-.425*n+Sc,s+.12*n+Sc],[o-.214*n-Sc,s+.234*n-Sc]]).stream(f),i=c.translate([o-.205*n,s+.212*n]).clipExtent([[o-.214*n+Sc,s+.166*n+Sc],[o-.115*n-Sc,s+.234*n-Sc]]).stream(f),l()},s.fitExtent=function(t,n){return Sh(s,t,n)},s.fitSize=function(t,n){return Eh(s,t,n)},s.fitWidth=function(t,n){return Nh(s,t,n)},s.fitHeight=function(t,n){return Ch(s,t,n)},s.scale(1070)}function Yh(t){return function(n,e){var r=Lc(n),i=Lc(e),o=t(r*i);return[o*i*Yc(n),o*Yc(e)]}}function Hh(t){return function(n,e){var r=Zc(n*n+e*e),i=t(r),o=Yc(i),a=Lc(i);return[Pc(n*o,r*a),Xc(r&&e*o/r)]}}var Zh=Yh((function(t){return Zc(2/(1+t))}));function Wh(){return Rh(Zh).scale(124.75).clipAngle(179.999)}Zh.invert=Hh((function(t){return 2*Xc(t/2)}));var Vh=Yh((function(t){return(t=Vc(t))&&t/Yc(t)}));function Xh(){return Rh(Vh).scale(79.4188).clipAngle(179.999)}function $h(t,n){return[t,Ic(Wc((Cc+n)/2))]}function Gh(){return Kh($h).scale(961/Uc)}function Kh(t){var n,e,r,i=Rh(t),o=i.center,a=i.scale,u=i.translate,c=i.clipExtent,f=null;function s(){var o=Nc*a(),u=i(Es(i.rotate()).invert([0,0]));return c(null==f?[[u[0]-o,u[1]-o],[u[0]+o,u[1]+o]]:t===$h?[[Math.max(u[0]-o,f),n],[Math.min(u[0]+o,e),r]]:[[f,Math.max(u[1]-o,n)],[e,Math.min(u[1]+o,r)]])}return i.scale=function(t){return arguments.length?(a(t),s()):a()},i.translate=function(t){return arguments.length?(u(t),s()):u()},i.center=function(t){return arguments.length?(o(t),s()):o()},i.clipExtent=function(t){return arguments.length?(null==t?f=n=e=r=null:(f=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),s()):null==f?null:[[f,n],[e,r]]},s()}function Qh(t){return Wc((Cc+t)/2)}function Jh(t,n){var e=Lc(t),r=t===n?Yc(t):Ic(e/Lc(n))/Ic(Qh(n)/Qh(t)),i=e*qc(Qh(t),r)/r;if(!r)return $h;function o(t,n){i>0?n<-Cc+Sc&&(n=-Cc+Sc):n>Cc-Sc&&(n=Cc-Sc);var e=i/qc(Qh(n),r);return[e*Yc(r*t),i-e*Lc(r*t)]}return o.invert=function(t,n){var e=i-n,o=Hc(r)*Zc(t*t+e*e),a=Pc(t,jc(e))*Hc(e);return e*r<0&&(a-=Nc*Hc(t)*Hc(e)),[a/r,2*Rc(qc(i/o,1/r))-Cc]},o}function td(){return Lh(Jh).scale(109.5).parallels([30,30])}function nd(t,n){return[t,n]}function ed(){return Rh(nd).scale(152.63)}function rd(t,n){var e=Lc(t),r=t===n?Yc(t):(e-Lc(n))/(n-t),i=e/r+t;if(jc(r)<Sc)return nd;function o(t,n){var e=i-n,o=r*t;return[e*Yc(o),i-e*Lc(o)]}return o.invert=function(t,n){var e=i-n,o=Pc(t,jc(e))*Hc(e);return e*r<0&&(o-=Nc*Hc(t)*Hc(e)),[o/r,i-Hc(r)*Zc(t*t+e*e)]},o}function id(){return Lh(rd).scale(131.154).center([0,13.9389])}Vh.invert=Hh((function(t){return t})),$h.invert=function(t,n){return[t,2*Rc(Bc(n))-Cc]},nd.invert=nd;var od=1.340264,ad=-.081106,ud=893e-6,cd=.003796,fd=Zc(3)/2;function sd(t,n){var e=Xc(fd*Yc(n)),r=e*e,i=r*r*r;return[t*Lc(e)/(fd*(od+3*ad*r+i*(7*ud+9*cd*r))),e*(od+ad*r+i*(ud+cd*r))]}function ld(){return Rh(sd).scale(177.158)}function hd(t,n){var e=Lc(n),r=Lc(t)*e;return[e*Yc(t)/r,Yc(n)/r]}function dd(){return Rh(hd).scale(144.049).clipAngle(60)}function pd(){var t,n,e,r,i,o,a,u=1,c=0,f=0,s=1,l=1,h=0,d=null,p=1,_=1,g=Ah({point:function(t,n){var e=b([t,n]);this.stream.point(e[0],e[1])}}),v=xl;function y(){return p=u*s,_=u*l,o=a=null,b}function b(e){var r=e[0]*p,i=e[1]*_;if(h){var o=i*t-r*n;r=r*t+i*n,i=o}return[r+c,i+f]}return b.invert=function(e){var r=e[0]-c,i=e[1]-f;if(h){var o=i*t+r*n;r=r*t-i*n,i=o}return[r/p,i/_]},b.stream=function(t){return o&&a===t?o:o=g(v(a=t))},b.postclip=function(t){return arguments.length?(v=t,d=e=r=i=null,y()):v},b.clipExtent=function(t){return arguments.length?(v=null==t?(d=e=r=i=null,xl):Vs(d=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),y()):null==d?null:[[d,e],[r,i]]},b.scale=function(t){return arguments.length?(u=+t,y()):u},b.translate=function(t){return arguments.length?(c=+t[0],f=+t[1],y()):[c,f]},b.angle=function(e){return arguments.length?(n=Yc(h=e%360*Dc),t=Lc(h),y()):h*Oc},b.reflectX=function(t){return arguments.length?(s=t?-1:1,y()):s<0},b.reflectY=function(t){return arguments.length?(l=t?-1:1,y()):l<0},b.fitExtent=function(t,n){return Sh(b,t,n)},b.fitSize=function(t,n){return Eh(b,t,n)},b.fitWidth=function(t,n){return Nh(b,t,n)},b.fitHeight=function(t,n){return Ch(b,t,n)},b}function _d(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}function gd(){return Rh(_d).scale(175.295)}function vd(t,n){return[Lc(n)*Yc(t),Yc(n)]}function yd(){return Rh(vd).scale(249.5).clipAngle(90.000001)}function bd(t,n){var e=Lc(n),r=1+Lc(t)*e;return[e*Yc(t)/r,Yc(n)/r]}function md(){return Rh(bd).scale(250).clipAngle(142)}function xd(t,n){return[Ic(Wc((Cc+n)/2)),-t]}function wd(){var t=Kh(xd),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)}function Md(t,n){return t.parent===n.parent?1:2}function Ad(t,n){return t+n.x}function Td(t,n){return Math.max(t,n.y)}function kd(){var t=Md,n=1,e=1,r=!1;function i(i){var o,a=0;i.eachAfter((function(n){var e=n.children;e?(n.x=function(t){return t.reduce(Ad,0)/t.length}(e),n.y=function(t){return 1+t.reduce(Td,0)}(e)):(n.x=o?a+=t(n,o):0,n.y=0,o=n)}));var u=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),f=u.x-t(u,c)/2,s=c.x+t(c,u)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-f)/(s-f)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function Sd(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function Ed(t,n){var e,r,i,o,a,u=new Ud(t),c=+t.value&&(u.value=t.value),f=[u];for(null==n&&(n=Nd);e=f.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(a=i.length))for(e.children=new Array(a),o=a-1;o>=0;--o)f.push(r=e.children[o]=new Ud(i[o])),r.parent=e,r.depth=e.depth+1;return u.eachBefore(zd)}function Nd(t){return t.children}function Cd(t){t.data=t.data.data}function zd(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Ud(t){this.data=t,this.depth=this.height=0,this.parent=null}sd.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,a=0;a<12&&(o=(i=(r-=e=(r*(od+ad*i+o*(ud+cd*i))-n)/(od+3*ad*i+o*(7*ud+9*cd*i)))*r)*i*i,!(jc(e)<Ec));++a);return[fd*t*(od+3*ad*i+o*(7*ud+9*cd*i))/Lc(r),Xc(Yc(r)/fd)]},hd.invert=Hh(Rc),_d.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,a=o*o;r-=e=(r*(1.007226+o*(.015085+a*(.028874*o-.044475-.005916*a)))-n)/(1.007226+o*(.045255+a*(.259866*o-.311325-.005916*11*a)))}while(jc(e)>Sc&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]},vd.invert=Hh(Xc),bd.invert=Hh((function(t){return 2*Rc(t)})),xd.invert=function(t,n){return[-n,2*Rc(Bc(t))-Cc]},Ud.prototype=Ed.prototype={constructor:Ud,count:function(){return this.eachAfter(Sd)},each:function(t){var n,e,r,i,o=this,a=[o];do{for(n=a.reverse(),a=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)a.push(e[r])}while(a.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=a.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return Ed(this).eachBefore(Cd)}};var Od=Array.prototype.slice;function Dd(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(Od.call(t))).length,o=[];r<i;)n=t[r],e&&Pd(e,n)?++r:(e=Fd(o=jd(o,n)),r=0);return e}function jd(t,n){var e,r;if(Ld(n,t))return[n];for(e=0;e<t.length;++e)if(Rd(n,t[e])&&Ld(Bd(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(Rd(Bd(t[e],t[r]),n)&&Rd(Bd(t[e],n),t[r])&&Rd(Bd(t[r],n),t[e])&&Ld(Id(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function Rd(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function Pd(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Ld(t,n){for(var e=0;e<n.length;++e)if(!Pd(t,n[e]))return!1;return!0}function Fd(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return Bd(t[0],t[1]);case 3:return Id(t[0],t[1],t[2])}}function Bd(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,a=n.y,u=n.r,c=o-e,f=a-r,s=u-i,l=Math.sqrt(c*c+f*f);return{x:(e+o+c/l*s)/2,y:(r+a+f/l*s)/2,r:(l+i+u)/2}}function Id(t,n,e){var r=t.x,i=t.y,o=t.r,a=n.x,u=n.y,c=n.r,f=e.x,s=e.y,l=e.r,h=r-a,d=r-f,p=i-u,_=i-s,g=c-o,v=l-o,y=r*r+i*i-o*o,b=y-a*a-u*u+c*c,m=y-f*f-s*s+l*l,x=d*p-h*_,w=(p*m-_*b)/(2*x)-r,M=(_*g-p*v)/x,A=(d*b-h*m)/(2*x)-i,T=(h*v-d*g)/x,k=M*M+T*T-1,S=2*(o+w*M+A*T),E=w*w+A*A-o*o,N=-(k?(S+Math.sqrt(S*S-4*k*E))/(2*k):E/S);return{x:r+w+M*N,y:i+A+T*N,r:N}}function qd(t,n,e){var r,i,o,a,u=t.x-n.x,c=t.y-n.y,f=u*u+c*c;f?(i=n.r+e.r,i*=i,a=t.r+e.r,i>(a*=a)?(r=(f+a-i)/(2*f),o=Math.sqrt(Math.max(0,a/f-r*r)),e.x=t.x-r*u-o*c,e.y=t.y-r*c+o*u):(r=(f+i-a)/(2*f),o=Math.sqrt(Math.max(0,i/f-r*r)),e.x=n.x+r*u-o*c,e.y=n.y+r*c+o*u)):(e.x=n.x+e.r,e.y=n.y)}function Yd(t,n){var e=t.r+n.r-1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Hd(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Zd(t){this._=t,this.next=null,this.previous=null}function Wd(t){if(!(i=t.length))return 0;var n,e,r,i,o,a,u,c,f,s,l;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;qd(e,n,r=t[2]),n=new Zd(n),e=new Zd(e),r=new Zd(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(u=3;u<i;++u){qd(n._,e._,r=t[u]),r=new Zd(r),c=e.next,f=n.previous,s=e._.r,l=n._.r;do{if(s<=l){if(Yd(c._,r._)){e=c,n.next=e,e.previous=n,--u;continue t}s+=c._.r,c=c.next}else{if(Yd(f._,r._)){(n=f).next=e,e.previous=n,--u;continue t}l+=f._.r,f=f.previous}}while(c!==f.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=Hd(n);(r=r.next)!==e;)(a=Hd(r))<o&&(n=r,o=a);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=Dd(n),u=0;u<i;++u)(n=t[u]).x-=r.x,n.y-=r.y;return r.r}function Vd(t){return Wd(t),t}function Xd(t){return null==t?null:$d(t)}function $d(t){if("function"!=typeof t)throw new Error;return t}function Gd(){return 0}function Kd(t){return function(){return t}}function Qd(t){return Math.sqrt(t.value)}function Jd(){var t=null,n=1,e=1,r=Gd;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(tp(t)).eachAfter(np(r,.5)).eachBefore(ep(1)):i.eachBefore(tp(Qd)).eachAfter(np(Gd,1)).eachAfter(np(r,i.r/Math.min(n,e))).eachBefore(ep(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=Xd(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Kd(+t),i):r},i}function tp(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function np(t,n){return function(e){if(r=e.children){var r,i,o,a=r.length,u=t(e)*n||0;if(u)for(i=0;i<a;++i)r[i].r+=u;if(o=Wd(r),u)for(i=0;i<a;++i)r[i].r-=u;e.r=o+u}}}function ep(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}function rp(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function ip(t,n,e,r,i){for(var o,a=t.children,u=-1,c=a.length,f=t.value&&(r-n)/t.value;++u<c;)(o=a[u]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*f}function op(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&ip(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,a=r.x1-e,u=r.y1-e;a<i&&(i=a=(i+a)/2),u<o&&(o=u=(o+u)/2),r.x0=i,r.y0=o,r.x1=a,r.y1=u}}(n,o)),r&&i.eachBefore(rp),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i}var ap={depth:-1},up={};function cp(t){return t.id}function fp(t){return t.parentId}function sp(){var t=cp,n=fp;function e(e){var r,i,o,a,u,c,f,s=e.length,l=new Array(s),h={};for(i=0;i<s;++i)r=e[i],u=l[i]=new Ud(r),null!=(c=t(r,i,e))&&(c+="")&&(h[f="$"+(u.id=c)]=f in h?up:u);for(i=0;i<s;++i)if(u=l[i],null!=(c=n(e[i],i,e))&&(c+="")){if(!(a=h["$"+c]))throw new Error("missing: "+c);if(a===up)throw new Error("ambiguous: "+c);a.children?a.children.push(u):a.children=[u],u.parent=a}else{if(o)throw new Error("multiple roots");o=u}if(!o)throw new Error("no root");if(o.parent=ap,o.eachBefore((function(t){t.depth=t.parent.depth+1,--s})).eachBefore(zd),o.parent=null,s>0)throw new Error("cycle");return o}return e.id=function(n){return arguments.length?(t=$d(n),e):t},e.parentId=function(t){return arguments.length?(n=$d(t),e):n},e}function lp(t,n){return t.parent===n.parent?1:2}function hp(t){var n=t.children;return n?n[0]:t.t}function dp(t){var n=t.children;return n?n[n.length-1]:t.t}function pp(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function _p(t,n,e){return t.a.parent===n.parent?t.a:e}function gp(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function vp(){var t=lp,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,o,a=new gp(t,0),u=[a];n=u.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)u.push(e=n.children[i]=new gp(r[i],i)),e.parent=n;return(a.parent=new gp(null,0)).children=[a],a}(i);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(a),r)i.eachBefore(u);else{var f=i,s=i,l=i;i.eachBefore((function(t){t.x<f.x&&(f=t),t.x>s.x&&(s=t),t.depth>l.depth&&(l=t)}));var h=f===s?1:t(f,s)/2,d=h-f.x,p=n/(s.x+h+d),_=e/(l.depth||1);i.eachBefore((function(t){t.x=(t.x+d)*p,t.y=t.depth*_}))}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,a=n,u=e,c=o.parent.children[0],f=o.m,s=a.m,l=u.m,h=c.m;u=dp(u),o=hp(o),u&&o;)c=hp(c),(a=dp(a)).a=n,(i=u.z+l-o.z-f+t(u._,o._))>0&&(pp(_p(u,n,r),n,i),f+=i,s+=i),l+=u.m,f+=o.m,h+=c.m,s+=a.m;u&&!dp(a)&&(a.t=u,a.m+=l-s),o&&!hp(c)&&(c.t=o,c.m+=f-h,r=n)}return r}(n,i,n.parent.A||r[0])}function a(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function u(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function yp(t,n,e,r,i){for(var o,a=t.children,u=-1,c=a.length,f=t.value&&(i-e)/t.value;++u<c;)(o=a[u]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*f}gp.prototype=Object.create(Ud.prototype);var bp=(1+Math.sqrt(5))/2;function mp(t,n,e,r,i,o){for(var a,u,c,f,s,l,h,d,p,_,g,v=[],y=n.children,b=0,m=0,x=y.length,w=n.value;b<x;){c=i-e,f=o-r;do{s=y[m++].value}while(!s&&m<x);for(l=h=s,g=s*s*(_=Math.max(f/c,c/f)/(w*t)),p=Math.max(h/g,g/l);m<x;++m){if(s+=u=y[m].value,u<l&&(l=u),u>h&&(h=u),g=s*s*_,(d=Math.max(h/g,g/l))>p){s-=u;break}p=d}v.push(a={value:s,dice:c<f,children:y.slice(b,m)}),a.dice?ip(a,e,r,i,w?r+=f*s/w:o):yp(a,e,r,w?e+=c*s/w:i,o),w-=s,b=m}return v}const xp=function t(n){function e(t,e,r,i,o){mp(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(bp);function wp(){var t=xp,n=!1,e=1,r=1,i=[0],o=Gd,a=Gd,u=Gd,c=Gd,f=Gd;function s(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(l),i=[0],n&&t.eachBefore(rp),t}function l(n){var e=i[n.depth],r=n.x0+e,s=n.y0+e,l=n.x1-e,h=n.y1-e;l<r&&(r=l=(r+l)/2),h<s&&(s=h=(s+h)/2),n.x0=r,n.y0=s,n.x1=l,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=f(n)-e,s+=a(n)-e,(l-=u(n)-e)<r&&(r=l=(r+l)/2),(h-=c(n)-e)<s&&(s=h=(s+h)/2),t(n,r,s,l,h))}return s.round=function(t){return arguments.length?(n=!!t,s):n},s.size=function(t){return arguments.length?(e=+t[0],r=+t[1],s):[e,r]},s.tile=function(n){return arguments.length?(t=$d(n),s):t},s.padding=function(t){return arguments.length?s.paddingInner(t).paddingOuter(t):s.paddingInner()},s.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Kd(+t),s):o},s.paddingOuter=function(t){return arguments.length?s.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):s.paddingTop()},s.paddingTop=function(t){return arguments.length?(a="function"==typeof t?t:Kd(+t),s):a},s.paddingRight=function(t){return arguments.length?(u="function"==typeof t?t:Kd(+t),s):u},s.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:Kd(+t),s):c},s.paddingLeft=function(t){return arguments.length?(f="function"==typeof t?t:Kd(+t),s):f},s}function Mp(t,n,e,r,i){var o,a,u=t.children,c=u.length,f=new Array(c+1);for(f[0]=a=o=0;o<c;++o)f[o+1]=a+=u[o].value;!function t(n,e,r,i,o,a,c){if(n>=e-1){var s=u[n];return s.x0=i,s.y0=o,s.x1=a,void(s.y1=c)}for(var l=f[n],h=r/2+l,d=n+1,p=e-1;d<p;){var _=d+p>>>1;f[_]<h?d=_+1:p=_}h-f[d-1]<f[d]-h&&n+1<d&&--d;var g=f[d]-l,v=r-g;if(a-i>c-o){var y=(i*v+a*g)/r;t(n,d,g,i,o,y,c),t(d,e,v,y,o,a,c)}else{var b=(o*v+c*g)/r;t(n,d,g,i,o,a,b),t(d,e,v,i,b,a,c)}}(0,c,t.value,n,e,r,i)}function Ap(t,n,e,r,i){(1&t.depth?yp:ip)(t,n,e,r,i)}const Tp=function t(n){function e(t,e,r,i,o){if((a=t._squarify)&&a.ratio===n)for(var a,u,c,f,s,l=-1,h=a.length,d=t.value;++l<h;){for(c=(u=a[l]).children,f=u.value=0,s=c.length;f<s;++f)u.value+=c[f].value;u.dice?ip(u,e,r,i,r+=(o-r)*u.value/d):yp(u,e,r,e+=(i-e)*u.value/d,o),d-=u.value}else t._squarify=a=mp(n,t,e,r,i,o),a.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(bp);function kp(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}function Sp(t,n){var e=de(+t,+n);return function(t){var n=e(t);return n-360*Math.floor(n/360)}}function Ep(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}}var Np=Math.SQRT2;function Cp(t){return((t=Math.exp(t))+1/t)/2}function zp(t,n){var e,r,i=t[0],o=t[1],a=t[2],u=n[0],c=n[1],f=n[2],s=u-i,l=c-o,h=s*s+l*l;if(h<1e-12)r=Math.log(f/a)/Np,e=function(t){return[i+t*s,o+t*l,a*Math.exp(Np*t*r)]};else{var d=Math.sqrt(h),p=(f*f-a*a+4*h)/(2*a*2*d),_=(f*f-a*a-4*h)/(2*f*2*d),g=Math.log(Math.sqrt(p*p+1)-p),v=Math.log(Math.sqrt(_*_+1)-_);r=(v-g)/Np,e=function(t){var n,e=t*r,u=Cp(g),c=a/(2*d)*(u*(n=Np*e+g,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(g));return[i+c*s,o+c*l,a*u/Cp(Np*e+g)]}}return e.duration=1e3*r,e}function Up(t){return function(n,e){var r=t((n=oe(n)).h,(e=oe(e)).h),i=pe(n.s,e.s),o=pe(n.l,e.l),a=pe(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=a(t),n+""}}}const Op=Up(de);var Dp=Up(pe);function jp(t,n){var e=pe((t=To(t)).l,(n=To(n)).l),r=pe(t.a,n.a),i=pe(t.b,n.b),o=pe(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function Rp(t){return function(n,e){var r=t((n=Oo(n)).h,(e=Oo(e)).h),i=pe(n.c,e.c),o=pe(n.l,e.l),a=pe(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=a(t),n+""}}}const Pp=Rp(de);var Lp=Rp(pe);function Fp(t){return function n(e){function r(n,r){var i=t((n=Zo(n)).h,(r=Zo(r)).h),o=pe(n.s,r.s),a=pe(n.l,r.l),u=pe(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=a(Math.pow(t,e)),n.opacity=u(t),n+""}}return e=+e,r.gamma=n,r}(1)}const Bp=Fp(de);var Ip=Fp(pe);function qp(t,n){for(var e=0,r=n.length-1,i=n[0],o=new Array(r<0?0:r);e<r;)o[e]=t(i,i=n[++e]);return function(t){var n=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[n](t-n)}}function Yp(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e}function Hp(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2}function Zp(t){for(var n,e,r=-1,i=t.length,o=0,a=0,u=t[i-1],c=0;++r<i;)n=u,u=t[r],c+=e=n[0]*u[1]-u[0]*n[1],o+=(n[0]+u[0])*e,a+=(n[1]+u[1])*e;return[o/(c*=3),a/c]}function Wp(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])}function Vp(t,n){return t[0]-n[0]||t[1]-n[1]}function Xp(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&Wp(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function $p(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(Vp),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=Xp(r),a=Xp(i),u=a[0]===o[0],c=a[a.length-1]===o[o.length-1],f=[];for(n=o.length-1;n>=0;--n)f.push(t[r[o[n]][2]]);for(n=+u;n<a.length-c;++n)f.push(t[r[a[n]][2]]);return f}function Gp(t,n){for(var e,r,i=t.length,o=t[i-1],a=n[0],u=n[1],c=o[0],f=o[1],s=!1,l=0;l<i;++l)e=(o=t[l])[0],(r=o[1])>u!=f>u&&a<(c-e)*(u-r)/(f-r)+e&&(s=!s),c=e,f=r;return s}function Kp(t){for(var n,e,r=-1,i=t.length,o=t[i-1],a=o[0],u=o[1],c=0;++r<i;)n=a,e=u,n-=a=(o=t[r])[0],e-=u=o[1],c+=Math.sqrt(n*n+e*e);return c}function Qp(){return Math.random()}const Jp=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Qp),t_=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Qp),n_=function t(n){function e(){var t=t_.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Qp),e_=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(Qp),r_=function t(n){function e(t){var e=e_.source(n)(t);return function(){return e()/t}}return e.source=t,e}(Qp),i_=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Qp);function o_(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}function a_(t,n){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(n).domain(t)}return this}var u_=Array.prototype,c_=u_.map,f_=u_.slice,s_={name:"implicit"};function l_(){var t=eo(),n=[],e=[],r=s_;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==s_)return r;t.set(o,a=n.push(i))}return e[(a-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=eo();for(var r,o,a=-1,u=e.length;++a<u;)t.has(o=(r=e[a])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=f_.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return l_(n,e).unknown(r)},o_.apply(i,arguments),i}function h_(){var t,n,e=l_().unknown(void 0),r=e.domain,i=e.range,o=[0,1],a=!1,u=0,c=0,f=.5;function s(){var e=r().length,s=o[1]<o[0],l=o[s-0],h=o[1-s];t=(h-l)/Math.max(1,e-u+2*c),a&&(t=Math.floor(t)),l+=(h-l-t*(e-u))*f,n=t*(1-u),a&&(l=Math.round(l),n=Math.round(n));var d=M(e).map((function(n){return l+t*n}));return i(s?d.reverse():d)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),s()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],s()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,s()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(a=!!t,s()):a},e.padding=function(t){return arguments.length?(u=Math.min(1,c=+t),s()):u},e.paddingInner=function(t){return arguments.length?(u=Math.min(1,t),s()):u},e.paddingOuter=function(t){return arguments.length?(c=+t,s()):c},e.align=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),s()):f},e.copy=function(){return h_(r(),o).round(a).paddingInner(u).paddingOuter(c).align(f)},o_.apply(s(),arguments)}function d_(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return d_(n())},t}function p_(){return d_(h_.apply(null,arguments).paddingInner(1))}function __(t){return+t}var g_=[0,1];function v_(t){return t}function y_(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function b_(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function m_(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=y_(i,r),o=e(a,o)):(r=y_(r,i),o=e(o,a)),function(t){return o(r(t))}}function x_(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=y_(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=f(t,n,1,r)-1;return o[e](i[e](n))}}function w_(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function M_(){var t,n,e,r,i,o,a=g_,u=g_,c=Ne,f=v_;function s(){return r=Math.min(a.length,u.length)>2?x_:m_,i=o=null,l}function l(n){return isNaN(n=+n)?e:(i||(i=r(a.map(t),u,c)))(t(f(n)))}return l.invert=function(e){return f(n((o||(o=r(u,a.map(t),Ae)))(e)))},l.domain=function(t){return arguments.length?(a=c_.call(t,__),f===v_||(f=b_(a)),s()):a.slice()},l.range=function(t){return arguments.length?(u=f_.call(t),s()):u.slice()},l.rangeRound=function(t){return u=f_.call(t),c=Ep,s()},l.clamp=function(t){return arguments.length?(f=t?b_(a):v_,l):f!==v_},l.interpolate=function(t){return arguments.length?(c=t,s()):c},l.unknown=function(t){return arguments.length?(e=t,l):e},function(e,r){return t=e,n=r,s()}}function A_(t,n){return M_()(t,n)}function T_(t,n,e,r){var i,o=N(t,n,e);switch((r=cc(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=xc(o,a))||(r.precision=i),_c(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=wc(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=mc(o))||(r.precision=i-2*("%"===r.type))}return pc(r)}function k_(t){var n=t.domain;return t.ticks=function(t){var e=n();return S(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return T_(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,u=i[o],c=i[a];return c<u&&(r=u,u=c,c=r,r=o,o=a,a=r),(r=E(u,c,e))>0?r=E(u=Math.floor(u/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=E(u=Math.ceil(u*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(c*r)/r,n(i)),t},t}function S_(){var t=A_(v_,v_);return t.copy=function(){return w_(t,S_())},o_.apply(t,arguments),k_(t)}function E_(t){var n;function e(t){return isNaN(t=+t)?n:t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=c_.call(n,__),e):t.slice()},e.unknown=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return E_(t).unknown(n)},t=arguments.length?c_.call(t,__):[0,1],k_(e)}function N_(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(e=r,r=i,i=e,e=o,o=a,a=e),t[r]=n.floor(o),t[i]=n.ceil(a),t}function C_(t){return Math.log(t)}function z_(t){return Math.exp(t)}function U_(t){return-Math.log(-t)}function O_(t){return-Math.exp(-t)}function D_(t){return isFinite(t)?+("1e"+t):t<0?0:t}function j_(t){return function(n){return-t(-n)}}function R_(t){var n,e,r=t(C_,z_),i=r.domain,o=10;function a(){return n=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}(o),e=function(t){return 10===t?D_:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}(o),i()[0]<0?(n=j_(n),e=j_(e),t(U_,O_)):t(C_,z_),r}return r.base=function(t){return arguments.length?(o=+t,a()):o},r.domain=function(t){return arguments.length?(i(t),a()):i()},r.ticks=function(t){var r,a=i(),u=a[0],c=a[a.length-1];(r=c<u)&&(h=u,u=c,c=h);var f,s,l,h=n(u),d=n(c),p=null==t?10:+t,_=[];if(!(o%1)&&d-h<p){if(h=Math.round(h)-1,d=Math.round(d)+1,u>0){for(;h<d;++h)for(s=1,f=e(h);s<o;++s)if(!((l=f*s)<u)){if(l>c)break;_.push(l)}}else for(;h<d;++h)for(s=o-1,f=e(h);s>=1;--s)if(!((l=f*s)<u)){if(l>c)break;_.push(l)}}else _=S(h,d,Math.min(d-h,p)).map(e);return r?_.reverse():_},r.tickFormat=function(t,i){if(null==i&&(i=10===o?".0e":","),"function"!=typeof i&&(i=pc(i)),t===1/0)return i;null==t&&(t=10);var a=Math.max(1,o*t/r.ticks().length);return function(t){var r=t/e(Math.round(n(t)));return r*o<o-.5&&(r*=o),r<=a?i(t):""}},r.nice=function(){return i(N_(i(),{floor:function(t){return e(Math.floor(n(t)))},ceil:function(t){return e(Math.ceil(n(t)))}}))},r}function P_(){var t=R_(M_()).domain([1,10]);return t.copy=function(){return w_(t,P_()).base(t.base())},o_.apply(t,arguments),t}function L_(t){return function(n){return Math.sign(n)*Math.log1p(Math.abs(n/t))}}function F_(t){return function(n){return Math.sign(n)*Math.expm1(Math.abs(n))*t}}function B_(t){var n=1,e=t(L_(n),F_(n));return e.constant=function(e){return arguments.length?t(L_(n=+e),F_(n)):n},k_(e)}function I_(){var t=B_(M_());return t.copy=function(){return w_(t,I_()).constant(t.constant())},o_.apply(t,arguments)}function q_(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}function Y_(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function H_(t){return t<0?-t*t:t*t}function Z_(t){var n=t(v_,v_),e=1;function r(){return 1===e?t(v_,v_):.5===e?t(Y_,H_):t(q_(e),q_(1/e))}return n.exponent=function(t){return arguments.length?(e=+t,r()):e},k_(n)}function W_(){var t=Z_(M_());return t.copy=function(){return w_(t,W_()).exponent(t.exponent())},o_.apply(t,arguments),t}function V_(){return W_.apply(null,arguments).exponent(.5)}function X_(){var t,n=[],e=[],r=[];function o(){var t=0,i=Math.max(1,e.length);for(r=new Array(i-1);++t<i;)r[t-1]=U(n,t/i);return a}function a(n){return isNaN(n=+n)?t:e[f(r,n)]}return a.invertExtent=function(t){var i=e.indexOf(t);return i<0?[NaN,NaN]:[i>0?r[i-1]:n[0],i<r.length?r[i]:n[n.length-1]]},a.domain=function(t){if(!arguments.length)return n.slice();n=[];for(var e,r=0,a=t.length;r<a;++r)null==(e=t[r])||isNaN(e=+e)||n.push(e);return n.sort(i),o()},a.range=function(t){return arguments.length?(e=f_.call(t),o()):e.slice()},a.unknown=function(n){return arguments.length?(t=n,a):t},a.quantiles=function(){return r.slice()},a.copy=function(){return X_().domain(n).range(e).unknown(t)},o_.apply(a,arguments)}function $_(){var t,n=0,e=1,r=1,i=[.5],o=[0,1];function a(n){return n<=n?o[f(i,n,0,r)]:t}function u(){var t=-1;for(i=new Array(r);++t<r;)i[t]=((t+1)*e-(t-r)*n)/(r+1);return a}return a.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],u()):[n,e]},a.range=function(t){return arguments.length?(r=(o=f_.call(t)).length-1,u()):o.slice()},a.invertExtent=function(t){var a=o.indexOf(t);return a<0?[NaN,NaN]:a<1?[n,i[0]]:a>=r?[i[r-1],e]:[i[a-1],i[a]]},a.unknown=function(n){return arguments.length?(t=n,a):a},a.thresholds=function(){return i.slice()},a.copy=function(){return $_().domain([n,e]).range(o).unknown(t)},o_.apply(k_(a),arguments)}function G_(){var t,n=[.5],e=[0,1],r=1;function i(i){return i<=i?e[f(n,i,0,r)]:t}return i.domain=function(t){return arguments.length?(n=f_.call(t),r=Math.min(n.length,e.length-1),i):n.slice()},i.range=function(t){return arguments.length?(e=f_.call(t),r=Math.min(n.length,e.length-1),i):e.slice()},i.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return G_().domain(n).range(e).unknown(t)},o_.apply(i,arguments)}var K_=e(209),Q_=e(829),J_=(0,Q_.Z)((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}));const tg=J_;J_.range;var ng=e(776),eg=e(478),rg=e(222),ig=(0,Q_.Z)((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*rg.Ym-t.getMinutes()*rg.yB)}),(function(t,n){t.setTime(+t+n*rg.Y2)}),(function(t,n){return(n-t)/rg.Y2}),(function(t){return t.getHours()}));const og=ig;ig.range;var ag=(0,Q_.Z)((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*rg.Ym)}),(function(t,n){t.setTime(+t+n*rg.yB)}),(function(t,n){return(n-t)/rg.yB}),(function(t){return t.getMinutes()}));const ug=ag;ag.range;var cg=(0,Q_.Z)((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+n*rg.Ym)}),(function(t,n){return(n-t)/rg.Ym}),(function(t){return t.getUTCSeconds()}));const fg=cg;cg.range;var sg=(0,Q_.Z)((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));sg.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?(0,Q_.Z)((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):sg:null};const lg=sg;sg.range;var hg=e(326),dg=e(692),pg=e(181);function _g(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function gg(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function vg(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}var yg,bg,mg,xg={"-":"",_:" ",0:"0"},wg=/^\s*\d+/,Mg=/^%/,Ag=/[\\^$*+?|[\]().{}]/g;function Tg(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function kg(t){return t.replace(Ag,"\\$&")}function Sg(t){return new RegExp("^(?:"+t.map(kg).join("|")+")","i")}function Eg(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Ng(t,n,e){var r=wg.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Cg(t,n,e){var r=wg.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function zg(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Ug(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Og(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function Dg(t,n,e){var r=wg.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function jg(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Rg(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Pg(t,n,e){var r=wg.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function Lg(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Fg(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Bg(t,n,e){var r=wg.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Ig(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function qg(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Yg(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Hg(t,n,e){var r=wg.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Zg(t,n,e){var r=wg.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Wg(t,n,e){var r=Mg.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Vg(t,n,e){var r=wg.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Xg(t,n,e){var r=wg.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function $g(t,n){return Tg(t.getDate(),n,2)}function Gg(t,n){return Tg(t.getHours(),n,2)}function Kg(t,n){return Tg(t.getHours()%12||12,n,2)}function Qg(t,n){return Tg(1+eg.Z.count((0,K_.Z)(t),t),n,3)}function Jg(t,n){return Tg(t.getMilliseconds(),n,3)}function tv(t,n){return Jg(t,n)+"000"}function nv(t,n){return Tg(t.getMonth()+1,n,2)}function ev(t,n){return Tg(t.getMinutes(),n,2)}function rv(t,n){return Tg(t.getSeconds(),n,2)}function iv(t){var n=t.getDay();return 0===n?7:n}function ov(t,n){return Tg(ng.OM.count((0,K_.Z)(t)-1,t),n,2)}function av(t){var n=t.getDay();return n>=4||0===n?(0,ng.bL)(t):ng.bL.ceil(t)}function uv(t,n){return t=av(t),Tg(ng.bL.count((0,K_.Z)(t),t)+(4===(0,K_.Z)(t).getDay()),n,2)}function cv(t){return t.getDay()}function fv(t,n){return Tg(ng.wA.count((0,K_.Z)(t)-1,t),n,2)}function sv(t,n){return Tg(t.getFullYear()%100,n,2)}function lv(t,n){return Tg((t=av(t)).getFullYear()%100,n,2)}function hv(t,n){return Tg(t.getFullYear()%1e4,n,4)}function dv(t,n){var e=t.getDay();return Tg((t=e>=4||0===e?(0,ng.bL)(t):ng.bL.ceil(t)).getFullYear()%1e4,n,4)}function pv(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Tg(n/60|0,"0",2)+Tg(n%60,"0",2)}function _v(t,n){return Tg(t.getUTCDate(),n,2)}function gv(t,n){return Tg(t.getUTCHours(),n,2)}function vv(t,n){return Tg(t.getUTCHours()%12||12,n,2)}function yv(t,n){return Tg(1+dg.Z.count((0,pg.Z)(t),t),n,3)}function bv(t,n){return Tg(t.getUTCMilliseconds(),n,3)}function mv(t,n){return bv(t,n)+"000"}function xv(t,n){return Tg(t.getUTCMonth()+1,n,2)}function wv(t,n){return Tg(t.getUTCMinutes(),n,2)}function Mv(t,n){return Tg(t.getUTCSeconds(),n,2)}function Av(t){var n=t.getUTCDay();return 0===n?7:n}function Tv(t,n){return Tg(hg.Ox.count((0,pg.Z)(t)-1,t),n,2)}function kv(t){var n=t.getUTCDay();return n>=4||0===n?(0,hg.hB)(t):hg.hB.ceil(t)}function Sv(t,n){return t=kv(t),Tg(hg.hB.count((0,pg.Z)(t),t)+(4===(0,pg.Z)(t).getUTCDay()),n,2)}function Ev(t){return t.getUTCDay()}function Nv(t,n){return Tg(hg.l6.count((0,pg.Z)(t)-1,t),n,2)}function Cv(t,n){return Tg(t.getUTCFullYear()%100,n,2)}function zv(t,n){return Tg((t=kv(t)).getUTCFullYear()%100,n,2)}function Uv(t,n){return Tg(t.getUTCFullYear()%1e4,n,4)}function Ov(t,n){var e=t.getUTCDay();return Tg((t=e>=4||0===e?(0,hg.hB)(t):hg.hB.ceil(t)).getUTCFullYear()%1e4,n,4)}function Dv(){return"+0000"}function jv(){return"%"}function Rv(t){return+t}function Pv(t){return Math.floor(+t/1e3)}yg=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,c=t.shortMonths,f=Sg(i),s=Eg(i),l=Sg(o),h=Eg(o),d=Sg(a),p=Eg(a),_=Sg(u),g=Eg(u),v=Sg(c),y=Eg(c),b={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:$g,e:$g,f:tv,g:lv,G:dv,H:Gg,I:Kg,j:Qg,L:Jg,m:nv,M:ev,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Rv,s:Pv,S:rv,u:iv,U:ov,V:uv,w:cv,W:fv,x:null,X:null,y:sv,Y:hv,Z:pv,"%":jv},m={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:_v,e:_v,f:mv,g:zv,G:Ov,H:gv,I:vv,j:yv,L:bv,m:xv,M:wv,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Rv,s:Pv,S:Mv,u:Av,U:Tv,V:Sv,w:Ev,W:Nv,x:null,X:null,y:Cv,Y:Uv,Z:Dv,"%":jv},x={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=_.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return A(t,n,e,r)},d:Fg,e:Fg,f:Zg,g:jg,G:Dg,H:Ig,I:Ig,j:Bg,L:Hg,m:Lg,M:qg,p:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.p=s[r[0].toLowerCase()],e+r[0].length):-1},q:Pg,Q:Vg,s:Xg,S:Yg,u:Cg,U:zg,V:Ug,w:Ng,W:Og,x:function(t,n,r){return A(t,e,n,r)},X:function(t,n,e){return A(t,r,n,e)},y:jg,Y:Dg,Z:Rg,"%":Wg};function w(t,n){return function(e){var r,i,o,a=[],u=-1,c=0,f=t.length;for(e instanceof Date||(e=new Date(+e));++u<f;)37===t.charCodeAt(u)&&(a.push(t.slice(c,u)),null!=(i=xg[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),c=u+1);return a.push(t.slice(c,u)),a.join("")}}function M(t,n){return function(e){var r,i,o=vg(1900,void 0,1);if(A(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=gg(vg(o.y,0,1))).getUTCDay(),r=i>4||0===i?hg.l6.ceil(r):(0,hg.l6)(r),r=dg.Z.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=_g(vg(o.y,0,1))).getDay(),r=i>4||0===i?ng.wA.ceil(r):(0,ng.wA)(r),r=eg.Z.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?gg(vg(o.y,0,1)).getUTCDay():_g(vg(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,gg(o)):_g(o)}}function A(t,n,e,r){for(var i,o,a=0,u=n.length,c=e.length;a<u;){if(r>=c)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=x[i in xg?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return b.x=w(e,b),b.X=w(r,b),b.c=w(n,b),m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),{format:function(t){var n=w(t+="",b);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t+="",!0);return n.toString=function(){return t},n}}}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),bg=yg.format,yg.parse,mg=yg.utcFormat,yg.utcParse;var Lv=31536e6;function Fv(t){return new Date(t)}function Bv(t){return t instanceof Date?+t:+new Date(+t)}function Iv(t,n,e,r,i,a,u,c,f){var s=A_(v_,v_),l=s.invert,h=s.domain,d=f(".%L"),p=f(":%S"),_=f("%I:%M"),g=f("%I %p"),v=f("%a %d"),y=f("%b %d"),b=f("%B"),m=f("%Y"),x=[[u,1,1e3],[u,5,5e3],[u,15,15e3],[u,30,3e4],[a,1,6e4],[a,5,3e5],[a,15,9e5],[a,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[e,1,6048e5],[n,1,2592e6],[n,3,7776e6],[t,1,Lv]];function w(o){return(u(o)<o?d:a(o)<o?p:i(o)<o?_:r(o)<o?g:n(o)<o?e(o)<o?v:y:t(o)<o?b:m)(o)}function M(n,e,r,i){if(null==n&&(n=10),"number"==typeof n){var a=Math.abs(r-e)/n,u=o((function(t){return t[2]})).right(x,a);u===x.length?(i=N(e/Lv,r/Lv,n),n=t):u?(i=(u=x[a/x[u-1][2]<x[u][2]/a?u-1:u])[1],n=u[0]):(i=Math.max(N(e,r,n),1),n=c)}return null==i?n:n.every(i)}return s.invert=function(t){return new Date(l(t))},s.domain=function(t){return arguments.length?h(c_.call(t,Bv)):h().map(Fv)},s.ticks=function(t,n){var e,r=h(),i=r[0],o=r[r.length-1],a=o<i;return a&&(e=i,i=o,o=e),e=(e=M(t,i,o,n))?e.range(i,o+1):[],a?e.reverse():e},s.tickFormat=function(t,n){return null==n?w:f(n)},s.nice=function(t,n){var e=h();return(t=M(t,e[0],e[e.length-1],n))?h(N_(e,t)):s},s.copy=function(){return w_(s,Iv(t,n,e,r,i,a,u,c,f))},s}function qv(){return o_.apply(Iv(K_.Z,tg,ng.OM,eg.Z,og,ug,fg,lg,bg).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}var Yv=(0,Q_.Z)((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));const Hv=Yv;Yv.range;var Zv=(0,Q_.Z)((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+n*rg.Y2)}),(function(t,n){return(n-t)/rg.Y2}),(function(t){return t.getUTCHours()}));const Wv=Zv;Zv.range;var Vv=(0,Q_.Z)((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+n*rg.yB)}),(function(t,n){return(n-t)/rg.yB}),(function(t){return t.getUTCMinutes()}));const Xv=Vv;function $v(){return o_.apply(Iv(pg.Z,Hv,hg.Ox,dg.Z,Wv,Xv,fg,lg,mg).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}function Gv(){var t,n,e,r,i,o=0,a=1,u=v_,c=!1;function f(n){return isNaN(n=+n)?i:u(0===e?.5:(n=(r(n)-t)*e,c?Math.max(0,Math.min(1,n)):n))}return f.domain=function(i){return arguments.length?(t=r(o=+i[0]),n=r(a=+i[1]),e=t===n?0:1/(n-t),f):[o,a]},f.clamp=function(t){return arguments.length?(c=!!t,f):c},f.interpolator=function(t){return arguments.length?(u=t,f):u},f.unknown=function(t){return arguments.length?(i=t,f):i},function(i){return r=i,t=i(o),n=i(a),e=t===n?0:1/(n-t),f}}function Kv(t,n){return n.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function Qv(){var t=k_(Gv()(v_));return t.copy=function(){return Kv(t,Qv())},a_.apply(t,arguments)}function Jv(){var t=R_(Gv()).domain([1,10]);return t.copy=function(){return Kv(t,Jv()).base(t.base())},a_.apply(t,arguments)}function ty(){var t=B_(Gv());return t.copy=function(){return Kv(t,ty()).constant(t.constant())},a_.apply(t,arguments)}function ny(){var t=Z_(Gv());return t.copy=function(){return Kv(t,ny()).exponent(t.exponent())},a_.apply(t,arguments)}function ey(){return ny.apply(null,arguments).exponent(.5)}function ry(){var t=[],n=v_;function e(e){if(!isNaN(e=+e))return n((f(t,e)-1)/(t.length-1))}return e.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var r,o=0,a=n.length;o<a;++o)null==(r=n[o])||isNaN(r=+r)||t.push(r);return t.sort(i),e},e.interpolator=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return ry(n).domain(t)},a_.apply(e,arguments)}function iy(){var t,n,e,r,i,o,a,u=0,c=.5,f=1,s=v_,l=!1;function h(t){return isNaN(t=+t)?a:(t=.5+((t=+o(t))-n)*(t<n?r:i),s(l?Math.max(0,Math.min(1,t)):t))}return h.domain=function(a){return arguments.length?(t=o(u=+a[0]),n=o(c=+a[1]),e=o(f=+a[2]),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h):[u,c,f]},h.clamp=function(t){return arguments.length?(l=!!t,h):l},h.interpolator=function(t){return arguments.length?(s=t,h):s},h.unknown=function(t){return arguments.length?(a=t,h):a},function(a){return o=a,t=a(u),n=a(c),e=a(f),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h}}function oy(){var t=k_(iy()(v_));return t.copy=function(){return Kv(t,oy())},a_.apply(t,arguments)}function ay(){var t=R_(iy()).domain([.1,1,10]);return t.copy=function(){return Kv(t,ay()).base(t.base())},a_.apply(t,arguments)}function uy(){var t=B_(iy());return t.copy=function(){return Kv(t,uy()).constant(t.constant())},a_.apply(t,arguments)}function cy(){var t=Z_(iy());return t.copy=function(){return Kv(t,cy()).exponent(t.exponent())},a_.apply(t,arguments)}function fy(){return cy.apply(null,arguments).exponent(.5)}function sy(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e}Vv.range;const ly=sy("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),hy=sy("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),dy=sy("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),py=sy("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),_y=sy("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),gy=sy("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),vy=sy("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),yy=sy("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),by=sy("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),my=sy("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");function xy(t){return ve(t[t.length-1])}var wy=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(sy);const My=xy(wy);var Ay=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(sy);const Ty=xy(Ay);var ky=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(sy);const Sy=xy(ky);var Ey=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(sy);const Ny=xy(Ey);var Cy=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(sy);const zy=xy(Cy);var Uy=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(sy);const Oy=xy(Uy);var Dy=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(sy);const jy=xy(Dy);var Ry=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(sy);const Py=xy(Ry);var Ly=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(sy);const Fy=xy(Ly);var By=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(sy);const Iy=xy(By);var qy=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(sy);const Yy=xy(qy);var Hy=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(sy);const Zy=xy(Hy);var Wy=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(sy);const Vy=xy(Wy);var Xy=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(sy);const $y=xy(Xy);var Gy=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(sy);const Ky=xy(Gy);var Qy=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(sy);const Jy=xy(Qy);var tb=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(sy);const nb=xy(tb);var eb=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(sy);const rb=xy(eb);var ib=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(sy);const ob=xy(ib);var ab=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(sy);const ub=xy(ab);var cb=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(sy);const fb=xy(cb);var sb=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(sy);const lb=xy(sb);var hb=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(sy);const db=xy(hb);var pb=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(sy);const _b=xy(pb);var gb=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(sy);const vb=xy(gb);var yb=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(sy);const bb=xy(yb);var mb=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(sy);const xb=xy(mb);function wb(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-t*(35.34-t*(2381.73-t*(6402.7-t*(7024.72-2710.57*t)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+t*(170.73+t*(52.82-t*(131.46-t*(176.58-67.37*t)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+t*(442.36-t*(2482.43-t*(6167.24-t*(6614.94-2475.67*t)))))))+")"}const Mb=Ip(Zo(300,.5,0),Zo(-240,.5,1));var Ab=Ip(Zo(-100,.75,.35),Zo(80,1.5,.8)),Tb=Ip(Zo(260,.75,.35),Zo(80,1.5,.8)),kb=Zo();function Sb(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return kb.h=360*t-100,kb.s=1.5-1.5*n,kb.l=.8-.9*n,kb+""}var Eb=Qn(),Nb=Math.PI/3,Cb=2*Math.PI/3;function zb(t){var n;return t=(.5-t)*Math.PI,Eb.r=255*(n=Math.sin(t))*n,Eb.g=255*(n=Math.sin(t+Nb))*n,Eb.b=255*(n=Math.sin(t+Cb))*n,Eb+""}function Ub(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+t*(1172.33-t*(10793.56-t*(33300.12-t*(38394.49-14825.05*t)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+t*(557.33+t*(1225.33-t*(3574.96-t*(1073.77+707.56*t)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+t*(3211.1-t*(15327.97-t*(27814-t*(22569.18-6838.66*t)))))))+")"}function Ob(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}const Db=Ob(sy("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var jb=Ob(sy("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Rb=Ob(sy("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Pb=Ob(sy("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function Lb(t){return Tn(on(t).call(document.documentElement))}var Fb=0;function Bb(){return new Ib}function Ib(){this._="@"+(++Fb).toString(36)}function qb(t){return"string"==typeof t?new wn([document.querySelectorAll(t)],[document.documentElement]):new wn([null==t?[]:t],xn)}function Yb(t,n){null==n&&(n=Ce().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=ze(t,n[e]);return i}function Hb(t){return function(){return t}}Ib.prototype=Bb.prototype={constructor:Ib,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var Zb=Math.abs,Wb=Math.atan2,Vb=Math.cos,Xb=Math.max,$b=Math.min,Gb=Math.sin,Kb=Math.sqrt,Qb=1e-12,Jb=Math.PI,tm=Jb/2,nm=2*Jb;function em(t){return t>1?0:t<-1?Jb:Math.acos(t)}function rm(t){return t>=1?tm:t<=-1?-tm:Math.asin(t)}function im(t){return t.innerRadius}function om(t){return t.outerRadius}function am(t){return t.startAngle}function um(t){return t.endAngle}function cm(t){return t&&t.padAngle}function fm(t,n,e,r,i,o,a,u){var c=e-t,f=r-n,s=a-i,l=u-o,h=l*c-s*f;if(!(h*h<Qb))return[t+(h=(s*(n-o)-l*(t-i))/h)*c,n+h*f]}function sm(t,n,e,r,i,o,a){var u=t-e,c=n-r,f=(a?o:-o)/Kb(u*u+c*c),s=f*c,l=-f*u,h=t+s,d=n+l,p=e+s,_=r+l,g=(h+p)/2,v=(d+_)/2,y=p-h,b=_-d,m=y*y+b*b,x=i-o,w=h*_-p*d,M=(b<0?-1:1)*Kb(Xb(0,x*x*m-w*w)),A=(w*b-y*M)/m,T=(-w*y-b*M)/m,k=(w*b+y*M)/m,S=(-w*y+b*M)/m,E=A-g,N=T-v,C=k-g,z=S-v;return E*E+N*N>C*C+z*z&&(A=k,T=S),{cx:A,cy:T,x01:-s,y01:-l,x11:A*(i/x-1),y11:T*(i/x-1)}}function lm(){var t=im,n=om,e=Hb(0),r=null,i=am,o=um,a=cm,u=null;function c(){var c,f,s=+t.apply(this,arguments),l=+n.apply(this,arguments),h=i.apply(this,arguments)-tm,d=o.apply(this,arguments)-tm,p=Zb(d-h),_=d>h;if(u||(u=c=Wi()),l<s&&(f=l,l=s,s=f),l>Qb)if(p>nm-Qb)u.moveTo(l*Vb(h),l*Gb(h)),u.arc(0,0,l,h,d,!_),s>Qb&&(u.moveTo(s*Vb(d),s*Gb(d)),u.arc(0,0,s,d,h,_));else{var g,v,y=h,b=d,m=h,x=d,w=p,M=p,A=a.apply(this,arguments)/2,T=A>Qb&&(r?+r.apply(this,arguments):Kb(s*s+l*l)),k=$b(Zb(l-s)/2,+e.apply(this,arguments)),S=k,E=k;if(T>Qb){var N=rm(T/s*Gb(A)),C=rm(T/l*Gb(A));(w-=2*N)>Qb?(m+=N*=_?1:-1,x-=N):(w=0,m=x=(h+d)/2),(M-=2*C)>Qb?(y+=C*=_?1:-1,b-=C):(M=0,y=b=(h+d)/2)}var z=l*Vb(y),U=l*Gb(y),O=s*Vb(x),D=s*Gb(x);if(k>Qb){var j,R=l*Vb(b),P=l*Gb(b),L=s*Vb(m),F=s*Gb(m);if(p<Jb&&(j=fm(z,U,L,F,R,P,O,D))){var B=z-j[0],I=U-j[1],q=R-j[0],Y=P-j[1],H=1/Gb(em((B*q+I*Y)/(Kb(B*B+I*I)*Kb(q*q+Y*Y)))/2),Z=Kb(j[0]*j[0]+j[1]*j[1]);S=$b(k,(s-Z)/(H-1)),E=$b(k,(l-Z)/(H+1))}}M>Qb?E>Qb?(g=sm(L,F,z,U,l,E,_),v=sm(R,P,O,D,l,E,_),u.moveTo(g.cx+g.x01,g.cy+g.y01),E<k?u.arc(g.cx,g.cy,E,Wb(g.y01,g.x01),Wb(v.y01,v.x01),!_):(u.arc(g.cx,g.cy,E,Wb(g.y01,g.x01),Wb(g.y11,g.x11),!_),u.arc(0,0,l,Wb(g.cy+g.y11,g.cx+g.x11),Wb(v.cy+v.y11,v.cx+v.x11),!_),u.arc(v.cx,v.cy,E,Wb(v.y11,v.x11),Wb(v.y01,v.x01),!_))):(u.moveTo(z,U),u.arc(0,0,l,y,b,!_)):u.moveTo(z,U),s>Qb&&w>Qb?S>Qb?(g=sm(O,D,R,P,s,-S,_),v=sm(z,U,L,F,s,-S,_),u.lineTo(g.cx+g.x01,g.cy+g.y01),S<k?u.arc(g.cx,g.cy,S,Wb(g.y01,g.x01),Wb(v.y01,v.x01),!_):(u.arc(g.cx,g.cy,S,Wb(g.y01,g.x01),Wb(g.y11,g.x11),!_),u.arc(0,0,s,Wb(g.cy+g.y11,g.cx+g.x11),Wb(v.cy+v.y11,v.cx+v.x11),_),u.arc(v.cx,v.cy,S,Wb(v.y11,v.x11),Wb(v.y01,v.x01),!_))):u.arc(0,0,s,x,m,_):u.lineTo(O,D)}else u.moveTo(0,0);if(u.closePath(),c)return u=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-Jb/2;return[Vb(r)*e,Gb(r)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:Hb(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Hb(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Hb(+t),c):e},c.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Hb(+t),c):r},c.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:Hb(+t),c):i},c.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Hb(+t),c):o},c.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:Hb(+t),c):a},c.context=function(t){return arguments.length?(u=null==t?null:t,c):u},c}function hm(t){this._context=t}function dm(t){return new hm(t)}function pm(t){return t[0]}function _m(t){return t[1]}function gm(){var t=pm,n=_m,e=Hb(!0),r=null,i=dm,o=null;function a(a){var u,c,f,s=a.length,l=!1;for(null==r&&(o=i(f=Wi())),u=0;u<=s;++u)!(u<s&&e(c=a[u],u,a))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(c,u,a),+n(c,u,a));if(f)return o=null,f+""||null}return a.x=function(n){return arguments.length?(t="function"==typeof n?n:Hb(+n),a):t},a.y=function(t){return arguments.length?(n="function"==typeof t?t:Hb(+t),a):n},a.defined=function(t){return arguments.length?(e="function"==typeof t?t:Hb(!!t),a):e},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}function vm(){var t=pm,n=null,e=Hb(0),r=_m,i=Hb(!0),o=null,a=dm,u=null;function c(c){var f,s,l,h,d,p=c.length,_=!1,g=new Array(p),v=new Array(p);for(null==o&&(u=a(d=Wi())),f=0;f<=p;++f){if(!(f<p&&i(h=c[f],f,c))===_)if(_=!_)s=f,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),l=f-1;l>=s;--l)u.point(g[l],v[l]);u.lineEnd(),u.areaEnd()}_&&(g[f]=+t(h,f,c),v[f]=+e(h,f,c),u.point(n?+n(h,f,c):g[f],r?+r(h,f,c):v[f]))}if(d)return u=null,d+""||null}function f(){return gm().defined(i).curve(a).context(o)}return c.x=function(e){return arguments.length?(t="function"==typeof e?e:Hb(+e),n=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:Hb(+n),c):t},c.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:Hb(+t),c):n},c.y=function(t){return arguments.length?(e="function"==typeof t?t:Hb(+t),r=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:Hb(+t),c):e},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Hb(+t),c):r},c.lineX0=c.lineY0=function(){return f().x(t).y(e)},c.lineY1=function(){return f().x(t).y(r)},c.lineX1=function(){return f().x(n).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:Hb(!!t),c):i},c.curve=function(t){return arguments.length?(a=t,null!=o&&(u=a(o)),c):a},c.context=function(t){return arguments.length?(null==t?o=u=null:u=a(o=t),c):o},c}function ym(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function bm(t){return t}function mm(){var t=bm,n=ym,e=null,r=Hb(0),i=Hb(nm),o=Hb(0);function a(a){var u,c,f,s,l,h=a.length,d=0,p=new Array(h),_=new Array(h),g=+r.apply(this,arguments),v=Math.min(nm,Math.max(-nm,i.apply(this,arguments)-g)),y=Math.min(Math.abs(v)/h,o.apply(this,arguments)),b=y*(v<0?-1:1);for(u=0;u<h;++u)(l=_[p[u]=u]=+t(a[u],u,a))>0&&(d+=l);for(null!=n?p.sort((function(t,e){return n(_[t],_[e])})):null!=e&&p.sort((function(t,n){return e(a[t],a[n])})),u=0,f=d?(v-h*b)/d:0;u<h;++u,g=s)c=p[u],s=g+((l=_[c])>0?l*f:0)+b,_[c]={data:a[c],index:u,value:l,startAngle:g,endAngle:s,padAngle:y};return _}return a.value=function(n){return arguments.length?(t="function"==typeof n?n:Hb(+n),a):t},a.sortValues=function(t){return arguments.length?(n=t,e=null,a):n},a.sort=function(t){return arguments.length?(e=t,n=null,a):e},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Hb(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Hb(+t),a):i},a.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:Hb(+t),a):o},a}hm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var xm=Mm(dm);function wm(t){this._curve=t}function Mm(t){function n(n){return new wm(t(n))}return n._curve=t,n}function Am(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(Mm(t)):n()._curve},t}function Tm(){return Am(gm().curve(xm))}function km(){var t=vm().curve(xm),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return Am(e())},delete t.lineX0,t.lineEndAngle=function(){return Am(r())},delete t.lineX1,t.lineInnerRadius=function(){return Am(i())},delete t.lineY0,t.lineOuterRadius=function(){return Am(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(Mm(t)):n()._curve},t}function Sm(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]}wm.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var Em=Array.prototype.slice;function Nm(t){return t.source}function Cm(t){return t.target}function zm(t){var n=Nm,e=Cm,r=pm,i=_m,o=null;function a(){var a,u=Em.call(arguments),c=n.apply(this,u),f=e.apply(this,u);if(o||(o=a=Wi()),t(o,+r.apply(this,(u[0]=c,u)),+i.apply(this,u),+r.apply(this,(u[0]=f,u)),+i.apply(this,u)),a)return o=null,a+""||null}return a.source=function(t){return arguments.length?(n=t,a):n},a.target=function(t){return arguments.length?(e=t,a):e},a.x=function(t){return arguments.length?(r="function"==typeof t?t:Hb(+t),a):r},a.y=function(t){return arguments.length?(i="function"==typeof t?t:Hb(+t),a):i},a.context=function(t){return arguments.length?(o=null==t?null:t,a):o},a}function Um(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function Om(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function Dm(t,n,e,r,i){var o=Sm(n,e),a=Sm(n,e=(e+i)/2),u=Sm(r,e),c=Sm(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(a[0],a[1],u[0],u[1],c[0],c[1])}function jm(){return zm(Um)}function Rm(){return zm(Om)}function Pm(){var t=zm(Dm);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}const Lm={draw:function(t,n){var e=Math.sqrt(n/Jb);t.moveTo(e,0),t.arc(0,0,e,0,nm)}},Fm={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}};var Bm=Math.sqrt(1/3),Im=2*Bm;const qm={draw:function(t,n){var e=Math.sqrt(n/Im),r=e*Bm;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}};var Ym=Math.sin(Jb/10)/Math.sin(7*Jb/10),Hm=Math.sin(nm/10)*Ym,Zm=-Math.cos(nm/10)*Ym;const Wm={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=Hm*e,i=Zm*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var a=nm*o/5,u=Math.cos(a),c=Math.sin(a);t.lineTo(c*e,-u*e),t.lineTo(u*r-c*i,c*r+u*i)}t.closePath()}},Vm={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}};var Xm=Math.sqrt(3);const $m={draw:function(t,n){var e=-Math.sqrt(n/(3*Xm));t.moveTo(0,2*e),t.lineTo(-Xm*e,-e),t.lineTo(Xm*e,-e),t.closePath()}};var Gm=-.5,Km=Math.sqrt(3)/2,Qm=1/Math.sqrt(12),Jm=3*(Qm/2+1);const tx={draw:function(t,n){var e=Math.sqrt(n/Jm),r=e/2,i=e*Qm,o=r,a=e*Qm+e,u=-o,c=a;t.moveTo(r,i),t.lineTo(o,a),t.lineTo(u,c),t.lineTo(Gm*r-Km*i,Km*r+Gm*i),t.lineTo(Gm*o-Km*a,Km*o+Gm*a),t.lineTo(Gm*u-Km*c,Km*u+Gm*c),t.lineTo(Gm*r+Km*i,Gm*i-Km*r),t.lineTo(Gm*o+Km*a,Gm*a-Km*o),t.lineTo(Gm*u+Km*c,Gm*c-Km*u),t.closePath()}};var nx=[Lm,Fm,qm,Vm,Wm,$m,tx];function ex(){var t=Hb(Lm),n=Hb(64),e=null;function r(){var r;if(e||(e=r=Wi()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:Hb(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:Hb(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r}function rx(){}function ix(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function ox(t){this._context=t}function ax(t){return new ox(t)}function ux(t){this._context=t}function cx(t){return new ux(t)}function fx(t){this._context=t}function sx(t){return new fx(t)}function lx(t,n){this._basis=new ox(t),this._beta=n}ox.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:ix(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:ix(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},ux.prototype={areaStart:rx,areaEnd:rx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:ix(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},fx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:ix(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},lx.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],a=t[e]-i,u=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*a),this._beta*n[c]+(1-this._beta)*(o+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};const hx=function t(n){function e(t){return 1===n?new ox(t):new lx(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function dx(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function px(t,n){this._context=t,this._k=(1-n)/6}px.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:dx(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:dx(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const _x=function t(n){function e(t){return new px(t,n)}return e.tension=function(n){return t(+n)},e}(0);function gx(t,n){this._context=t,this._k=(1-n)/6}gx.prototype={areaStart:rx,areaEnd:rx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:dx(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const vx=function t(n){function e(t){return new gx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function yx(t,n){this._context=t,this._k=(1-n)/6}yx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:dx(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const bx=function t(n){function e(t){return new yx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function mx(t,n,e){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>Qb){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>Qb){var f=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*f+t._x1*t._l23_2a-n*t._l12_2a)/s,a=(a*f+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function xx(t,n){this._context=t,this._alpha=n}xx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:mx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const wx=function t(n){function e(t){return n?new xx(t,n):new px(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Mx(t,n){this._context=t,this._alpha=n}Mx.prototype={areaStart:rx,areaEnd:rx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:mx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const Ax=function t(n){function e(t){return n?new Mx(t,n):new gx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Tx(t,n){this._context=t,this._alpha=n}Tx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:mx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const kx=function t(n){function e(t){return n?new Tx(t,n):new yx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Sx(t){this._context=t}function Ex(t){return new Sx(t)}function Nx(t){return t<0?-1:1}function Cx(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),u=(o*i+a*r)/(r+i);return(Nx(o)+Nx(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function zx(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Ux(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,u=(o-r)/3;t._context.bezierCurveTo(r+u,i+u*n,o-u,a-u*e,o,a)}function Ox(t){this._context=t}function Dx(t){this._context=new jx(t)}function jx(t){this._context=t}function Rx(t){return new Ox(t)}function Px(t){return new Dx(t)}function Lx(t){this._context=t}function Fx(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,a[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,a[n]-=e*a[n-1];for(i[r-1]=a[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(a[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}function Bx(t){return new Lx(t)}function Ix(t,n){this._context=t,this._t=n}function qx(t){return new Ix(t,.5)}function Yx(t){return new Ix(t,0)}function Hx(t){return new Ix(t,1)}function Zx(t,n){if((i=t.length)>1)for(var e,r,i,o=1,a=t[n[0]],u=a.length;o<i;++o)for(r=a,a=t[n[o]],e=0;e<u;++e)a[e][1]+=a[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]}function Wx(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e}function Vx(t,n){return t[n]}function Xx(){var t=Hb([]),n=Wx,e=Zx,r=Vx;function i(i){var o,a,u=t.apply(this,arguments),c=i.length,f=u.length,s=new Array(f);for(o=0;o<f;++o){for(var l,h=u[o],d=s[o]=new Array(c),p=0;p<c;++p)d[p]=l=[0,+r(i[p],h,p,i)],l.data=i[p];d.key=h}for(o=0,a=n(s);o<f;++o)s[a[o]].index=o;return e(s,a),s}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:Hb(Em.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:Hb(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?Wx:"function"==typeof t?t:Hb(Em.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?Zx:t,i):e},i}function $x(t,n){if((r=t.length)>0){for(var e,r,i,o=0,a=t[0].length;o<a;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}Zx(t,n)}}function Gx(t,n){if((u=t.length)>0)for(var e,r,i,o,a,u,c=0,f=t[n[0]].length;c<f;++c)for(o=a=0,e=0;e<u;++e)(i=(r=t[n[e]][c])[1]-r[0])>0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=a,r[0]=a+=i):(r[0]=0,r[1]=i)}function Kx(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var a=0,u=0;a<e;++a)u+=t[a][r][1]||0;i[r][1]+=i[r][0]=-u/2}Zx(t,n)}}function Qx(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,a=1;a<r;++a){for(var u=0,c=0,f=0;u<i;++u){for(var s=t[n[u]],l=s[a][1]||0,h=(l-(s[a-1][1]||0))/2,d=0;d<u;++d){var p=t[n[d]];h+=(p[a][1]||0)-(p[a-1][1]||0)}c+=l,f+=h*l}e[a-1][1]+=e[a-1][0]=o,c&&(o-=f/c)}e[a-1][1]+=e[a-1][0]=o,Zx(t,n)}}function Jx(t){var n=t.map(tw);return Wx(t).sort((function(t,e){return n[t]-n[e]}))}function tw(t){for(var n,e=-1,r=0,i=t.length,o=-1/0;++e<i;)(n=+t[e][1])>o&&(o=n,r=e);return r}function nw(t){var n=t.map(ew);return Wx(t).sort((function(t,e){return n[t]-n[e]}))}function ew(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}function rw(t){return nw(t).reverse()}function iw(t){var n,e,r=t.length,i=t.map(ew),o=Jx(t),a=0,u=0,c=[],f=[];for(n=0;n<r;++n)e=o[n],a<u?(a+=i[e],c.push(e)):(u+=i[e],f.push(e));return f.reverse().concat(c)}function ow(t){return Wx(t).reverse()}Sx.prototype={areaStart:rx,areaEnd:rx,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}},Ox.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Ux(this,this._t0,zx(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Ux(this,zx(this,e=Cx(this,t,n)),e);break;default:Ux(this,this._t0,e=Cx(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Dx.prototype=Object.create(Ox.prototype)).point=function(t,n){Ox.prototype.point.call(this,n,t)},jx.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},Lx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=Fx(t),i=Fx(n),o=0,a=1;a<e;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],n[a]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}},Ix.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var aw=new Date,uw=new Date;function cw(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return u},i.filter=function(e){return cw((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return aw.setTime(+n),uw.setTime(+r),t(aw),t(uw),Math.floor(e(aw,uw))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var fw=cw((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));fw.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?cw((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):fw:null};const sw=fw;var lw=fw.range,hw=1e3,dw=6e4,pw=36e5,_w=864e5,gw=6048e5,vw=cw((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+n*hw)}),(function(t,n){return(n-t)/hw}),(function(t){return t.getUTCSeconds()}));const yw=vw;var bw=vw.range,mw=cw((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*hw)}),(function(t,n){t.setTime(+t+n*dw)}),(function(t,n){return(n-t)/dw}),(function(t){return t.getMinutes()}));const xw=mw;var ww=mw.range,Mw=cw((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*hw-t.getMinutes()*dw)}),(function(t,n){t.setTime(+t+n*pw)}),(function(t,n){return(n-t)/pw}),(function(t){return t.getHours()}));const Aw=Mw;var Tw=Mw.range,kw=cw((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*dw)/_w}),(function(t){return t.getDate()-1}));const Sw=kw;var Ew=kw.range;function Nw(t){return cw((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*dw)/gw}))}var Cw=Nw(0),zw=Nw(1),Uw=Nw(2),Ow=Nw(3),Dw=Nw(4),jw=Nw(5),Rw=Nw(6),Pw=Cw.range,Lw=zw.range,Fw=Uw.range,Bw=Ow.range,Iw=Dw.range,qw=jw.range,Yw=Rw.range,Hw=cw((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}));const Zw=Hw;var Ww=Hw.range,Vw=cw((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Vw.every=function(t){return isFinite(t=Math.floor(t))&&t>0?cw((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};const Xw=Vw;var $w=Vw.range,Gw=cw((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+n*dw)}),(function(t,n){return(n-t)/dw}),(function(t){return t.getUTCMinutes()}));const Kw=Gw;var Qw=Gw.range,Jw=cw((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+n*pw)}),(function(t,n){return(n-t)/pw}),(function(t){return t.getUTCHours()}));const tM=Jw;var nM=Jw.range,eM=cw((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/_w}),(function(t){return t.getUTCDate()-1}));const rM=eM;var iM=eM.range;function oM(t){return cw((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/gw}))}var aM=oM(0),uM=oM(1),cM=oM(2),fM=oM(3),sM=oM(4),lM=oM(5),hM=oM(6),dM=aM.range,pM=uM.range,_M=cM.range,gM=fM.range,vM=sM.range,yM=lM.range,bM=hM.range,mM=cw((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));const xM=mM;var wM=mM.range,MM=cw((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));MM.every=function(t){return isFinite(t=Math.floor(t))&&t>0?cw((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};const AM=MM;var TM=MM.range,kM=e(269);function SM(t,n,e){var r=new We,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?He():+e,r.restart((function o(a){a+=i,r.restart(o,i+=n,e),t(a)}),n,e),r)}function EM(t){return function(){return t}}function NM(t){return t[0]}function CM(t){return t[1]}function zM(){this._=null}function UM(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function OM(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function DM(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function jM(t){for(;t.L;)t=t.L;return t}zM.prototype={constructor:zM,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=jM(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(OM(this,e),e=(t=e).U),e.C=!1,r.C=!0,DM(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(DM(this,e),e=(t=e).U),e.C=!1,r.C=!0,OM(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,a=t.R;if(e=o?a?jM(a):o:a,i?i.L===t?i.L=e:i.R=e:this._=e,o&&a?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==a?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=a,a.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,OM(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,DM(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,OM(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,DM(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,OM(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,DM(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};const RM=zM;function PM(t,n,e,r){var i=[null,null],o=uA.push(i)-1;return i.left=t,i.right=n,e&&FM(i,t,n,e),r&&FM(i,n,t,r),oA[t.index].halfedges.push(o),oA[n.index].halfedges.push(o),i}function LM(t,n,e){var r=[n,e];return r.left=t,r}function FM(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function BM(t,n,e,r,i){var o,a=t[0],u=t[1],c=a[0],f=a[1],s=0,l=1,h=u[0]-c,d=u[1]-f;if(o=n-c,h||!(o>0)){if(o/=h,h<0){if(o<s)return;o<l&&(l=o)}else if(h>0){if(o>l)return;o>s&&(s=o)}if(o=r-c,h||!(o<0)){if(o/=h,h<0){if(o>l)return;o>s&&(s=o)}else if(h>0){if(o<s)return;o<l&&(l=o)}if(o=e-f,d||!(o>0)){if(o/=d,d<0){if(o<s)return;o<l&&(l=o)}else if(d>0){if(o>l)return;o>s&&(s=o)}if(o=i-f,d||!(o<0)){if(o/=d,d<0){if(o>l)return;o>s&&(s=o)}else if(d>0){if(o<s)return;o<l&&(l=o)}return!(s>0||l<1)||(s>0&&(t[0]=[c+s*h,f+s*d]),l<1&&(t[1]=[c+l*h,f+l*d]),!0)}}}}}function IM(t,n,e,r,i){var o=t[1];if(o)return!0;var a,u,c=t[0],f=t.left,s=t.right,l=f[0],h=f[1],d=s[0],p=s[1],_=(l+d)/2,g=(h+p)/2;if(p===h){if(_<n||_>=r)return;if(l>d){if(c){if(c[1]>=i)return}else c=[_,e];o=[_,i]}else{if(c){if(c[1]<e)return}else c=[_,i];o=[_,e]}}else if(u=g-(a=(l-d)/(p-h))*_,a<-1||a>1)if(l>d){if(c){if(c[1]>=i)return}else c=[(e-u)/a,e];o=[(i-u)/a,i]}else{if(c){if(c[1]<e)return}else c=[(i-u)/a,i];o=[(e-u)/a,e]}else if(h<p){if(c){if(c[0]>=r)return}else c=[n,a*n+u];o=[r,a*r+u]}else{if(c){if(c[0]<n)return}else c=[r,a*r+u];o=[n,a*n+u]}return t[0]=c,t[1]=o,!0}function qM(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function YM(t,n){return n[+(n.left!==t.site)]}function HM(t,n){return n[+(n.left===t.site)]}var ZM,WM=[];function VM(){UM(this),this.x=this.y=this.arc=this.site=this.cy=null}function XM(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var a=i[0],u=i[1],c=r[0]-a,f=r[1]-u,s=o[0]-a,l=o[1]-u,h=2*(c*l-f*s);if(!(h>=-fA)){var d=c*c+f*f,p=s*s+l*l,_=(l*d-f*p)/h,g=(c*p-s*d)/h,v=WM.pop()||new VM;v.arc=t,v.site=i,v.x=_+a,v.y=(v.cy=g+u)+Math.sqrt(_*_+g*g),t.circle=v;for(var y=null,b=aA._;b;)if(v.y<b.y||v.y===b.y&&v.x<=b.x){if(!b.L){y=b.P;break}b=b.L}else{if(!b.R){y=b;break}b=b.R}aA.insert(y,v),y||(ZM=v)}}}}function $M(t){var n=t.circle;n&&(n.P||(ZM=n.N),aA.remove(n),WM.push(n),UM(n),t.circle=null)}var GM=[];function KM(){UM(this),this.edge=this.site=this.circle=null}function QM(t){var n=GM.pop()||new KM;return n.site=t,n}function JM(t){$M(t),iA.remove(t),GM.push(t),UM(t)}function tA(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,a=t.N,u=[t];JM(t);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<cA&&Math.abs(r-c.circle.cy)<cA;)o=c.P,u.unshift(c),JM(c),c=o;u.unshift(c),$M(c);for(var f=a;f.circle&&Math.abs(e-f.circle.x)<cA&&Math.abs(r-f.circle.cy)<cA;)a=f.N,u.push(f),JM(f),f=a;u.push(f),$M(f);var s,l=u.length;for(s=1;s<l;++s)f=u[s],c=u[s-1],FM(f.edge,c.site,f.site,i);c=u[0],(f=u[l-1]).edge=PM(c.site,f.site,null,i),XM(c),XM(f)}function nA(t){for(var n,e,r,i,o=t[0],a=t[1],u=iA._;u;)if((r=eA(u,a)-o)>cA)u=u.L;else{if(!((i=o-rA(u,a))>cA)){r>-cA?(n=u.P,e=u):i>-cA?(n=u,e=u.N):n=e=u;break}if(!u.R){n=u;break}u=u.R}!function(t){oA[t.index]={site:t,halfedges:[]}}(t);var c=QM(t);if(iA.insert(n,c),n||e){if(n===e)return $M(n),e=QM(n.site),iA.insert(c,e),c.edge=e.edge=PM(n.site,c.site),XM(n),void XM(e);if(e){$M(n),$M(e);var f=n.site,s=f[0],l=f[1],h=t[0]-s,d=t[1]-l,p=e.site,_=p[0]-s,g=p[1]-l,v=2*(h*g-d*_),y=h*h+d*d,b=_*_+g*g,m=[(g*y-d*b)/v+s,(h*b-_*y)/v+l];FM(e.edge,f,p,m),c.edge=PM(f,t,null,m),e.edge=PM(t,p,null,m),XM(n),XM(e)}else c.edge=PM(n.site,c.site)}}function eA(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var a=t.P;if(!a)return-1/0;var u=(e=a.site)[0],c=e[1],f=c-n;if(!f)return u;var s=u-r,l=1/o-1/f,h=s/f;return l?(-h+Math.sqrt(h*h-2*l*(s*s/(-2*f)-c+f/2+i-o/2)))/l+r:(r+u)/2}function rA(t,n){var e=t.N;if(e)return eA(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var iA,oA,aA,uA,cA=1e-6,fA=1e-12;function sA(t,n,e){return(t[0]-e[0])*(n[1]-t[1])-(t[0]-n[0])*(e[1]-t[1])}function lA(t,n){return n[1]-t[1]||n[0]-t[0]}function hA(t,n){var e,r,i,o=t.sort(lA).pop();for(uA=[],oA=new Array(t.length),iA=new RM,aA=new RM;;)if(i=ZM,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(nA(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;tA(i.arc)}if(function(){for(var t,n,e,r,i=0,o=oA.length;i<o;++i)if((t=oA[i])&&(r=(n=t.halfedges).length)){var a=new Array(r),u=new Array(r);for(e=0;e<r;++e)a[e]=e,u[e]=qM(t,uA[n[e]]);for(a.sort((function(t,n){return u[n]-u[t]})),e=0;e<r;++e)u[e]=n[a[e]];for(e=0;e<r;++e)n[e]=u[e]}}(),n){var a=+n[0][0],u=+n[0][1],c=+n[1][0],f=+n[1][1];!function(t,n,e,r){for(var i,o=uA.length;o--;)IM(i=uA[o],t,n,e,r)&&BM(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>cA||Math.abs(i[0][1]-i[1][1])>cA)||delete uA[o]}(a,u,c,f),function(t,n,e,r){var i,o,a,u,c,f,s,l,h,d,p,_,g=oA.length,v=!0;for(i=0;i<g;++i)if(o=oA[i]){for(a=o.site,u=(c=o.halfedges).length;u--;)uA[c[u]]||c.splice(u,1);for(u=0,f=c.length;u<f;)p=(d=HM(o,uA[c[u]]))[0],_=d[1],l=(s=YM(o,uA[c[++u%f]]))[0],h=s[1],(Math.abs(p-l)>cA||Math.abs(_-h)>cA)&&(c.splice(u,0,uA.push(LM(a,d,Math.abs(p-t)<cA&&r-_>cA?[t,Math.abs(l-t)<cA?h:r]:Math.abs(_-r)<cA&&e-p>cA?[Math.abs(h-r)<cA?l:e,r]:Math.abs(p-e)<cA&&_-n>cA?[e,Math.abs(l-e)<cA?h:n]:Math.abs(_-n)<cA&&p-t>cA?[Math.abs(h-n)<cA?l:t,n]:null))-1),++f);f&&(v=!1)}if(v){var y,b,m,x=1/0;for(i=0,v=null;i<g;++i)(o=oA[i])&&(m=(y=(a=o.site)[0]-t)*y+(b=a[1]-n)*b)<x&&(x=m,v=o);if(v){var w=[t,n],M=[t,r],A=[e,r],T=[e,n];v.halfedges.push(uA.push(LM(a=v.site,w,M))-1,uA.push(LM(a,M,A))-1,uA.push(LM(a,A,T))-1,uA.push(LM(a,T,w))-1)}}for(i=0;i<g;++i)(o=oA[i])&&(o.halfedges.length||delete oA[i])}(a,u,c,f)}this.edges=uA,this.cells=oA,iA=aA=uA=oA=null}function dA(){var t=NM,n=CM,e=null;function r(r){return new hA(r.map((function(e,i){var o=[Math.round(t(e,i,r)/cA)*cA,Math.round(n(e,i,r)/cA)*cA];return o.index=i,o.data=e,o})),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:EM(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:EM(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r}function pA(t){return function(){return t}}function _A(t,n,e){this.target=t,this.type=n,this.transform=e}function gA(t,n,e){this.k=t,this.x=n,this.y=e}hA.prototype={constructor:hA,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return YM(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,a,u=e.site,c=-1,f=n[i[o-1]],s=f.left===u?f.right:f.left;++c<o;)a=s,s=(f=n[i[c]]).left===u?f.right:f.left,a&&s&&r<a.index&&r<s.index&&sA(u,a,s)<0&&t.push([u.data,a.data,s.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,a=o._found||0,u=o.cells.length;!(i=o.cells[a]);)if(++a>=u)return null;var c=t-i.site[0],f=n-i.site[1],s=c*c+f*f;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(e){var r=o.edges[e],u=r.left;if(u!==i.site&&u||(u=r.right)){var c=t-u[0],f=n-u[1],l=c*c+f*f;l<s&&(s=l,a=u.index)}}))}while(null!==a);return o._found=r,null==e||s<=e*e?i.site:null}},gA.prototype={constructor:gA,scale:function(t){return 1===t?this:new gA(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new gA(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var vA=new gA(1,0,0);function yA(t){for(;!t.__zoom;)if(!(t=t.parentNode))return vA;return t.__zoom}function bA(){ln.stopImmediatePropagation()}function mA(){ln.preventDefault(),ln.stopImmediatePropagation()}function xA(){return!ln.ctrlKey&&!ln.button}function wA(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function MA(){return this.__zoom||vA}function AA(){return-ln.deltaY*(1===ln.deltaMode?.05:ln.deltaMode?1:.002)}function TA(){return navigator.maxTouchPoints||"ontouchstart"in this}function kA(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],a=t.invertY(n[1][1])-e[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),a>o?(o+a)/2:Math.min(0,o)||Math.max(0,a))}function SA(){var t,n,e=xA,r=wA,i=kA,o=AA,a=TA,u=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],f=250,s=zp,l=ht("start","zoom","end"),h=500,d=0;function p(t){t.property("__zoom",MA).on("wheel.zoom",x).on("mousedown.zoom",w).on("dblclick.zoom",M).filter(a).on("touchstart.zoom",A).on("touchmove.zoom",T).on("touchend.zoom touchcancel.zoom",k).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function _(t,n){return(n=Math.max(u[0],Math.min(u[1],n)))===t.k?t:new gA(n,t.x,t.y)}function g(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new gA(t.k,r,i)}function v(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function y(t,n,e){t.on("start.zoom",(function(){b(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){b(this,arguments).end()})).tween("zoom",(function(){var t=this,i=arguments,o=b(t,i),a=r.apply(t,i),u=null==e?v(a):"function"==typeof e?e.apply(t,i):e,c=Math.max(a[1][0]-a[0][0],a[1][1]-a[0][1]),f=t.__zoom,l="function"==typeof n?n.apply(t,i):n,h=s(f.invert(u).concat(c/f.k),l.invert(u).concat(c/l.k));return function(t){if(1===t)t=l;else{var n=h(t),e=c/n[2];t=new gA(e,u[0]-n[0]*e,u[1]-n[1]*e)}o.zoom(null,t)}}))}function b(t,n,e){return!e&&t.__zooming||new m(t,n)}function m(t,n){this.that=t,this.args=n,this.active=0,this.extent=r.apply(t,n),this.taps=0}function x(){if(e.apply(this,arguments)){var t=b(this,arguments),n=this.__zoom,r=Math.max(u[0],Math.min(u[1],n.k*Math.pow(2,o.apply(this,arguments)))),a=Oe(this);if(t.wheel)t.mouse[0][0]===a[0]&&t.mouse[0][1]===a[1]||(t.mouse[1]=n.invert(t.mouse[0]=a)),clearTimeout(t.wheel);else{if(n.k===r)return;t.mouse=[a,n.invert(a)],or(this),t.start()}mA(),t.wheel=setTimeout(f,150),t.zoom("mouse",i(g(_(n,r),t.mouse[0],t.mouse[1]),t.extent,c))}function f(){t.wheel=null,t.end()}}function w(){if(!n&&e.apply(this,arguments)){var t=b(this,arguments,!0),r=Tn(ln.view).on("mousemove.zoom",f,!0).on("mouseup.zoom",s,!0),o=Oe(this),a=ln.clientX,u=ln.clientY;En(ln.view),bA(),t.mouse=[o,this.__zoom.invert(o)],or(this),t.start()}function f(){if(mA(),!t.moved){var n=ln.clientX-a,e=ln.clientY-u;t.moved=n*n+e*e>d}t.zoom("mouse",i(g(t.that.__zoom,t.mouse[0]=Oe(t.that),t.mouse[1]),t.extent,c))}function s(){r.on("mousemove.zoom mouseup.zoom",null),Nn(ln.view,t.moved),mA(),t.end()}}function M(){if(e.apply(this,arguments)){var t=this.__zoom,n=Oe(this),o=t.invert(n),a=t.k*(ln.shiftKey?.5:2),u=i(g(_(t,a),n,o),r.apply(this,arguments),c);mA(),f>0?Tn(this).transition().duration(f).call(y,u,n):Tn(this).call(p.transform,u)}}function A(){if(e.apply(this,arguments)){var n,r,i,o,a=ln.touches,u=a.length,c=b(this,arguments,ln.changedTouches.length===u);for(bA(),r=0;r<u;++r)o=[o=Ue(this,a,(i=a[r]).identifier),this.__zoom.invert(o),i.identifier],c.touch0?c.touch1||c.touch0[2]===o[2]||(c.touch1=o,c.taps=0):(c.touch0=o,n=!0,c.taps=1+!!t);t&&(t=clearTimeout(t)),n&&(c.taps<2&&(t=setTimeout((function(){t=null}),h)),or(this),c.start())}}function T(){if(this.__zooming){var n,e,r,o,a=b(this,arguments),u=ln.changedTouches,f=u.length;for(mA(),t&&(t=clearTimeout(t)),a.taps=0,n=0;n<f;++n)r=Ue(this,u,(e=u[n]).identifier),a.touch0&&a.touch0[2]===e.identifier?a.touch0[0]=r:a.touch1&&a.touch1[2]===e.identifier&&(a.touch1[0]=r);if(e=a.that.__zoom,a.touch1){var s=a.touch0[0],l=a.touch0[1],h=a.touch1[0],d=a.touch1[1],p=(p=h[0]-s[0])*p+(p=h[1]-s[1])*p,v=(v=d[0]-l[0])*v+(v=d[1]-l[1])*v;e=_(e,Math.sqrt(p/v)),r=[(s[0]+h[0])/2,(s[1]+h[1])/2],o=[(l[0]+d[0])/2,(l[1]+d[1])/2]}else{if(!a.touch0)return;r=a.touch0[0],o=a.touch0[1]}a.zoom("touch",i(g(e,r,o),a.extent,c))}}function k(){if(this.__zooming){var t,e,r=b(this,arguments),i=ln.changedTouches,o=i.length;for(bA(),n&&clearTimeout(n),n=setTimeout((function(){n=null}),h),t=0;t<o;++t)e=i[t],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;if(r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0)r.touch0[1]=this.__zoom.invert(r.touch0[0]);else if(r.end(),2===r.taps){var a=Tn(this).on("dblclick.zoom");a&&a.apply(this,arguments)}}}return p.transform=function(t,n,e){var r=t.selection?t.selection():t;r.property("__zoom",MA),t!==r?y(t,n,e):r.interrupt().each((function(){b(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()}))},p.scaleBy=function(t,n,e){p.scaleTo(t,(function(){var t=this.__zoom.k,e="function"==typeof n?n.apply(this,arguments):n;return t*e}),e)},p.scaleTo=function(t,n,e){p.transform(t,(function(){var t=r.apply(this,arguments),o=this.__zoom,a=null==e?v(t):"function"==typeof e?e.apply(this,arguments):e,u=o.invert(a),f="function"==typeof n?n.apply(this,arguments):n;return i(g(_(o,f),a,u),t,c)}),e)},p.translateBy=function(t,n,e){p.transform(t,(function(){return i(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),r.apply(this,arguments),c)}))},p.translateTo=function(t,n,e,o){p.transform(t,(function(){var t=r.apply(this,arguments),a=this.__zoom,u=null==o?v(t):"function"==typeof o?o.apply(this,arguments):o;return i(vA.translate(u[0],u[1]).scale(a.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,c)}),o)},m.prototype={start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){vn(new _A(p,t,this.that.__zoom),l.apply,l,[t,this.that,this.args])}},p.wheelDelta=function(t){return arguments.length?(o="function"==typeof t?t:pA(+t),p):o},p.filter=function(t){return arguments.length?(e="function"==typeof t?t:pA(!!t),p):e},p.touchable=function(t){return arguments.length?(a="function"==typeof t?t:pA(!!t),p):a},p.extent=function(t){return arguments.length?(r="function"==typeof t?t:pA([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),p):r},p.scaleExtent=function(t){return arguments.length?(u[0]=+t[0],u[1]=+t[1],p):[u[0],u[1]]},p.translateExtent=function(t){return arguments.length?(c[0][0]=+t[0][0],c[1][0]=+t[1][0],c[0][1]=+t[0][1],c[1][1]=+t[1][1],p):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},p.constrain=function(t){return arguments.length?(i=t,p):i},p.duration=function(t){return arguments.length?(f=+t,p):f},p.interpolate=function(t){return arguments.length?(s=t,p):s},p.on=function(){var t=l.on.apply(l,arguments);return t===l?p:t},p.clickDistance=function(t){return arguments.length?(d=(t=+t)*t,p):Math.sqrt(d)},p}yA.prototype=gA.prototype},403:function(t,n,e){var r;t=e.nmd(t),function(){var i,o="Expected a function",a="__lodash_hash_undefined__",u="__lodash_placeholder__",c=32,f=128,s=1/0,l=9007199254740991,h=NaN,d=4294967295,p=[["ary",f],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",c],["partialRight",64],["rearg",256]],_="[object Arguments]",g="[object Array]",v="[object Boolean]",y="[object Date]",b="[object Error]",m="[object Function]",x="[object GeneratorFunction]",w="[object Map]",M="[object Number]",A="[object Object]",T="[object Promise]",k="[object RegExp]",S="[object Set]",E="[object String]",N="[object Symbol]",C="[object WeakMap]",z="[object ArrayBuffer]",U="[object DataView]",O="[object Float32Array]",D="[object Float64Array]",j="[object Int8Array]",R="[object Int16Array]",P="[object Int32Array]",L="[object Uint8Array]",F="[object Uint8ClampedArray]",B="[object Uint16Array]",I="[object Uint32Array]",q=/\b__p \+= '';/g,Y=/\b(__p \+=) '' \+/g,H=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Z=/&(?:amp|lt|gt|quot|#39);/g,W=/[&<>"']/g,V=RegExp(Z.source),X=RegExp(W.source),$=/<%-([\s\S]+?)%>/g,G=/<%([\s\S]+?)%>/g,K=/<%=([\s\S]+?)%>/g,Q=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,J=/^\w*$/,tt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,nt=/[\\^$.*+?()[\]{}|]/g,et=RegExp(nt.source),rt=/^\s+|\s+$/g,it=/^\s+/,ot=/\s+$/,at=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ut=/\{\n\/\* \[wrapped with (.+)\] \*/,ct=/,? & /,ft=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,st=/\\(\\)?/g,lt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ht=/\w*$/,dt=/^[-+]0x[0-9a-f]+$/i,pt=/^0b[01]+$/i,_t=/^\[object .+?Constructor\]$/,gt=/^0o[0-7]+$/i,vt=/^(?:0|[1-9]\d*)$/,yt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,bt=/($^)/,mt=/['\n\r\u2028\u2029\\]/g,xt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",wt="a-z\\xdf-\\xf6\\xf8-\\xff",Mt="A-Z\\xc0-\\xd6\\xd8-\\xde",At="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Tt="["+At+"]",kt="["+xt+"]",St="\\d+",Et="["+wt+"]",Nt="[^\\ud800-\\udfff"+At+St+"\\u2700-\\u27bf"+wt+Mt+"]",Ct="\\ud83c[\\udffb-\\udfff]",zt="[^\\ud800-\\udfff]",Ut="(?:\\ud83c[\\udde6-\\uddff]){2}",Ot="[\\ud800-\\udbff][\\udc00-\\udfff]",Dt="["+Mt+"]",jt="(?:"+Et+"|"+Nt+")",Rt="(?:"+Dt+"|"+Nt+")",Pt="(?:['’](?:d|ll|m|re|s|t|ve))?",Lt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Ft="(?:"+kt+"|"+Ct+")?",Bt="[\\ufe0e\\ufe0f]?",It=Bt+Ft+"(?:\\u200d(?:"+[zt,Ut,Ot].join("|")+")"+Bt+Ft+")*",qt="(?:"+["[\\u2700-\\u27bf]",Ut,Ot].join("|")+")"+It,Yt="(?:"+[zt+kt+"?",kt,Ut,Ot,"[\\ud800-\\udfff]"].join("|")+")",Ht=RegExp("['’]","g"),Zt=RegExp(kt,"g"),Wt=RegExp(Ct+"(?="+Ct+")|"+Yt+It,"g"),Vt=RegExp([Dt+"?"+Et+"+"+Pt+"(?="+[Tt,Dt,"$"].join("|")+")",Rt+"+"+Lt+"(?="+[Tt,Dt+jt,"$"].join("|")+")",Dt+"?"+jt+"+"+Pt,Dt+"+"+Lt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",St,qt].join("|"),"g"),Xt=RegExp("[\\u200d\\ud800-\\udfff"+xt+"\\ufe0e\\ufe0f]"),$t=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Gt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Kt=-1,Qt={};Qt[O]=Qt[D]=Qt[j]=Qt[R]=Qt[P]=Qt[L]=Qt[F]=Qt[B]=Qt[I]=!0,Qt[_]=Qt[g]=Qt[z]=Qt[v]=Qt[U]=Qt[y]=Qt[b]=Qt[m]=Qt[w]=Qt[M]=Qt[A]=Qt[k]=Qt[S]=Qt[E]=Qt[C]=!1;var Jt={};Jt[_]=Jt[g]=Jt[z]=Jt[U]=Jt[v]=Jt[y]=Jt[O]=Jt[D]=Jt[j]=Jt[R]=Jt[P]=Jt[w]=Jt[M]=Jt[A]=Jt[k]=Jt[S]=Jt[E]=Jt[N]=Jt[L]=Jt[F]=Jt[B]=Jt[I]=!0,Jt[b]=Jt[m]=Jt[C]=!1;var tn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},nn=parseFloat,en=parseInt,rn="object"==typeof e.g&&e.g&&e.g.Object===Object&&e.g,on="object"==typeof self&&self&&self.Object===Object&&self,an=rn||on||Function("return this")(),un=n&&!n.nodeType&&n,cn=un&&t&&!t.nodeType&&t,fn=cn&&cn.exports===un,sn=fn&&rn.process,ln=function(){try{return cn&&cn.require&&cn.require("util").types||sn&&sn.binding&&sn.binding("util")}catch(t){}}(),hn=ln&&ln.isArrayBuffer,dn=ln&&ln.isDate,pn=ln&&ln.isMap,_n=ln&&ln.isRegExp,gn=ln&&ln.isSet,vn=ln&&ln.isTypedArray;function yn(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}function bn(t,n,e,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var a=t[i];n(r,a,e(a),t)}return r}function mn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}function xn(t,n){for(var e=null==t?0:t.length;e--&&!1!==n(t[e],e,t););return t}function wn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(!n(t[e],e,t))return!1;return!0}function Mn(t,n){for(var e=-1,r=null==t?0:t.length,i=0,o=[];++e<r;){var a=t[e];n(a,e,t)&&(o[i++]=a)}return o}function An(t,n){return!(null==t||!t.length)&&Dn(t,n,0)>-1}function Tn(t,n,e){for(var r=-1,i=null==t?0:t.length;++r<i;)if(e(n,t[r]))return!0;return!1}function kn(t,n){for(var e=-1,r=null==t?0:t.length,i=Array(r);++e<r;)i[e]=n(t[e],e,t);return i}function Sn(t,n){for(var e=-1,r=n.length,i=t.length;++e<r;)t[i+e]=n[e];return t}function En(t,n,e,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(e=t[++i]);++i<o;)e=n(e,t[i],i,t);return e}function Nn(t,n,e,r){var i=null==t?0:t.length;for(r&&i&&(e=t[--i]);i--;)e=n(e,t[i],i,t);return e}function Cn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}var zn=Ln("length");function Un(t,n,e){var r;return e(t,(function(t,e,i){if(n(t,e,i))return r=e,!1})),r}function On(t,n,e,r){for(var i=t.length,o=e+(r?1:-1);r?o--:++o<i;)if(n(t[o],o,t))return o;return-1}function Dn(t,n,e){return n==n?function(t,n,e){for(var r=e-1,i=t.length;++r<i;)if(t[r]===n)return r;return-1}(t,n,e):On(t,Rn,e)}function jn(t,n,e,r){for(var i=e-1,o=t.length;++i<o;)if(r(t[i],n))return i;return-1}function Rn(t){return t!=t}function Pn(t,n){var e=null==t?0:t.length;return e?In(t,n)/e:h}function Ln(t){return function(n){return null==n?i:n[t]}}function Fn(t){return function(n){return null==t?i:t[n]}}function Bn(t,n,e,r,i){return i(t,(function(t,i,o){e=r?(r=!1,t):n(e,t,i,o)})),e}function In(t,n){for(var e,r=-1,o=t.length;++r<o;){var a=n(t[r]);a!==i&&(e=e===i?a:e+a)}return e}function qn(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}function Yn(t){return function(n){return t(n)}}function Hn(t,n){return kn(n,(function(n){return t[n]}))}function Zn(t,n){return t.has(n)}function Wn(t,n){for(var e=-1,r=t.length;++e<r&&Dn(n,t[e],0)>-1;);return e}function Vn(t,n){for(var e=t.length;e--&&Dn(n,t[e],0)>-1;);return e}function Xn(t,n){for(var e=t.length,r=0;e--;)t[e]===n&&++r;return r}var $n=Fn({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Gn=Fn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Kn(t){return"\\"+tn[t]}function Qn(t){return Xt.test(t)}function Jn(t){var n=-1,e=Array(t.size);return t.forEach((function(t,r){e[++n]=[r,t]})),e}function te(t,n){return function(e){return t(n(e))}}function ne(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var a=t[e];a!==n&&a!==u||(t[e]=u,o[i++]=e)}return o}function ee(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=t})),e}function re(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=[t,t]})),e}function ie(t){return Qn(t)?function(t){for(var n=Wt.lastIndex=0;Wt.test(t);)++n;return n}(t):zn(t)}function oe(t){return Qn(t)?function(t){return t.match(Wt)||[]}(t):function(t){return t.split("")}(t)}var ae=Fn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),ue=function t(n){var e,r=(n=null==n?an:ue.defaults(an.Object(),n,ue.pick(an,Gt))).Array,xt=n.Date,wt=n.Error,Mt=n.Function,At=n.Math,Tt=n.Object,kt=n.RegExp,St=n.String,Et=n.TypeError,Nt=r.prototype,Ct=Mt.prototype,zt=Tt.prototype,Ut=n["__core-js_shared__"],Ot=Ct.toString,Dt=zt.hasOwnProperty,jt=0,Rt=(e=/[^.]+$/.exec(Ut&&Ut.keys&&Ut.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",Pt=zt.toString,Lt=Ot.call(Tt),Ft=an._,Bt=kt("^"+Ot.call(Dt).replace(nt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),It=fn?n.Buffer:i,qt=n.Symbol,Yt=n.Uint8Array,Wt=It?It.allocUnsafe:i,Xt=te(Tt.getPrototypeOf,Tt),tn=Tt.create,rn=zt.propertyIsEnumerable,on=Nt.splice,un=qt?qt.isConcatSpreadable:i,cn=qt?qt.iterator:i,sn=qt?qt.toStringTag:i,ln=function(){try{var t=co(Tt,"defineProperty");return t({},"",{}),t}catch(t){}}(),zn=n.clearTimeout!==an.clearTimeout&&n.clearTimeout,Fn=xt&&xt.now!==an.Date.now&&xt.now,ce=n.setTimeout!==an.setTimeout&&n.setTimeout,fe=At.ceil,se=At.floor,le=Tt.getOwnPropertySymbols,he=It?It.isBuffer:i,de=n.isFinite,pe=Nt.join,_e=te(Tt.keys,Tt),ge=At.max,ve=At.min,ye=xt.now,be=n.parseInt,me=At.random,xe=Nt.reverse,we=co(n,"DataView"),Me=co(n,"Map"),Ae=co(n,"Promise"),Te=co(n,"Set"),ke=co(n,"WeakMap"),Se=co(Tt,"create"),Ee=ke&&new ke,Ne={},Ce=Lo(we),ze=Lo(Me),Ue=Lo(Ae),Oe=Lo(Te),De=Lo(ke),je=qt?qt.prototype:i,Re=je?je.valueOf:i,Pe=je?je.toString:i;function Le(t){if(nu(t)&&!Ha(t)&&!(t instanceof qe)){if(t instanceof Ie)return t;if(Dt.call(t,"__wrapped__"))return Fo(t)}return new Ie(t)}var Fe=function(){function t(){}return function(n){if(!tu(n))return{};if(tn)return tn(n);t.prototype=n;var e=new t;return t.prototype=i,e}}();function Be(){}function Ie(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=i}function qe(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=d,this.__views__=[]}function Ye(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function He(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ze(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function We(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new Ze;++n<e;)this.add(t[n])}function Ve(t){var n=this.__data__=new He(t);this.size=n.size}function Xe(t,n){var e=Ha(t),r=!e&&Ya(t),i=!e&&!r&&Xa(t),o=!e&&!r&&!i&&fu(t),a=e||r||i||o,u=a?qn(t.length,St):[],c=u.length;for(var f in t)!n&&!Dt.call(t,f)||a&&("length"==f||i&&("offset"==f||"parent"==f)||o&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||go(f,c))||u.push(f);return u}function $e(t){var n=t.length;return n?t[Zr(0,n-1)]:i}function Ge(t,n){return Oo(ki(t),or(n,0,t.length))}function Ke(t){return Oo(ki(t))}function Qe(t,n,e){(e!==i&&!Ba(t[n],e)||e===i&&!(n in t))&&rr(t,n,e)}function Je(t,n,e){var r=t[n];Dt.call(t,n)&&Ba(r,e)&&(e!==i||n in t)||rr(t,n,e)}function tr(t,n){for(var e=t.length;e--;)if(Ba(t[e][0],n))return e;return-1}function nr(t,n,e,r){return sr(t,(function(t,i,o){n(r,t,e(t),o)})),r}function er(t,n){return t&&Si(n,zu(n),t)}function rr(t,n,e){"__proto__"==n&&ln?ln(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}function ir(t,n){for(var e=-1,o=n.length,a=r(o),u=null==t;++e<o;)a[e]=u?i:ku(t,n[e]);return a}function or(t,n,e){return t==t&&(e!==i&&(t=t<=e?t:e),n!==i&&(t=t>=n?t:n)),t}function ar(t,n,e,r,o,a){var u,c=1&n,f=2&n,s=4&n;if(e&&(u=o?e(t,r,o,a):e(t)),u!==i)return u;if(!tu(t))return t;var l=Ha(t);if(l){if(u=function(t){var n=t.length,e=new t.constructor(n);return n&&"string"==typeof t[0]&&Dt.call(t,"index")&&(e.index=t.index,e.input=t.input),e}(t),!c)return ki(t,u)}else{var h=lo(t),d=h==m||h==x;if(Xa(t))return mi(t,c);if(h==A||h==_||d&&!o){if(u=f||d?{}:po(t),!c)return f?function(t,n){return Si(t,so(t),n)}(t,function(t,n){return t&&Si(n,Uu(n),t)}(u,t)):function(t,n){return Si(t,fo(t),n)}(t,er(u,t))}else{if(!Jt[h])return o?t:{};u=function(t,n,e){var r,i=t.constructor;switch(n){case z:return xi(t);case v:case y:return new i(+t);case U:return function(t,n){var e=n?xi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,e);case O:case D:case j:case R:case P:case L:case F:case B:case I:return wi(t,e);case w:return new i;case M:case E:return new i(t);case k:return function(t){var n=new t.constructor(t.source,ht.exec(t));return n.lastIndex=t.lastIndex,n}(t);case S:return new i;case N:return r=t,Re?Tt(Re.call(r)):{}}}(t,h,c)}}a||(a=new Ve);var p=a.get(t);if(p)return p;a.set(t,u),au(t)?t.forEach((function(r){u.add(ar(r,n,e,r,t,a))})):eu(t)&&t.forEach((function(r,i){u.set(i,ar(r,n,e,i,t,a))}));var g=l?i:(s?f?no:to:f?Uu:zu)(t);return mn(g||t,(function(r,i){g&&(r=t[i=r]),Je(u,i,ar(r,n,e,i,t,a))})),u}function ur(t,n,e){var r=e.length;if(null==t)return!r;for(t=Tt(t);r--;){var o=e[r],a=n[o],u=t[o];if(u===i&&!(o in t)||!a(u))return!1}return!0}function cr(t,n,e){if("function"!=typeof t)throw new Et(o);return No((function(){t.apply(i,e)}),n)}function fr(t,n,e,r){var i=-1,o=An,a=!0,u=t.length,c=[],f=n.length;if(!u)return c;e&&(n=kn(n,Yn(e))),r?(o=Tn,a=!1):n.length>=200&&(o=Zn,a=!1,n=new We(n));t:for(;++i<u;){var s=t[i],l=null==e?s:e(s);if(s=r||0!==s?s:0,a&&l==l){for(var h=f;h--;)if(n[h]===l)continue t;c.push(s)}else o(n,l,r)||c.push(s)}return c}Le.templateSettings={escape:$,evaluate:G,interpolate:K,variable:"",imports:{_:Le}},Le.prototype=Be.prototype,Le.prototype.constructor=Le,Ie.prototype=Fe(Be.prototype),Ie.prototype.constructor=Ie,qe.prototype=Fe(Be.prototype),qe.prototype.constructor=qe,Ye.prototype.clear=function(){this.__data__=Se?Se(null):{},this.size=0},Ye.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},Ye.prototype.get=function(t){var n=this.__data__;if(Se){var e=n[t];return e===a?i:e}return Dt.call(n,t)?n[t]:i},Ye.prototype.has=function(t){var n=this.__data__;return Se?n[t]!==i:Dt.call(n,t)},Ye.prototype.set=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=Se&&n===i?a:n,this},He.prototype.clear=function(){this.__data__=[],this.size=0},He.prototype.delete=function(t){var n=this.__data__,e=tr(n,t);return!(e<0||(e==n.length-1?n.pop():on.call(n,e,1),--this.size,0))},He.prototype.get=function(t){var n=this.__data__,e=tr(n,t);return e<0?i:n[e][1]},He.prototype.has=function(t){return tr(this.__data__,t)>-1},He.prototype.set=function(t,n){var e=this.__data__,r=tr(e,t);return r<0?(++this.size,e.push([t,n])):e[r][1]=n,this},Ze.prototype.clear=function(){this.size=0,this.__data__={hash:new Ye,map:new(Me||He),string:new Ye}},Ze.prototype.delete=function(t){var n=ao(this,t).delete(t);return this.size-=n?1:0,n},Ze.prototype.get=function(t){return ao(this,t).get(t)},Ze.prototype.has=function(t){return ao(this,t).has(t)},Ze.prototype.set=function(t,n){var e=ao(this,t),r=e.size;return e.set(t,n),this.size+=e.size==r?0:1,this},We.prototype.add=We.prototype.push=function(t){return this.__data__.set(t,a),this},We.prototype.has=function(t){return this.__data__.has(t)},Ve.prototype.clear=function(){this.__data__=new He,this.size=0},Ve.prototype.delete=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e},Ve.prototype.get=function(t){return this.__data__.get(t)},Ve.prototype.has=function(t){return this.__data__.has(t)},Ve.prototype.set=function(t,n){var e=this.__data__;if(e instanceof He){var r=e.__data__;if(!Me||r.length<199)return r.push([t,n]),this.size=++e.size,this;e=this.__data__=new Ze(r)}return e.set(t,n),this.size=e.size,this};var sr=Ci(yr),lr=Ci(br,!0);function hr(t,n){var e=!0;return sr(t,(function(t,r,i){return e=!!n(t,r,i)})),e}function dr(t,n,e){for(var r=-1,o=t.length;++r<o;){var a=t[r],u=n(a);if(null!=u&&(c===i?u==u&&!cu(u):e(u,c)))var c=u,f=a}return f}function pr(t,n){var e=[];return sr(t,(function(t,r,i){n(t,r,i)&&e.push(t)})),e}function _r(t,n,e,r,i){var o=-1,a=t.length;for(e||(e=_o),i||(i=[]);++o<a;){var u=t[o];n>0&&e(u)?n>1?_r(u,n-1,e,r,i):Sn(i,u):r||(i[i.length]=u)}return i}var gr=zi(),vr=zi(!0);function yr(t,n){return t&&gr(t,n,zu)}function br(t,n){return t&&vr(t,n,zu)}function mr(t,n){return Mn(n,(function(n){return Ka(t[n])}))}function xr(t,n){for(var e=0,r=(n=gi(n,t)).length;null!=t&&e<r;)t=t[Po(n[e++])];return e&&e==r?t:i}function wr(t,n,e){var r=n(t);return Ha(t)?r:Sn(r,e(t))}function Mr(t){return null==t?t===i?"[object Undefined]":"[object Null]":sn&&sn in Tt(t)?function(t){var n=Dt.call(t,sn),e=t[sn];try{t[sn]=i;var r=!0}catch(t){}var o=Pt.call(t);return r&&(n?t[sn]=e:delete t[sn]),o}(t):function(t){return Pt.call(t)}(t)}function Ar(t,n){return t>n}function Tr(t,n){return null!=t&&Dt.call(t,n)}function kr(t,n){return null!=t&&n in Tt(t)}function Sr(t,n,e){for(var o=e?Tn:An,a=t[0].length,u=t.length,c=u,f=r(u),s=1/0,l=[];c--;){var h=t[c];c&&n&&(h=kn(h,Yn(n))),s=ve(h.length,s),f[c]=!e&&(n||a>=120&&h.length>=120)?new We(c&&h):i}h=t[0];var d=-1,p=f[0];t:for(;++d<a&&l.length<s;){var _=h[d],g=n?n(_):_;if(_=e||0!==_?_:0,!(p?Zn(p,g):o(l,g,e))){for(c=u;--c;){var v=f[c];if(!(v?Zn(v,g):o(t[c],g,e)))continue t}p&&p.push(g),l.push(_)}}return l}function Er(t,n,e){var r=null==(t=To(t,n=gi(n,t)))?t:t[Po(Go(n))];return null==r?i:yn(r,t,e)}function Nr(t){return nu(t)&&Mr(t)==_}function Cr(t,n,e,r,o){return t===n||(null==t||null==n||!nu(t)&&!nu(n)?t!=t&&n!=n:function(t,n,e,r,o,a){var u=Ha(t),c=Ha(n),f=u?g:lo(t),s=c?g:lo(n),l=(f=f==_?A:f)==A,h=(s=s==_?A:s)==A,d=f==s;if(d&&Xa(t)){if(!Xa(n))return!1;u=!0,l=!1}if(d&&!l)return a||(a=new Ve),u||fu(t)?Qi(t,n,e,r,o,a):function(t,n,e,r,i,o,a){switch(e){case U:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case z:return!(t.byteLength!=n.byteLength||!o(new Yt(t),new Yt(n)));case v:case y:case M:return Ba(+t,+n);case b:return t.name==n.name&&t.message==n.message;case k:case E:return t==n+"";case w:var u=Jn;case S:var c=1&r;if(u||(u=ee),t.size!=n.size&&!c)return!1;var f=a.get(t);if(f)return f==n;r|=2,a.set(t,n);var s=Qi(u(t),u(n),r,i,o,a);return a.delete(t),s;case N:if(Re)return Re.call(t)==Re.call(n)}return!1}(t,n,f,e,r,o,a);if(!(1&e)){var p=l&&Dt.call(t,"__wrapped__"),m=h&&Dt.call(n,"__wrapped__");if(p||m){var x=p?t.value():t,T=m?n.value():n;return a||(a=new Ve),o(x,T,e,r,a)}}return!!d&&(a||(a=new Ve),function(t,n,e,r,o,a){var u=1&e,c=to(t),f=c.length;if(f!=to(n).length&&!u)return!1;for(var s=f;s--;){var l=c[s];if(!(u?l in n:Dt.call(n,l)))return!1}var h=a.get(t),d=a.get(n);if(h&&d)return h==n&&d==t;var p=!0;a.set(t,n),a.set(n,t);for(var _=u;++s<f;){var g=t[l=c[s]],v=n[l];if(r)var y=u?r(v,g,l,n,t,a):r(g,v,l,t,n,a);if(!(y===i?g===v||o(g,v,e,r,a):y)){p=!1;break}_||(_="constructor"==l)}if(p&&!_){var b=t.constructor,m=n.constructor;b==m||!("constructor"in t)||!("constructor"in n)||"function"==typeof b&&b instanceof b&&"function"==typeof m&&m instanceof m||(p=!1)}return a.delete(t),a.delete(n),p}(t,n,e,r,o,a))}(t,n,e,r,Cr,o))}function zr(t,n,e,r){var o=e.length,a=o,u=!r;if(null==t)return!a;for(t=Tt(t);o--;){var c=e[o];if(u&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++o<a;){var f=(c=e[o])[0],s=t[f],l=c[1];if(u&&c[2]){if(s===i&&!(f in t))return!1}else{var h=new Ve;if(r)var d=r(s,l,f,t,n,h);if(!(d===i?Cr(l,s,3,r,h):d))return!1}}return!0}function Ur(t){return!(!tu(t)||(n=t,Rt&&Rt in n))&&(Ka(t)?Bt:_t).test(Lo(t));var n}function Or(t){return"function"==typeof t?t:null==t?rc:"object"==typeof t?Ha(t)?Lr(t[0],t[1]):Pr(t):hc(t)}function Dr(t){if(!xo(t))return _e(t);var n=[];for(var e in Tt(t))Dt.call(t,e)&&"constructor"!=e&&n.push(e);return n}function jr(t,n){return t<n}function Rr(t,n){var e=-1,i=Wa(t)?r(t.length):[];return sr(t,(function(t,r,o){i[++e]=n(t,r,o)})),i}function Pr(t){var n=uo(t);return 1==n.length&&n[0][2]?Mo(n[0][0],n[0][1]):function(e){return e===t||zr(e,t,n)}}function Lr(t,n){return yo(t)&&wo(n)?Mo(Po(t),n):function(e){var r=ku(e,t);return r===i&&r===n?Su(e,t):Cr(n,r,3)}}function Fr(t,n,e,r,o){t!==n&&gr(n,(function(a,u){if(o||(o=new Ve),tu(a))!function(t,n,e,r,o,a,u){var c=So(t,e),f=So(n,e),s=u.get(f);if(s)Qe(t,e,s);else{var l=a?a(c,f,e+"",t,n,u):i,h=l===i;if(h){var d=Ha(f),p=!d&&Xa(f),_=!d&&!p&&fu(f);l=f,d||p||_?Ha(c)?l=c:Va(c)?l=ki(c):p?(h=!1,l=mi(f,!0)):_?(h=!1,l=wi(f,!0)):l=[]:iu(f)||Ya(f)?(l=c,Ya(c)?l=vu(c):tu(c)&&!Ka(c)||(l=po(f))):h=!1}h&&(u.set(f,l),o(l,f,r,a,u),u.delete(f)),Qe(t,e,l)}}(t,n,u,e,Fr,r,o);else{var c=r?r(So(t,u),a,u+"",t,n,o):i;c===i&&(c=a),Qe(t,u,c)}}),Uu)}function Br(t,n){var e=t.length;if(e)return go(n+=n<0?e:0,e)?t[n]:i}function Ir(t,n,e){n=n.length?kn(n,(function(t){return Ha(t)?function(n){return xr(n,1===t.length?t[0]:t)}:t})):[rc];var r=-1;return n=kn(n,Yn(oo())),function(t,n){var r=t.length;for(t.sort((function(t,n){return function(t,n,e){for(var r=-1,i=t.criteria,o=n.criteria,a=i.length,u=e.length;++r<a;){var c=Mi(i[r],o[r]);if(c)return r>=u?c:c*("desc"==e[r]?-1:1)}return t.index-n.index}(t,n,e)}));r--;)t[r]=t[r].value;return t}(Rr(t,(function(t,e,i){return{criteria:kn(n,(function(n){return n(t)})),index:++r,value:t}})))}function qr(t,n,e){for(var r=-1,i=n.length,o={};++r<i;){var a=n[r],u=xr(t,a);e(u,a)&&Gr(o,gi(a,t),u)}return o}function Yr(t,n,e,r){var i=r?jn:Dn,o=-1,a=n.length,u=t;for(t===n&&(n=ki(n)),e&&(u=kn(t,Yn(e)));++o<a;)for(var c=0,f=n[o],s=e?e(f):f;(c=i(u,s,c,r))>-1;)u!==t&&on.call(u,c,1),on.call(t,c,1);return t}function Hr(t,n){for(var e=t?n.length:0,r=e-1;e--;){var i=n[e];if(e==r||i!==o){var o=i;go(i)?on.call(t,i,1):ci(t,i)}}return t}function Zr(t,n){return t+se(me()*(n-t+1))}function Wr(t,n){var e="";if(!t||n<1||n>l)return e;do{n%2&&(e+=t),(n=se(n/2))&&(t+=t)}while(n);return e}function Vr(t,n){return Co(Ao(t,n,rc),t+"")}function Xr(t){return $e(Bu(t))}function $r(t,n){var e=Bu(t);return Oo(e,or(n,0,e.length))}function Gr(t,n,e,r){if(!tu(t))return t;for(var o=-1,a=(n=gi(n,t)).length,u=a-1,c=t;null!=c&&++o<a;){var f=Po(n[o]),s=e;if("__proto__"===f||"constructor"===f||"prototype"===f)return t;if(o!=u){var l=c[f];(s=r?r(l,f,c):i)===i&&(s=tu(l)?l:go(n[o+1])?[]:{})}Je(c,f,s),c=c[f]}return t}var Kr=Ee?function(t,n){return Ee.set(t,n),t}:rc,Qr=ln?function(t,n){return ln(t,"toString",{configurable:!0,enumerable:!1,value:tc(n),writable:!0})}:rc;function Jr(t){return Oo(Bu(t))}function ti(t,n,e){var i=-1,o=t.length;n<0&&(n=-n>o?0:o+n),(e=e>o?o:e)<0&&(e+=o),o=n>e?0:e-n>>>0,n>>>=0;for(var a=r(o);++i<o;)a[i]=t[i+n];return a}function ni(t,n){var e;return sr(t,(function(t,r,i){return!(e=n(t,r,i))})),!!e}function ei(t,n,e){var r=0,i=null==t?r:t.length;if("number"==typeof n&&n==n&&i<=2147483647){for(;r<i;){var o=r+i>>>1,a=t[o];null!==a&&!cu(a)&&(e?a<=n:a<n)?r=o+1:i=o}return i}return ri(t,n,rc,e)}function ri(t,n,e,r){var o=0,a=null==t?0:t.length;if(0===a)return 0;for(var u=(n=e(n))!=n,c=null===n,f=cu(n),s=n===i;o<a;){var l=se((o+a)/2),h=e(t[l]),d=h!==i,p=null===h,_=h==h,g=cu(h);if(u)var v=r||_;else v=s?_&&(r||d):c?_&&d&&(r||!p):f?_&&d&&!p&&(r||!g):!p&&!g&&(r?h<=n:h<n);v?o=l+1:a=l}return ve(a,4294967294)}function ii(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var a=t[e],u=n?n(a):a;if(!e||!Ba(u,c)){var c=u;o[i++]=0===a?0:a}}return o}function oi(t){return"number"==typeof t?t:cu(t)?h:+t}function ai(t){if("string"==typeof t)return t;if(Ha(t))return kn(t,ai)+"";if(cu(t))return Pe?Pe.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function ui(t,n,e){var r=-1,i=An,o=t.length,a=!0,u=[],c=u;if(e)a=!1,i=Tn;else if(o>=200){var f=n?null:Wi(t);if(f)return ee(f);a=!1,i=Zn,c=new We}else c=n?[]:u;t:for(;++r<o;){var s=t[r],l=n?n(s):s;if(s=e||0!==s?s:0,a&&l==l){for(var h=c.length;h--;)if(c[h]===l)continue t;n&&c.push(l),u.push(s)}else i(c,l,e)||(c!==u&&c.push(l),u.push(s))}return u}function ci(t,n){return null==(t=To(t,n=gi(n,t)))||delete t[Po(Go(n))]}function fi(t,n,e,r){return Gr(t,n,e(xr(t,n)),r)}function si(t,n,e,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&n(t[o],o,t););return e?ti(t,r?0:o,r?o+1:i):ti(t,r?o+1:0,r?i:o)}function li(t,n){var e=t;return e instanceof qe&&(e=e.value()),En(n,(function(t,n){return n.func.apply(n.thisArg,Sn([t],n.args))}),e)}function hi(t,n,e){var i=t.length;if(i<2)return i?ui(t[0]):[];for(var o=-1,a=r(i);++o<i;)for(var u=t[o],c=-1;++c<i;)c!=o&&(a[o]=fr(a[o]||u,t[c],n,e));return ui(_r(a,1),n,e)}function di(t,n,e){for(var r=-1,o=t.length,a=n.length,u={};++r<o;){var c=r<a?n[r]:i;e(u,t[r],c)}return u}function pi(t){return Va(t)?t:[]}function _i(t){return"function"==typeof t?t:rc}function gi(t,n){return Ha(t)?t:yo(t,n)?[t]:Ro(yu(t))}var vi=Vr;function yi(t,n,e){var r=t.length;return e=e===i?r:e,!n&&e>=r?t:ti(t,n,e)}var bi=zn||function(t){return an.clearTimeout(t)};function mi(t,n){if(n)return t.slice();var e=t.length,r=Wt?Wt(e):new t.constructor(e);return t.copy(r),r}function xi(t){var n=new t.constructor(t.byteLength);return new Yt(n).set(new Yt(t)),n}function wi(t,n){var e=n?xi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function Mi(t,n){if(t!==n){var e=t!==i,r=null===t,o=t==t,a=cu(t),u=n!==i,c=null===n,f=n==n,s=cu(n);if(!c&&!s&&!a&&t>n||a&&u&&f&&!c&&!s||r&&u&&f||!e&&f||!o)return 1;if(!r&&!a&&!s&&t<n||s&&e&&o&&!r&&!a||c&&e&&o||!u&&o||!f)return-1}return 0}function Ai(t,n,e,i){for(var o=-1,a=t.length,u=e.length,c=-1,f=n.length,s=ge(a-u,0),l=r(f+s),h=!i;++c<f;)l[c]=n[c];for(;++o<u;)(h||o<a)&&(l[e[o]]=t[o]);for(;s--;)l[c++]=t[o++];return l}function Ti(t,n,e,i){for(var o=-1,a=t.length,u=-1,c=e.length,f=-1,s=n.length,l=ge(a-c,0),h=r(l+s),d=!i;++o<l;)h[o]=t[o];for(var p=o;++f<s;)h[p+f]=n[f];for(;++u<c;)(d||o<a)&&(h[p+e[u]]=t[o++]);return h}function ki(t,n){var e=-1,i=t.length;for(n||(n=r(i));++e<i;)n[e]=t[e];return n}function Si(t,n,e,r){var o=!e;e||(e={});for(var a=-1,u=n.length;++a<u;){var c=n[a],f=r?r(e[c],t[c],c,e,t):i;f===i&&(f=t[c]),o?rr(e,c,f):Je(e,c,f)}return e}function Ei(t,n){return function(e,r){var i=Ha(e)?bn:nr,o=n?n():{};return i(e,t,oo(r,2),o)}}function Ni(t){return Vr((function(n,e){var r=-1,o=e.length,a=o>1?e[o-1]:i,u=o>2?e[2]:i;for(a=t.length>3&&"function"==typeof a?(o--,a):i,u&&vo(e[0],e[1],u)&&(a=o<3?i:a,o=1),n=Tt(n);++r<o;){var c=e[r];c&&t(n,c,r,a)}return n}))}function Ci(t,n){return function(e,r){if(null==e)return e;if(!Wa(e))return t(e,r);for(var i=e.length,o=n?i:-1,a=Tt(e);(n?o--:++o<i)&&!1!==r(a[o],o,a););return e}}function zi(t){return function(n,e,r){for(var i=-1,o=Tt(n),a=r(n),u=a.length;u--;){var c=a[t?u:++i];if(!1===e(o[c],c,o))break}return n}}function Ui(t){return function(n){var e=Qn(n=yu(n))?oe(n):i,r=e?e[0]:n.charAt(0),o=e?yi(e,1).join(""):n.slice(1);return r[t]()+o}}function Oi(t){return function(n){return En(Ku(Yu(n).replace(Ht,"")),t,"")}}function Di(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var e=Fe(t.prototype),r=t.apply(e,n);return tu(r)?r:e}}function ji(t){return function(n,e,r){var o=Tt(n);if(!Wa(n)){var a=oo(e,3);n=zu(n),e=function(t){return a(o[t],t,o)}}var u=t(n,e,r);return u>-1?o[a?n[u]:u]:i}}function Ri(t){return Ji((function(n){var e=n.length,r=e,a=Ie.prototype.thru;for(t&&n.reverse();r--;){var u=n[r];if("function"!=typeof u)throw new Et(o);if(a&&!c&&"wrapper"==ro(u))var c=new Ie([],!0)}for(r=c?r:e;++r<e;){var f=ro(u=n[r]),s="wrapper"==f?eo(u):i;c=s&&bo(s[0])&&424==s[1]&&!s[4].length&&1==s[9]?c[ro(s[0])].apply(c,s[3]):1==u.length&&bo(u)?c[f]():c.thru(u)}return function(){var t=arguments,r=t[0];if(c&&1==t.length&&Ha(r))return c.plant(r).value();for(var i=0,o=e?n[i].apply(this,t):r;++i<e;)o=n[i].call(this,o);return o}}))}function Pi(t,n,e,o,a,u,c,s,l,h){var d=n&f,p=1&n,_=2&n,g=24&n,v=512&n,y=_?i:Di(t);return function i(){for(var f=arguments.length,b=r(f),m=f;m--;)b[m]=arguments[m];if(g)var x=io(i),w=Xn(b,x);if(o&&(b=Ai(b,o,a,g)),u&&(b=Ti(b,u,c,g)),f-=w,g&&f<h){var M=ne(b,x);return Hi(t,n,Pi,i.placeholder,e,b,M,s,l,h-f)}var A=p?e:this,T=_?A[t]:t;return f=b.length,s?b=ko(b,s):v&&f>1&&b.reverse(),d&&l<f&&(b.length=l),this&&this!==an&&this instanceof i&&(T=y||Di(T)),T.apply(A,b)}}function Li(t,n){return function(e,r){return function(t,n,e,r){return yr(t,(function(t,i,o){n(r,e(t),i,o)})),r}(e,t,n(r),{})}}function Fi(t,n){return function(e,r){var o;if(e===i&&r===i)return n;if(e!==i&&(o=e),r!==i){if(o===i)return r;"string"==typeof e||"string"==typeof r?(e=ai(e),r=ai(r)):(e=oi(e),r=oi(r)),o=t(e,r)}return o}}function Bi(t){return Ji((function(n){return n=kn(n,Yn(oo())),Vr((function(e){var r=this;return t(n,(function(t){return yn(t,r,e)}))}))}))}function Ii(t,n){var e=(n=n===i?" ":ai(n)).length;if(e<2)return e?Wr(n,t):n;var r=Wr(n,fe(t/ie(n)));return Qn(n)?yi(oe(r),0,t).join(""):r.slice(0,t)}function qi(t){return function(n,e,o){return o&&"number"!=typeof o&&vo(n,e,o)&&(e=o=i),n=du(n),e===i?(e=n,n=0):e=du(e),function(t,n,e,i){for(var o=-1,a=ge(fe((n-t)/(e||1)),0),u=r(a);a--;)u[i?a:++o]=t,t+=e;return u}(n,e,o=o===i?n<e?1:-1:du(o),t)}}function Yi(t){return function(n,e){return"string"==typeof n&&"string"==typeof e||(n=gu(n),e=gu(e)),t(n,e)}}function Hi(t,n,e,r,o,a,u,f,s,l){var h=8&n;n|=h?c:64,4&(n&=~(h?64:c))||(n&=-4);var d=[t,n,o,h?a:i,h?u:i,h?i:a,h?i:u,f,s,l],p=e.apply(i,d);return bo(t)&&Eo(p,d),p.placeholder=r,zo(p,t,n)}function Zi(t){var n=At[t];return function(t,e){if(t=gu(t),(e=null==e?0:ve(pu(e),292))&&de(t)){var r=(yu(t)+"e").split("e");return+((r=(yu(n(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return n(t)}}var Wi=Te&&1/ee(new Te([,-0]))[1]==s?function(t){return new Te(t)}:cc;function Vi(t){return function(n){var e=lo(n);return e==w?Jn(n):e==S?re(n):function(t,n){return kn(n,(function(n){return[n,t[n]]}))}(n,t(n))}}function Xi(t,n,e,a,s,l,h,d){var p=2&n;if(!p&&"function"!=typeof t)throw new Et(o);var _=a?a.length:0;if(_||(n&=-97,a=s=i),h=h===i?h:ge(pu(h),0),d=d===i?d:pu(d),_-=s?s.length:0,64&n){var g=a,v=s;a=s=i}var y=p?i:eo(t),b=[t,n,e,a,s,g,v,l,h,d];if(y&&function(t,n){var e=t[1],r=n[1],i=e|r,o=i<131,a=r==f&&8==e||r==f&&256==e&&t[7].length<=n[8]||384==r&&n[7].length<=n[8]&&8==e;if(!o&&!a)return t;1&r&&(t[2]=n[2],i|=1&e?0:4);var c=n[3];if(c){var s=t[3];t[3]=s?Ai(s,c,n[4]):c,t[4]=s?ne(t[3],u):n[4]}(c=n[5])&&(s=t[5],t[5]=s?Ti(s,c,n[6]):c,t[6]=s?ne(t[5],u):n[6]),(c=n[7])&&(t[7]=c),r&f&&(t[8]=null==t[8]?n[8]:ve(t[8],n[8])),null==t[9]&&(t[9]=n[9]),t[0]=n[0],t[1]=i}(b,y),t=b[0],n=b[1],e=b[2],a=b[3],s=b[4],!(d=b[9]=b[9]===i?p?0:t.length:ge(b[9]-_,0))&&24&n&&(n&=-25),n&&1!=n)m=8==n||16==n?function(t,n,e){var o=Di(t);return function a(){for(var u=arguments.length,c=r(u),f=u,s=io(a);f--;)c[f]=arguments[f];var l=u<3&&c[0]!==s&&c[u-1]!==s?[]:ne(c,s);return(u-=l.length)<e?Hi(t,n,Pi,a.placeholder,i,c,l,i,i,e-u):yn(this&&this!==an&&this instanceof a?o:t,this,c)}}(t,n,d):n!=c&&33!=n||s.length?Pi.apply(i,b):function(t,n,e,i){var o=1&n,a=Di(t);return function n(){for(var u=-1,c=arguments.length,f=-1,s=i.length,l=r(s+c),h=this&&this!==an&&this instanceof n?a:t;++f<s;)l[f]=i[f];for(;c--;)l[f++]=arguments[++u];return yn(h,o?e:this,l)}}(t,n,e,a);else var m=function(t,n,e){var r=1&n,i=Di(t);return function n(){return(this&&this!==an&&this instanceof n?i:t).apply(r?e:this,arguments)}}(t,n,e);return zo((y?Kr:Eo)(m,b),t,n)}function $i(t,n,e,r){return t===i||Ba(t,zt[e])&&!Dt.call(r,e)?n:t}function Gi(t,n,e,r,o,a){return tu(t)&&tu(n)&&(a.set(n,t),Fr(t,n,i,Gi,a),a.delete(n)),t}function Ki(t){return iu(t)?i:t}function Qi(t,n,e,r,o,a){var u=1&e,c=t.length,f=n.length;if(c!=f&&!(u&&f>c))return!1;var s=a.get(t),l=a.get(n);if(s&&l)return s==n&&l==t;var h=-1,d=!0,p=2&e?new We:i;for(a.set(t,n),a.set(n,t);++h<c;){var _=t[h],g=n[h];if(r)var v=u?r(g,_,h,n,t,a):r(_,g,h,t,n,a);if(v!==i){if(v)continue;d=!1;break}if(p){if(!Cn(n,(function(t,n){if(!Zn(p,n)&&(_===t||o(_,t,e,r,a)))return p.push(n)}))){d=!1;break}}else if(_!==g&&!o(_,g,e,r,a)){d=!1;break}}return a.delete(t),a.delete(n),d}function Ji(t){return Co(Ao(t,i,Zo),t+"")}function to(t){return wr(t,zu,fo)}function no(t){return wr(t,Uu,so)}var eo=Ee?function(t){return Ee.get(t)}:cc;function ro(t){for(var n=t.name+"",e=Ne[n],r=Dt.call(Ne,n)?e.length:0;r--;){var i=e[r],o=i.func;if(null==o||o==t)return i.name}return n}function io(t){return(Dt.call(Le,"placeholder")?Le:t).placeholder}function oo(){var t=Le.iteratee||ic;return t=t===ic?Or:t,arguments.length?t(arguments[0],arguments[1]):t}function ao(t,n){var e,r,i=t.__data__;return("string"==(r=typeof(e=n))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?i["string"==typeof n?"string":"hash"]:i.map}function uo(t){for(var n=zu(t),e=n.length;e--;){var r=n[e],i=t[r];n[e]=[r,i,wo(i)]}return n}function co(t,n){var e=function(t,n){return null==t?i:t[n]}(t,n);return Ur(e)?e:i}var fo=le?function(t){return null==t?[]:(t=Tt(t),Mn(le(t),(function(n){return rn.call(t,n)})))}:_c,so=le?function(t){for(var n=[];t;)Sn(n,fo(t)),t=Xt(t);return n}:_c,lo=Mr;function ho(t,n,e){for(var r=-1,i=(n=gi(n,t)).length,o=!1;++r<i;){var a=Po(n[r]);if(!(o=null!=t&&e(t,a)))break;t=t[a]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Ja(i)&&go(a,i)&&(Ha(t)||Ya(t))}function po(t){return"function"!=typeof t.constructor||xo(t)?{}:Fe(Xt(t))}function _o(t){return Ha(t)||Ya(t)||!!(un&&t&&t[un])}function go(t,n){var e=typeof t;return!!(n=null==n?l:n)&&("number"==e||"symbol"!=e&&vt.test(t))&&t>-1&&t%1==0&&t<n}function vo(t,n,e){if(!tu(e))return!1;var r=typeof n;return!!("number"==r?Wa(e)&&go(n,e.length):"string"==r&&n in e)&&Ba(e[n],t)}function yo(t,n){if(Ha(t))return!1;var e=typeof t;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=t&&!cu(t))||J.test(t)||!Q.test(t)||null!=n&&t in Tt(n)}function bo(t){var n=ro(t),e=Le[n];if("function"!=typeof e||!(n in qe.prototype))return!1;if(t===e)return!0;var r=eo(e);return!!r&&t===r[0]}(we&&lo(new we(new ArrayBuffer(1)))!=U||Me&&lo(new Me)!=w||Ae&&lo(Ae.resolve())!=T||Te&&lo(new Te)!=S||ke&&lo(new ke)!=C)&&(lo=function(t){var n=Mr(t),e=n==A?t.constructor:i,r=e?Lo(e):"";if(r)switch(r){case Ce:return U;case ze:return w;case Ue:return T;case Oe:return S;case De:return C}return n});var mo=Ut?Ka:gc;function xo(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||zt)}function wo(t){return t==t&&!tu(t)}function Mo(t,n){return function(e){return null!=e&&e[t]===n&&(n!==i||t in Tt(e))}}function Ao(t,n,e){return n=ge(n===i?t.length-1:n,0),function(){for(var i=arguments,o=-1,a=ge(i.length-n,0),u=r(a);++o<a;)u[o]=i[n+o];o=-1;for(var c=r(n+1);++o<n;)c[o]=i[o];return c[n]=e(u),yn(t,this,c)}}function To(t,n){return n.length<2?t:xr(t,ti(n,0,-1))}function ko(t,n){for(var e=t.length,r=ve(n.length,e),o=ki(t);r--;){var a=n[r];t[r]=go(a,e)?o[a]:i}return t}function So(t,n){if(("constructor"!==n||"function"!=typeof t[n])&&"__proto__"!=n)return t[n]}var Eo=Uo(Kr),No=ce||function(t,n){return an.setTimeout(t,n)},Co=Uo(Qr);function zo(t,n,e){var r=n+"";return Co(t,function(t,n){var e=n.length;if(!e)return t;var r=e-1;return n[r]=(e>1?"& ":"")+n[r],n=n.join(e>2?", ":" "),t.replace(at,"{\n/* [wrapped with "+n+"] */\n")}(r,function(t,n){return mn(p,(function(e){var r="_."+e[0];n&e[1]&&!An(t,r)&&t.push(r)})),t.sort()}(function(t){var n=t.match(ut);return n?n[1].split(ct):[]}(r),e)))}function Uo(t){var n=0,e=0;return function(){var r=ye(),o=16-(r-e);if(e=r,o>0){if(++n>=800)return arguments[0]}else n=0;return t.apply(i,arguments)}}function Oo(t,n){var e=-1,r=t.length,o=r-1;for(n=n===i?r:n;++e<n;){var a=Zr(e,o),u=t[a];t[a]=t[e],t[e]=u}return t.length=n,t}var Do,jo,Ro=(Do=Da((function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(tt,(function(t,e,r,i){n.push(r?i.replace(st,"$1"):e||t)})),n}),(function(t){return 500===jo.size&&jo.clear(),t})),jo=Do.cache,Do);function Po(t){if("string"==typeof t||cu(t))return t;var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function Lo(t){if(null!=t){try{return Ot.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Fo(t){if(t instanceof qe)return t.clone();var n=new Ie(t.__wrapped__,t.__chain__);return n.__actions__=ki(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var Bo=Vr((function(t,n){return Va(t)?fr(t,_r(n,1,Va,!0)):[]})),Io=Vr((function(t,n){var e=Go(n);return Va(e)&&(e=i),Va(t)?fr(t,_r(n,1,Va,!0),oo(e,2)):[]})),qo=Vr((function(t,n){var e=Go(n);return Va(e)&&(e=i),Va(t)?fr(t,_r(n,1,Va,!0),i,e):[]}));function Yo(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:pu(e);return i<0&&(i=ge(r+i,0)),On(t,oo(n,3),i)}function Ho(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=r-1;return e!==i&&(o=pu(e),o=e<0?ge(r+o,0):ve(o,r-1)),On(t,oo(n,3),o,!0)}function Zo(t){return null!=t&&t.length?_r(t,1):[]}function Wo(t){return t&&t.length?t[0]:i}var Vo=Vr((function(t){var n=kn(t,pi);return n.length&&n[0]===t[0]?Sr(n):[]})),Xo=Vr((function(t){var n=Go(t),e=kn(t,pi);return n===Go(e)?n=i:e.pop(),e.length&&e[0]===t[0]?Sr(e,oo(n,2)):[]})),$o=Vr((function(t){var n=Go(t),e=kn(t,pi);return(n="function"==typeof n?n:i)&&e.pop(),e.length&&e[0]===t[0]?Sr(e,i,n):[]}));function Go(t){var n=null==t?0:t.length;return n?t[n-1]:i}var Ko=Vr(Qo);function Qo(t,n){return t&&t.length&&n&&n.length?Yr(t,n):t}var Jo=Ji((function(t,n){var e=null==t?0:t.length,r=ir(t,n);return Hr(t,kn(n,(function(t){return go(t,e)?+t:t})).sort(Mi)),r}));function ta(t){return null==t?t:xe.call(t)}var na=Vr((function(t){return ui(_r(t,1,Va,!0))})),ea=Vr((function(t){var n=Go(t);return Va(n)&&(n=i),ui(_r(t,1,Va,!0),oo(n,2))})),ra=Vr((function(t){var n=Go(t);return n="function"==typeof n?n:i,ui(_r(t,1,Va,!0),i,n)}));function ia(t){if(!t||!t.length)return[];var n=0;return t=Mn(t,(function(t){if(Va(t))return n=ge(t.length,n),!0})),qn(n,(function(n){return kn(t,Ln(n))}))}function oa(t,n){if(!t||!t.length)return[];var e=ia(t);return null==n?e:kn(e,(function(t){return yn(n,i,t)}))}var aa=Vr((function(t,n){return Va(t)?fr(t,n):[]})),ua=Vr((function(t){return hi(Mn(t,Va))})),ca=Vr((function(t){var n=Go(t);return Va(n)&&(n=i),hi(Mn(t,Va),oo(n,2))})),fa=Vr((function(t){var n=Go(t);return n="function"==typeof n?n:i,hi(Mn(t,Va),i,n)})),sa=Vr(ia),la=Vr((function(t){var n=t.length,e=n>1?t[n-1]:i;return e="function"==typeof e?(t.pop(),e):i,oa(t,e)}));function ha(t){var n=Le(t);return n.__chain__=!0,n}function da(t,n){return n(t)}var pa=Ji((function(t){var n=t.length,e=n?t[0]:0,r=this.__wrapped__,o=function(n){return ir(n,t)};return!(n>1||this.__actions__.length)&&r instanceof qe&&go(e)?((r=r.slice(e,+e+(n?1:0))).__actions__.push({func:da,args:[o],thisArg:i}),new Ie(r,this.__chain__).thru((function(t){return n&&!t.length&&t.push(i),t}))):this.thru(o)})),_a=Ei((function(t,n,e){Dt.call(t,e)?++t[e]:rr(t,e,1)})),ga=ji(Yo),va=ji(Ho);function ya(t,n){return(Ha(t)?mn:sr)(t,oo(n,3))}function ba(t,n){return(Ha(t)?xn:lr)(t,oo(n,3))}var ma=Ei((function(t,n,e){Dt.call(t,e)?t[e].push(n):rr(t,e,[n])})),xa=Vr((function(t,n,e){var i=-1,o="function"==typeof n,a=Wa(t)?r(t.length):[];return sr(t,(function(t){a[++i]=o?yn(n,t,e):Er(t,n,e)})),a})),wa=Ei((function(t,n,e){rr(t,e,n)}));function Ma(t,n){return(Ha(t)?kn:Rr)(t,oo(n,3))}var Aa=Ei((function(t,n,e){t[e?0:1].push(n)}),(function(){return[[],[]]})),Ta=Vr((function(t,n){if(null==t)return[];var e=n.length;return e>1&&vo(t,n[0],n[1])?n=[]:e>2&&vo(n[0],n[1],n[2])&&(n=[n[0]]),Ir(t,_r(n,1),[])})),ka=Fn||function(){return an.Date.now()};function Sa(t,n,e){return n=e?i:n,n=t&&null==n?t.length:n,Xi(t,f,i,i,i,i,n)}function Ea(t,n){var e;if("function"!=typeof n)throw new Et(o);return t=pu(t),function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=i),e}}var Na=Vr((function(t,n,e){var r=1;if(e.length){var i=ne(e,io(Na));r|=c}return Xi(t,r,n,e,i)})),Ca=Vr((function(t,n,e){var r=3;if(e.length){var i=ne(e,io(Ca));r|=c}return Xi(n,r,t,e,i)}));function za(t,n,e){var r,a,u,c,f,s,l=0,h=!1,d=!1,p=!0;if("function"!=typeof t)throw new Et(o);function _(n){var e=r,o=a;return r=a=i,l=n,c=t.apply(o,e)}function g(t){return l=t,f=No(y,n),h?_(t):c}function v(t){var e=t-s;return s===i||e>=n||e<0||d&&t-l>=u}function y(){var t=ka();if(v(t))return b(t);f=No(y,function(t){var e=n-(t-s);return d?ve(e,u-(t-l)):e}(t))}function b(t){return f=i,p&&r?_(t):(r=a=i,c)}function m(){var t=ka(),e=v(t);if(r=arguments,a=this,s=t,e){if(f===i)return g(s);if(d)return bi(f),f=No(y,n),_(s)}return f===i&&(f=No(y,n)),c}return n=gu(n)||0,tu(e)&&(h=!!e.leading,u=(d="maxWait"in e)?ge(gu(e.maxWait)||0,n):u,p="trailing"in e?!!e.trailing:p),m.cancel=function(){f!==i&&bi(f),l=0,r=s=a=f=i},m.flush=function(){return f===i?c:b(ka())},m}var Ua=Vr((function(t,n){return cr(t,1,n)})),Oa=Vr((function(t,n,e){return cr(t,gu(n)||0,e)}));function Da(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new Et(o);var e=function(){var r=arguments,i=n?n.apply(this,r):r[0],o=e.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return e.cache=o.set(i,a)||o,a};return e.cache=new(Da.Cache||Ze),e}function ja(t){if("function"!=typeof t)throw new Et(o);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}Da.Cache=Ze;var Ra=vi((function(t,n){var e=(n=1==n.length&&Ha(n[0])?kn(n[0],Yn(oo())):kn(_r(n,1),Yn(oo()))).length;return Vr((function(r){for(var i=-1,o=ve(r.length,e);++i<o;)r[i]=n[i].call(this,r[i]);return yn(t,this,r)}))})),Pa=Vr((function(t,n){var e=ne(n,io(Pa));return Xi(t,c,i,n,e)})),La=Vr((function(t,n){var e=ne(n,io(La));return Xi(t,64,i,n,e)})),Fa=Ji((function(t,n){return Xi(t,256,i,i,i,n)}));function Ba(t,n){return t===n||t!=t&&n!=n}var Ia=Yi(Ar),qa=Yi((function(t,n){return t>=n})),Ya=Nr(function(){return arguments}())?Nr:function(t){return nu(t)&&Dt.call(t,"callee")&&!rn.call(t,"callee")},Ha=r.isArray,Za=hn?Yn(hn):function(t){return nu(t)&&Mr(t)==z};function Wa(t){return null!=t&&Ja(t.length)&&!Ka(t)}function Va(t){return nu(t)&&Wa(t)}var Xa=he||gc,$a=dn?Yn(dn):function(t){return nu(t)&&Mr(t)==y};function Ga(t){if(!nu(t))return!1;var n=Mr(t);return n==b||"[object DOMException]"==n||"string"==typeof t.message&&"string"==typeof t.name&&!iu(t)}function Ka(t){if(!tu(t))return!1;var n=Mr(t);return n==m||n==x||"[object AsyncFunction]"==n||"[object Proxy]"==n}function Qa(t){return"number"==typeof t&&t==pu(t)}function Ja(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=l}function tu(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function nu(t){return null!=t&&"object"==typeof t}var eu=pn?Yn(pn):function(t){return nu(t)&&lo(t)==w};function ru(t){return"number"==typeof t||nu(t)&&Mr(t)==M}function iu(t){if(!nu(t)||Mr(t)!=A)return!1;var n=Xt(t);if(null===n)return!0;var e=Dt.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&Ot.call(e)==Lt}var ou=_n?Yn(_n):function(t){return nu(t)&&Mr(t)==k},au=gn?Yn(gn):function(t){return nu(t)&&lo(t)==S};function uu(t){return"string"==typeof t||!Ha(t)&&nu(t)&&Mr(t)==E}function cu(t){return"symbol"==typeof t||nu(t)&&Mr(t)==N}var fu=vn?Yn(vn):function(t){return nu(t)&&Ja(t.length)&&!!Qt[Mr(t)]},su=Yi(jr),lu=Yi((function(t,n){return t<=n}));function hu(t){if(!t)return[];if(Wa(t))return uu(t)?oe(t):ki(t);if(cn&&t[cn])return function(t){for(var n,e=[];!(n=t.next()).done;)e.push(n.value);return e}(t[cn]());var n=lo(t);return(n==w?Jn:n==S?ee:Bu)(t)}function du(t){return t?(t=gu(t))===s||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function pu(t){var n=du(t),e=n%1;return n==n?e?n-e:n:0}function _u(t){return t?or(pu(t),0,d):0}function gu(t){if("number"==typeof t)return t;if(cu(t))return h;if(tu(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=tu(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(rt,"");var e=pt.test(t);return e||gt.test(t)?en(t.slice(2),e?2:8):dt.test(t)?h:+t}function vu(t){return Si(t,Uu(t))}function yu(t){return null==t?"":ai(t)}var bu=Ni((function(t,n){if(xo(n)||Wa(n))Si(n,zu(n),t);else for(var e in n)Dt.call(n,e)&&Je(t,e,n[e])})),mu=Ni((function(t,n){Si(n,Uu(n),t)})),xu=Ni((function(t,n,e,r){Si(n,Uu(n),t,r)})),wu=Ni((function(t,n,e,r){Si(n,zu(n),t,r)})),Mu=Ji(ir),Au=Vr((function(t,n){t=Tt(t);var e=-1,r=n.length,o=r>2?n[2]:i;for(o&&vo(n[0],n[1],o)&&(r=1);++e<r;)for(var a=n[e],u=Uu(a),c=-1,f=u.length;++c<f;){var s=u[c],l=t[s];(l===i||Ba(l,zt[s])&&!Dt.call(t,s))&&(t[s]=a[s])}return t})),Tu=Vr((function(t){return t.push(i,Gi),yn(Du,i,t)}));function ku(t,n,e){var r=null==t?i:xr(t,n);return r===i?e:r}function Su(t,n){return null!=t&&ho(t,n,kr)}var Eu=Li((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=Pt.call(n)),t[n]=e}),tc(rc)),Nu=Li((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=Pt.call(n)),Dt.call(t,n)?t[n].push(e):t[n]=[e]}),oo),Cu=Vr(Er);function zu(t){return Wa(t)?Xe(t):Dr(t)}function Uu(t){return Wa(t)?Xe(t,!0):function(t){if(!tu(t))return function(t){var n=[];if(null!=t)for(var e in Tt(t))n.push(e);return n}(t);var n=xo(t),e=[];for(var r in t)("constructor"!=r||!n&&Dt.call(t,r))&&e.push(r);return e}(t)}var Ou=Ni((function(t,n,e){Fr(t,n,e)})),Du=Ni((function(t,n,e,r){Fr(t,n,e,r)})),ju=Ji((function(t,n){var e={};if(null==t)return e;var r=!1;n=kn(n,(function(n){return n=gi(n,t),r||(r=n.length>1),n})),Si(t,no(t),e),r&&(e=ar(e,7,Ki));for(var i=n.length;i--;)ci(e,n[i]);return e})),Ru=Ji((function(t,n){return null==t?{}:function(t,n){return qr(t,n,(function(n,e){return Su(t,e)}))}(t,n)}));function Pu(t,n){if(null==t)return{};var e=kn(no(t),(function(t){return[t]}));return n=oo(n),qr(t,e,(function(t,e){return n(t,e[0])}))}var Lu=Vi(zu),Fu=Vi(Uu);function Bu(t){return null==t?[]:Hn(t,zu(t))}var Iu=Oi((function(t,n,e){return n=n.toLowerCase(),t+(e?qu(n):n)}));function qu(t){return Gu(yu(t).toLowerCase())}function Yu(t){return(t=yu(t))&&t.replace(yt,$n).replace(Zt,"")}var Hu=Oi((function(t,n,e){return t+(e?"-":"")+n.toLowerCase()})),Zu=Oi((function(t,n,e){return t+(e?" ":"")+n.toLowerCase()})),Wu=Ui("toLowerCase"),Vu=Oi((function(t,n,e){return t+(e?"_":"")+n.toLowerCase()})),Xu=Oi((function(t,n,e){return t+(e?" ":"")+Gu(n)})),$u=Oi((function(t,n,e){return t+(e?" ":"")+n.toUpperCase()})),Gu=Ui("toUpperCase");function Ku(t,n,e){return t=yu(t),(n=e?i:n)===i?function(t){return $t.test(t)}(t)?function(t){return t.match(Vt)||[]}(t):function(t){return t.match(ft)||[]}(t):t.match(n)||[]}var Qu=Vr((function(t,n){try{return yn(t,i,n)}catch(t){return Ga(t)?t:new wt(t)}})),Ju=Ji((function(t,n){return mn(n,(function(n){n=Po(n),rr(t,n,Na(t[n],t))})),t}));function tc(t){return function(){return t}}var nc=Ri(),ec=Ri(!0);function rc(t){return t}function ic(t){return Or("function"==typeof t?t:ar(t,1))}var oc=Vr((function(t,n){return function(e){return Er(e,t,n)}})),ac=Vr((function(t,n){return function(e){return Er(t,e,n)}}));function uc(t,n,e){var r=zu(n),i=mr(n,r);null!=e||tu(n)&&(i.length||!r.length)||(e=n,n=t,t=this,i=mr(n,zu(n)));var o=!(tu(e)&&"chain"in e&&!e.chain),a=Ka(t);return mn(i,(function(e){var r=n[e];t[e]=r,a&&(t.prototype[e]=function(){var n=this.__chain__;if(o||n){var e=t(this.__wrapped__),i=e.__actions__=ki(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),e.__chain__=n,e}return r.apply(t,Sn([this.value()],arguments))})})),t}function cc(){}var fc=Bi(kn),sc=Bi(wn),lc=Bi(Cn);function hc(t){return yo(t)?Ln(Po(t)):function(t){return function(n){return xr(n,t)}}(t)}var dc=qi(),pc=qi(!0);function _c(){return[]}function gc(){return!1}var vc,yc=Fi((function(t,n){return t+n}),0),bc=Zi("ceil"),mc=Fi((function(t,n){return t/n}),1),xc=Zi("floor"),wc=Fi((function(t,n){return t*n}),1),Mc=Zi("round"),Ac=Fi((function(t,n){return t-n}),0);return Le.after=function(t,n){if("function"!=typeof n)throw new Et(o);return t=pu(t),function(){if(--t<1)return n.apply(this,arguments)}},Le.ary=Sa,Le.assign=bu,Le.assignIn=mu,Le.assignInWith=xu,Le.assignWith=wu,Le.at=Mu,Le.before=Ea,Le.bind=Na,Le.bindAll=Ju,Le.bindKey=Ca,Le.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Ha(t)?t:[t]},Le.chain=ha,Le.chunk=function(t,n,e){n=(e?vo(t,n,e):n===i)?1:ge(pu(n),0);var o=null==t?0:t.length;if(!o||n<1)return[];for(var a=0,u=0,c=r(fe(o/n));a<o;)c[u++]=ti(t,a,a+=n);return c},Le.compact=function(t){for(var n=-1,e=null==t?0:t.length,r=0,i=[];++n<e;){var o=t[n];o&&(i[r++]=o)}return i},Le.concat=function(){var t=arguments.length;if(!t)return[];for(var n=r(t-1),e=arguments[0],i=t;i--;)n[i-1]=arguments[i];return Sn(Ha(e)?ki(e):[e],_r(n,1))},Le.cond=function(t){var n=null==t?0:t.length,e=oo();return t=n?kn(t,(function(t){if("function"!=typeof t[1])throw new Et(o);return[e(t[0]),t[1]]})):[],Vr((function(e){for(var r=-1;++r<n;){var i=t[r];if(yn(i[0],this,e))return yn(i[1],this,e)}}))},Le.conforms=function(t){return function(t){var n=zu(t);return function(e){return ur(e,t,n)}}(ar(t,1))},Le.constant=tc,Le.countBy=_a,Le.create=function(t,n){var e=Fe(t);return null==n?e:er(e,n)},Le.curry=function t(n,e,r){var o=Xi(n,8,i,i,i,i,i,e=r?i:e);return o.placeholder=t.placeholder,o},Le.curryRight=function t(n,e,r){var o=Xi(n,16,i,i,i,i,i,e=r?i:e);return o.placeholder=t.placeholder,o},Le.debounce=za,Le.defaults=Au,Le.defaultsDeep=Tu,Le.defer=Ua,Le.delay=Oa,Le.difference=Bo,Le.differenceBy=Io,Le.differenceWith=qo,Le.drop=function(t,n,e){var r=null==t?0:t.length;return r?ti(t,(n=e||n===i?1:pu(n))<0?0:n,r):[]},Le.dropRight=function(t,n,e){var r=null==t?0:t.length;return r?ti(t,0,(n=r-(n=e||n===i?1:pu(n)))<0?0:n):[]},Le.dropRightWhile=function(t,n){return t&&t.length?si(t,oo(n,3),!0,!0):[]},Le.dropWhile=function(t,n){return t&&t.length?si(t,oo(n,3),!0):[]},Le.fill=function(t,n,e,r){var o=null==t?0:t.length;return o?(e&&"number"!=typeof e&&vo(t,n,e)&&(e=0,r=o),function(t,n,e,r){var o=t.length;for((e=pu(e))<0&&(e=-e>o?0:o+e),(r=r===i||r>o?o:pu(r))<0&&(r+=o),r=e>r?0:_u(r);e<r;)t[e++]=n;return t}(t,n,e,r)):[]},Le.filter=function(t,n){return(Ha(t)?Mn:pr)(t,oo(n,3))},Le.flatMap=function(t,n){return _r(Ma(t,n),1)},Le.flatMapDeep=function(t,n){return _r(Ma(t,n),s)},Le.flatMapDepth=function(t,n,e){return e=e===i?1:pu(e),_r(Ma(t,n),e)},Le.flatten=Zo,Le.flattenDeep=function(t){return null!=t&&t.length?_r(t,s):[]},Le.flattenDepth=function(t,n){return null!=t&&t.length?_r(t,n=n===i?1:pu(n)):[]},Le.flip=function(t){return Xi(t,512)},Le.flow=nc,Le.flowRight=ec,Le.fromPairs=function(t){for(var n=-1,e=null==t?0:t.length,r={};++n<e;){var i=t[n];r[i[0]]=i[1]}return r},Le.functions=function(t){return null==t?[]:mr(t,zu(t))},Le.functionsIn=function(t){return null==t?[]:mr(t,Uu(t))},Le.groupBy=ma,Le.initial=function(t){return null!=t&&t.length?ti(t,0,-1):[]},Le.intersection=Vo,Le.intersectionBy=Xo,Le.intersectionWith=$o,Le.invert=Eu,Le.invertBy=Nu,Le.invokeMap=xa,Le.iteratee=ic,Le.keyBy=wa,Le.keys=zu,Le.keysIn=Uu,Le.map=Ma,Le.mapKeys=function(t,n){var e={};return n=oo(n,3),yr(t,(function(t,r,i){rr(e,n(t,r,i),t)})),e},Le.mapValues=function(t,n){var e={};return n=oo(n,3),yr(t,(function(t,r,i){rr(e,r,n(t,r,i))})),e},Le.matches=function(t){return Pr(ar(t,1))},Le.matchesProperty=function(t,n){return Lr(t,ar(n,1))},Le.memoize=Da,Le.merge=Ou,Le.mergeWith=Du,Le.method=oc,Le.methodOf=ac,Le.mixin=uc,Le.negate=ja,Le.nthArg=function(t){return t=pu(t),Vr((function(n){return Br(n,t)}))},Le.omit=ju,Le.omitBy=function(t,n){return Pu(t,ja(oo(n)))},Le.once=function(t){return Ea(2,t)},Le.orderBy=function(t,n,e,r){return null==t?[]:(Ha(n)||(n=null==n?[]:[n]),Ha(e=r?i:e)||(e=null==e?[]:[e]),Ir(t,n,e))},Le.over=fc,Le.overArgs=Ra,Le.overEvery=sc,Le.overSome=lc,Le.partial=Pa,Le.partialRight=La,Le.partition=Aa,Le.pick=Ru,Le.pickBy=Pu,Le.property=hc,Le.propertyOf=function(t){return function(n){return null==t?i:xr(t,n)}},Le.pull=Ko,Le.pullAll=Qo,Le.pullAllBy=function(t,n,e){return t&&t.length&&n&&n.length?Yr(t,n,oo(e,2)):t},Le.pullAllWith=function(t,n,e){return t&&t.length&&n&&n.length?Yr(t,n,i,e):t},Le.pullAt=Jo,Le.range=dc,Le.rangeRight=pc,Le.rearg=Fa,Le.reject=function(t,n){return(Ha(t)?Mn:pr)(t,ja(oo(n,3)))},Le.remove=function(t,n){var e=[];if(!t||!t.length)return e;var r=-1,i=[],o=t.length;for(n=oo(n,3);++r<o;){var a=t[r];n(a,r,t)&&(e.push(a),i.push(r))}return Hr(t,i),e},Le.rest=function(t,n){if("function"!=typeof t)throw new Et(o);return Vr(t,n=n===i?n:pu(n))},Le.reverse=ta,Le.sampleSize=function(t,n,e){return n=(e?vo(t,n,e):n===i)?1:pu(n),(Ha(t)?Ge:$r)(t,n)},Le.set=function(t,n,e){return null==t?t:Gr(t,n,e)},Le.setWith=function(t,n,e,r){return r="function"==typeof r?r:i,null==t?t:Gr(t,n,e,r)},Le.shuffle=function(t){return(Ha(t)?Ke:Jr)(t)},Le.slice=function(t,n,e){var r=null==t?0:t.length;return r?(e&&"number"!=typeof e&&vo(t,n,e)?(n=0,e=r):(n=null==n?0:pu(n),e=e===i?r:pu(e)),ti(t,n,e)):[]},Le.sortBy=Ta,Le.sortedUniq=function(t){return t&&t.length?ii(t):[]},Le.sortedUniqBy=function(t,n){return t&&t.length?ii(t,oo(n,2)):[]},Le.split=function(t,n,e){return e&&"number"!=typeof e&&vo(t,n,e)&&(n=e=i),(e=e===i?d:e>>>0)?(t=yu(t))&&("string"==typeof n||null!=n&&!ou(n))&&!(n=ai(n))&&Qn(t)?yi(oe(t),0,e):t.split(n,e):[]},Le.spread=function(t,n){if("function"!=typeof t)throw new Et(o);return n=null==n?0:ge(pu(n),0),Vr((function(e){var r=e[n],i=yi(e,0,n);return r&&Sn(i,r),yn(t,this,i)}))},Le.tail=function(t){var n=null==t?0:t.length;return n?ti(t,1,n):[]},Le.take=function(t,n,e){return t&&t.length?ti(t,0,(n=e||n===i?1:pu(n))<0?0:n):[]},Le.takeRight=function(t,n,e){var r=null==t?0:t.length;return r?ti(t,(n=r-(n=e||n===i?1:pu(n)))<0?0:n,r):[]},Le.takeRightWhile=function(t,n){return t&&t.length?si(t,oo(n,3),!1,!0):[]},Le.takeWhile=function(t,n){return t&&t.length?si(t,oo(n,3)):[]},Le.tap=function(t,n){return n(t),t},Le.throttle=function(t,n,e){var r=!0,i=!0;if("function"!=typeof t)throw new Et(o);return tu(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),za(t,n,{leading:r,maxWait:n,trailing:i})},Le.thru=da,Le.toArray=hu,Le.toPairs=Lu,Le.toPairsIn=Fu,Le.toPath=function(t){return Ha(t)?kn(t,Po):cu(t)?[t]:ki(Ro(yu(t)))},Le.toPlainObject=vu,Le.transform=function(t,n,e){var r=Ha(t),i=r||Xa(t)||fu(t);if(n=oo(n,4),null==e){var o=t&&t.constructor;e=i?r?new o:[]:tu(t)&&Ka(o)?Fe(Xt(t)):{}}return(i?mn:yr)(t,(function(t,r,i){return n(e,t,r,i)})),e},Le.unary=function(t){return Sa(t,1)},Le.union=na,Le.unionBy=ea,Le.unionWith=ra,Le.uniq=function(t){return t&&t.length?ui(t):[]},Le.uniqBy=function(t,n){return t&&t.length?ui(t,oo(n,2)):[]},Le.uniqWith=function(t,n){return n="function"==typeof n?n:i,t&&t.length?ui(t,i,n):[]},Le.unset=function(t,n){return null==t||ci(t,n)},Le.unzip=ia,Le.unzipWith=oa,Le.update=function(t,n,e){return null==t?t:fi(t,n,_i(e))},Le.updateWith=function(t,n,e,r){return r="function"==typeof r?r:i,null==t?t:fi(t,n,_i(e),r)},Le.values=Bu,Le.valuesIn=function(t){return null==t?[]:Hn(t,Uu(t))},Le.without=aa,Le.words=Ku,Le.wrap=function(t,n){return Pa(_i(n),t)},Le.xor=ua,Le.xorBy=ca,Le.xorWith=fa,Le.zip=sa,Le.zipObject=function(t,n){return di(t||[],n||[],Je)},Le.zipObjectDeep=function(t,n){return di(t||[],n||[],Gr)},Le.zipWith=la,Le.entries=Lu,Le.entriesIn=Fu,Le.extend=mu,Le.extendWith=xu,uc(Le,Le),Le.add=yc,Le.attempt=Qu,Le.camelCase=Iu,Le.capitalize=qu,Le.ceil=bc,Le.clamp=function(t,n,e){return e===i&&(e=n,n=i),e!==i&&(e=(e=gu(e))==e?e:0),n!==i&&(n=(n=gu(n))==n?n:0),or(gu(t),n,e)},Le.clone=function(t){return ar(t,4)},Le.cloneDeep=function(t){return ar(t,5)},Le.cloneDeepWith=function(t,n){return ar(t,5,n="function"==typeof n?n:i)},Le.cloneWith=function(t,n){return ar(t,4,n="function"==typeof n?n:i)},Le.conformsTo=function(t,n){return null==n||ur(t,n,zu(n))},Le.deburr=Yu,Le.defaultTo=function(t,n){return null==t||t!=t?n:t},Le.divide=mc,Le.endsWith=function(t,n,e){t=yu(t),n=ai(n);var r=t.length,o=e=e===i?r:or(pu(e),0,r);return(e-=n.length)>=0&&t.slice(e,o)==n},Le.eq=Ba,Le.escape=function(t){return(t=yu(t))&&X.test(t)?t.replace(W,Gn):t},Le.escapeRegExp=function(t){return(t=yu(t))&&et.test(t)?t.replace(nt,"\\$&"):t},Le.every=function(t,n,e){var r=Ha(t)?wn:hr;return e&&vo(t,n,e)&&(n=i),r(t,oo(n,3))},Le.find=ga,Le.findIndex=Yo,Le.findKey=function(t,n){return Un(t,oo(n,3),yr)},Le.findLast=va,Le.findLastIndex=Ho,Le.findLastKey=function(t,n){return Un(t,oo(n,3),br)},Le.floor=xc,Le.forEach=ya,Le.forEachRight=ba,Le.forIn=function(t,n){return null==t?t:gr(t,oo(n,3),Uu)},Le.forInRight=function(t,n){return null==t?t:vr(t,oo(n,3),Uu)},Le.forOwn=function(t,n){return t&&yr(t,oo(n,3))},Le.forOwnRight=function(t,n){return t&&br(t,oo(n,3))},Le.get=ku,Le.gt=Ia,Le.gte=qa,Le.has=function(t,n){return null!=t&&ho(t,n,Tr)},Le.hasIn=Su,Le.head=Wo,Le.identity=rc,Le.includes=function(t,n,e,r){t=Wa(t)?t:Bu(t),e=e&&!r?pu(e):0;var i=t.length;return e<0&&(e=ge(i+e,0)),uu(t)?e<=i&&t.indexOf(n,e)>-1:!!i&&Dn(t,n,e)>-1},Le.indexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:pu(e);return i<0&&(i=ge(r+i,0)),Dn(t,n,i)},Le.inRange=function(t,n,e){return n=du(n),e===i?(e=n,n=0):e=du(e),function(t,n,e){return t>=ve(n,e)&&t<ge(n,e)}(t=gu(t),n,e)},Le.invoke=Cu,Le.isArguments=Ya,Le.isArray=Ha,Le.isArrayBuffer=Za,Le.isArrayLike=Wa,Le.isArrayLikeObject=Va,Le.isBoolean=function(t){return!0===t||!1===t||nu(t)&&Mr(t)==v},Le.isBuffer=Xa,Le.isDate=$a,Le.isElement=function(t){return nu(t)&&1===t.nodeType&&!iu(t)},Le.isEmpty=function(t){if(null==t)return!0;if(Wa(t)&&(Ha(t)||"string"==typeof t||"function"==typeof t.splice||Xa(t)||fu(t)||Ya(t)))return!t.length;var n=lo(t);if(n==w||n==S)return!t.size;if(xo(t))return!Dr(t).length;for(var e in t)if(Dt.call(t,e))return!1;return!0},Le.isEqual=function(t,n){return Cr(t,n)},Le.isEqualWith=function(t,n,e){var r=(e="function"==typeof e?e:i)?e(t,n):i;return r===i?Cr(t,n,i,e):!!r},Le.isError=Ga,Le.isFinite=function(t){return"number"==typeof t&&de(t)},Le.isFunction=Ka,Le.isInteger=Qa,Le.isLength=Ja,Le.isMap=eu,Le.isMatch=function(t,n){return t===n||zr(t,n,uo(n))},Le.isMatchWith=function(t,n,e){return e="function"==typeof e?e:i,zr(t,n,uo(n),e)},Le.isNaN=function(t){return ru(t)&&t!=+t},Le.isNative=function(t){if(mo(t))throw new wt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Ur(t)},Le.isNil=function(t){return null==t},Le.isNull=function(t){return null===t},Le.isNumber=ru,Le.isObject=tu,Le.isObjectLike=nu,Le.isPlainObject=iu,Le.isRegExp=ou,Le.isSafeInteger=function(t){return Qa(t)&&t>=-9007199254740991&&t<=l},Le.isSet=au,Le.isString=uu,Le.isSymbol=cu,Le.isTypedArray=fu,Le.isUndefined=function(t){return t===i},Le.isWeakMap=function(t){return nu(t)&&lo(t)==C},Le.isWeakSet=function(t){return nu(t)&&"[object WeakSet]"==Mr(t)},Le.join=function(t,n){return null==t?"":pe.call(t,n)},Le.kebabCase=Hu,Le.last=Go,Le.lastIndexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=r;return e!==i&&(o=(o=pu(e))<0?ge(r+o,0):ve(o,r-1)),n==n?function(t,n,e){for(var r=e+1;r--;)if(t[r]===n)return r;return r}(t,n,o):On(t,Rn,o,!0)},Le.lowerCase=Zu,Le.lowerFirst=Wu,Le.lt=su,Le.lte=lu,Le.max=function(t){return t&&t.length?dr(t,rc,Ar):i},Le.maxBy=function(t,n){return t&&t.length?dr(t,oo(n,2),Ar):i},Le.mean=function(t){return Pn(t,rc)},Le.meanBy=function(t,n){return Pn(t,oo(n,2))},Le.min=function(t){return t&&t.length?dr(t,rc,jr):i},Le.minBy=function(t,n){return t&&t.length?dr(t,oo(n,2),jr):i},Le.stubArray=_c,Le.stubFalse=gc,Le.stubObject=function(){return{}},Le.stubString=function(){return""},Le.stubTrue=function(){return!0},Le.multiply=wc,Le.nth=function(t,n){return t&&t.length?Br(t,pu(n)):i},Le.noConflict=function(){return an._===this&&(an._=Ft),this},Le.noop=cc,Le.now=ka,Le.pad=function(t,n,e){t=yu(t);var r=(n=pu(n))?ie(t):0;if(!n||r>=n)return t;var i=(n-r)/2;return Ii(se(i),e)+t+Ii(fe(i),e)},Le.padEnd=function(t,n,e){t=yu(t);var r=(n=pu(n))?ie(t):0;return n&&r<n?t+Ii(n-r,e):t},Le.padStart=function(t,n,e){t=yu(t);var r=(n=pu(n))?ie(t):0;return n&&r<n?Ii(n-r,e)+t:t},Le.parseInt=function(t,n,e){return e||null==n?n=0:n&&(n=+n),be(yu(t).replace(it,""),n||0)},Le.random=function(t,n,e){if(e&&"boolean"!=typeof e&&vo(t,n,e)&&(n=e=i),e===i&&("boolean"==typeof n?(e=n,n=i):"boolean"==typeof t&&(e=t,t=i)),t===i&&n===i?(t=0,n=1):(t=du(t),n===i?(n=t,t=0):n=du(n)),t>n){var r=t;t=n,n=r}if(e||t%1||n%1){var o=me();return ve(t+o*(n-t+nn("1e-"+((o+"").length-1))),n)}return Zr(t,n)},Le.reduce=function(t,n,e){var r=Ha(t)?En:Bn,i=arguments.length<3;return r(t,oo(n,4),e,i,sr)},Le.reduceRight=function(t,n,e){var r=Ha(t)?Nn:Bn,i=arguments.length<3;return r(t,oo(n,4),e,i,lr)},Le.repeat=function(t,n,e){return n=(e?vo(t,n,e):n===i)?1:pu(n),Wr(yu(t),n)},Le.replace=function(){var t=arguments,n=yu(t[0]);return t.length<3?n:n.replace(t[1],t[2])},Le.result=function(t,n,e){var r=-1,o=(n=gi(n,t)).length;for(o||(o=1,t=i);++r<o;){var a=null==t?i:t[Po(n[r])];a===i&&(r=o,a=e),t=Ka(a)?a.call(t):a}return t},Le.round=Mc,Le.runInContext=t,Le.sample=function(t){return(Ha(t)?$e:Xr)(t)},Le.size=function(t){if(null==t)return 0;if(Wa(t))return uu(t)?ie(t):t.length;var n=lo(t);return n==w||n==S?t.size:Dr(t).length},Le.snakeCase=Vu,Le.some=function(t,n,e){var r=Ha(t)?Cn:ni;return e&&vo(t,n,e)&&(n=i),r(t,oo(n,3))},Le.sortedIndex=function(t,n){return ei(t,n)},Le.sortedIndexBy=function(t,n,e){return ri(t,n,oo(e,2))},Le.sortedIndexOf=function(t,n){var e=null==t?0:t.length;if(e){var r=ei(t,n);if(r<e&&Ba(t[r],n))return r}return-1},Le.sortedLastIndex=function(t,n){return ei(t,n,!0)},Le.sortedLastIndexBy=function(t,n,e){return ri(t,n,oo(e,2),!0)},Le.sortedLastIndexOf=function(t,n){if(null!=t&&t.length){var e=ei(t,n,!0)-1;if(Ba(t[e],n))return e}return-1},Le.startCase=Xu,Le.startsWith=function(t,n,e){return t=yu(t),e=null==e?0:or(pu(e),0,t.length),n=ai(n),t.slice(e,e+n.length)==n},Le.subtract=Ac,Le.sum=function(t){return t&&t.length?In(t,rc):0},Le.sumBy=function(t,n){return t&&t.length?In(t,oo(n,2)):0},Le.template=function(t,n,e){var r=Le.templateSettings;e&&vo(t,n,e)&&(n=i),t=yu(t),n=xu({},n,r,$i);var o,a,u=xu({},n.imports,r.imports,$i),c=zu(u),f=Hn(u,c),s=0,l=n.interpolate||bt,h="__p += '",d=kt((n.escape||bt).source+"|"+l.source+"|"+(l===K?lt:bt).source+"|"+(n.evaluate||bt).source+"|$","g"),p="//# sourceURL="+(Dt.call(n,"sourceURL")?(n.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Kt+"]")+"\n";t.replace(d,(function(n,e,r,i,u,c){return r||(r=i),h+=t.slice(s,c).replace(mt,Kn),e&&(o=!0,h+="' +\n__e("+e+") +\n'"),u&&(a=!0,h+="';\n"+u+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),s=c+n.length,n})),h+="';\n";var _=Dt.call(n,"variable")&&n.variable;_||(h="with (obj) {\n"+h+"\n}\n"),h=(a?h.replace(q,""):h).replace(Y,"$1").replace(H,"$1;"),h="function("+(_||"obj")+") {\n"+(_?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=Qu((function(){return Mt(c,p+"return "+h).apply(i,f)}));if(g.source=h,Ga(g))throw g;return g},Le.times=function(t,n){if((t=pu(t))<1||t>l)return[];var e=d,r=ve(t,d);n=oo(n),t-=d;for(var i=qn(r,n);++e<t;)n(e);return i},Le.toFinite=du,Le.toInteger=pu,Le.toLength=_u,Le.toLower=function(t){return yu(t).toLowerCase()},Le.toNumber=gu,Le.toSafeInteger=function(t){return t?or(pu(t),-9007199254740991,l):0===t?t:0},Le.toString=yu,Le.toUpper=function(t){return yu(t).toUpperCase()},Le.trim=function(t,n,e){if((t=yu(t))&&(e||n===i))return t.replace(rt,"");if(!t||!(n=ai(n)))return t;var r=oe(t),o=oe(n);return yi(r,Wn(r,o),Vn(r,o)+1).join("")},Le.trimEnd=function(t,n,e){if((t=yu(t))&&(e||n===i))return t.replace(ot,"");if(!t||!(n=ai(n)))return t;var r=oe(t);return yi(r,0,Vn(r,oe(n))+1).join("")},Le.trimStart=function(t,n,e){if((t=yu(t))&&(e||n===i))return t.replace(it,"");if(!t||!(n=ai(n)))return t;var r=oe(t);return yi(r,Wn(r,oe(n))).join("")},Le.truncate=function(t,n){var e=30,r="...";if(tu(n)){var o="separator"in n?n.separator:o;e="length"in n?pu(n.length):e,r="omission"in n?ai(n.omission):r}var a=(t=yu(t)).length;if(Qn(t)){var u=oe(t);a=u.length}if(e>=a)return t;var c=e-ie(r);if(c<1)return r;var f=u?yi(u,0,c).join(""):t.slice(0,c);if(o===i)return f+r;if(u&&(c+=f.length-c),ou(o)){if(t.slice(c).search(o)){var s,l=f;for(o.global||(o=kt(o.source,yu(ht.exec(o))+"g")),o.lastIndex=0;s=o.exec(l);)var h=s.index;f=f.slice(0,h===i?c:h)}}else if(t.indexOf(ai(o),c)!=c){var d=f.lastIndexOf(o);d>-1&&(f=f.slice(0,d))}return f+r},Le.unescape=function(t){return(t=yu(t))&&V.test(t)?t.replace(Z,ae):t},Le.uniqueId=function(t){var n=++jt;return yu(t)+n},Le.upperCase=$u,Le.upperFirst=Gu,Le.each=ya,Le.eachRight=ba,Le.first=Wo,uc(Le,(vc={},yr(Le,(function(t,n){Dt.call(Le.prototype,n)||(vc[n]=t)})),vc),{chain:!1}),Le.VERSION="4.17.20",mn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Le[t].placeholder=Le})),mn(["drop","take"],(function(t,n){qe.prototype[t]=function(e){e=e===i?1:ge(pu(e),0);var r=this.__filtered__&&!n?new qe(this):this.clone();return r.__filtered__?r.__takeCount__=ve(e,r.__takeCount__):r.__views__.push({size:ve(e,d),type:t+(r.__dir__<0?"Right":"")}),r},qe.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}})),mn(["filter","map","takeWhile"],(function(t,n){var e=n+1,r=1==e||3==e;qe.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:oo(t,3),type:e}),n.__filtered__=n.__filtered__||r,n}})),mn(["head","last"],(function(t,n){var e="take"+(n?"Right":"");qe.prototype[t]=function(){return this[e](1).value()[0]}})),mn(["initial","tail"],(function(t,n){var e="drop"+(n?"":"Right");qe.prototype[t]=function(){return this.__filtered__?new qe(this):this[e](1)}})),qe.prototype.compact=function(){return this.filter(rc)},qe.prototype.find=function(t){return this.filter(t).head()},qe.prototype.findLast=function(t){return this.reverse().find(t)},qe.prototype.invokeMap=Vr((function(t,n){return"function"==typeof t?new qe(this):this.map((function(e){return Er(e,t,n)}))})),qe.prototype.reject=function(t){return this.filter(ja(oo(t)))},qe.prototype.slice=function(t,n){t=pu(t);var e=this;return e.__filtered__&&(t>0||n<0)?new qe(e):(t<0?e=e.takeRight(-t):t&&(e=e.drop(t)),n!==i&&(e=(n=pu(n))<0?e.dropRight(-n):e.take(n-t)),e)},qe.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},qe.prototype.toArray=function(){return this.take(d)},yr(qe.prototype,(function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),r=/^(?:head|last)$/.test(n),o=Le[r?"take"+("last"==n?"Right":""):n],a=r||/^find/.test(n);o&&(Le.prototype[n]=function(){var n=this.__wrapped__,u=r?[1]:arguments,c=n instanceof qe,f=u[0],s=c||Ha(n),l=function(t){var n=o.apply(Le,Sn([t],u));return r&&h?n[0]:n};s&&e&&"function"==typeof f&&1!=f.length&&(c=s=!1);var h=this.__chain__,d=!!this.__actions__.length,p=a&&!h,_=c&&!d;if(!a&&s){n=_?n:new qe(this);var g=t.apply(n,u);return g.__actions__.push({func:da,args:[l],thisArg:i}),new Ie(g,h)}return p&&_?t.apply(this,u):(g=this.thru(l),p?r?g.value()[0]:g.value():g)})})),mn(["pop","push","shift","sort","splice","unshift"],(function(t){var n=Nt[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Le.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return n.apply(Ha(i)?i:[],t)}return this[e]((function(e){return n.apply(Ha(e)?e:[],t)}))}})),yr(qe.prototype,(function(t,n){var e=Le[n];if(e){var r=e.name+"";Dt.call(Ne,r)||(Ne[r]=[]),Ne[r].push({name:n,func:e})}})),Ne[Pi(i,2).name]=[{name:"wrapper",func:i}],qe.prototype.clone=function(){var t=new qe(this.__wrapped__);return t.__actions__=ki(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=ki(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=ki(this.__views__),t},qe.prototype.reverse=function(){if(this.__filtered__){var t=new qe(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},qe.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,e=Ha(t),r=n<0,i=e?t.length:0,o=function(t,n,e){for(var r=-1,i=e.length;++r<i;){var o=e[r],a=o.size;switch(o.type){case"drop":t+=a;break;case"dropRight":n-=a;break;case"take":n=ve(n,t+a);break;case"takeRight":t=ge(t,n-a)}}return{start:t,end:n}}(0,i,this.__views__),a=o.start,u=o.end,c=u-a,f=r?u:a-1,s=this.__iteratees__,l=s.length,h=0,d=ve(c,this.__takeCount__);if(!e||!r&&i==c&&d==c)return li(t,this.__actions__);var p=[];t:for(;c--&&h<d;){for(var _=-1,g=t[f+=n];++_<l;){var v=s[_],y=v.iteratee,b=v.type,m=y(g);if(2==b)g=m;else if(!m){if(1==b)continue t;break t}}p[h++]=g}return p},Le.prototype.at=pa,Le.prototype.chain=function(){return ha(this)},Le.prototype.commit=function(){return new Ie(this.value(),this.__chain__)},Le.prototype.next=function(){this.__values__===i&&(this.__values__=hu(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?i:this.__values__[this.__index__++]}},Le.prototype.plant=function(t){for(var n,e=this;e instanceof Be;){var r=Fo(e);r.__index__=0,r.__values__=i,n?o.__wrapped__=r:n=r;var o=r;e=e.__wrapped__}return o.__wrapped__=t,n},Le.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof qe){var n=t;return this.__actions__.length&&(n=new qe(this)),(n=n.reverse()).__actions__.push({func:da,args:[ta],thisArg:i}),new Ie(n,this.__chain__)}return this.thru(ta)},Le.prototype.toJSON=Le.prototype.valueOf=Le.prototype.value=function(){return li(this.__wrapped__,this.__actions__)},Le.prototype.first=Le.prototype.head,cn&&(Le.prototype[cn]=function(){return this}),Le}();an._=ue,(r=function(){return ue}.call(n,e,n,t))===i||(t.exports=r)}.call(this)},330:(t,n,e)=>{"use strict";e.r(n),e.d(n,{VERSION:()=>i,after:()=>vn,all:()=>Pn,allKeys:()=>pt,any:()=>Ln,assign:()=>xt,before:()=>yn,bind:()=>an,bindAll:()=>cn,chain:()=>nn,chunk:()=>me,clone:()=>Tt,collect:()=>zn,compact:()=>fe,compose:()=>gn,constant:()=>K,contains:()=>Fn,countBy:()=>Kn,create:()=>At,debounce:()=>dn,default:()=>Te,defaults:()=>wt,defer:()=>ln,delay:()=>sn,detect:()=>En,difference:()=>le,drop:()=>ue,each:()=>Cn,escape:()=>Ht,every:()=>Pn,extend:()=>mt,extendOwn:()=>xt,filter:()=>jn,find:()=>En,findIndex:()=>wn,findKey:()=>mn,findLastIndex:()=>Mn,findWhere:()=>Nn,first:()=>ae,flatten:()=>se,foldl:()=>On,foldr:()=>Dn,forEach:()=>Cn,functions:()=>yt,groupBy:()=>$n,has:()=>St,head:()=>ae,identity:()=>Et,include:()=>Fn,includes:()=>Fn,indexBy:()=>Gn,indexOf:()=>kn,initial:()=>oe,inject:()=>On,intersection:()=>_e,invert:()=>vt,invoke:()=>Bn,isArguments:()=>X,isArray:()=>q,isArrayBuffer:()=>B,isBoolean:()=>S,isDataView:()=>I,isDate:()=>U,isElement:()=>E,isEmpty:()=>ct,isEqual:()=>dt,isError:()=>D,isFinite:()=>$,isFunction:()=>Z,isMap:()=>R,isMatch:()=>ft,isNaN:()=>G,isNull:()=>T,isNumber:()=>z,isObject:()=>A,isRegExp:()=>O,isSet:()=>L,isString:()=>C,isSymbol:()=>j,isTypedArray:()=>rt,isUndefined:()=>k,isWeakMap:()=>P,isWeakSet:()=>F,iteratee:()=>Dt,keys:()=>ut,last:()=>ce,lastIndexOf:()=>Sn,map:()=>zn,mapObject:()=>Rt,matcher:()=>Nt,matches:()=>Nt,max:()=>Yn,memoize:()=>fn,methods:()=>yt,min:()=>Hn,mixin:()=>we,negate:()=>_n,noop:()=>Pt,now:()=>It,object:()=>ye,omit:()=>ie,once:()=>bn,pairs:()=>gt,partial:()=>on,partition:()=>Qn,pick:()=>re,pluck:()=>In,property:()=>zt,propertyOf:()=>Lt,random:()=>Bt,range:()=>be,reduce:()=>On,reduceRight:()=>Dn,reject:()=>Rn,rest:()=>ue,restArguments:()=>M,result:()=>Qt,sample:()=>Zn,select:()=>jn,shuffle:()=>Wn,size:()=>ne,some:()=>Ln,sortBy:()=>Vn,sortedIndex:()=>An,tail:()=>ue,take:()=>ae,tap:()=>kt,template:()=>Kt,templateSettings:()=>Wt,throttle:()=>hn,times:()=>Ft,toArray:()=>te,transpose:()=>ge,unescape:()=>Zt,union:()=>pe,uniq:()=>de,unique:()=>de,uniqueId:()=>tn,unzip:()=>ge,values:()=>_t,where:()=>qn,without:()=>he,wrap:()=>pn,zip:()=>ve});var r={};e.r(r),e.d(r,{VERSION:()=>i,after:()=>vn,all:()=>Pn,allKeys:()=>pt,any:()=>Ln,assign:()=>xt,before:()=>yn,bind:()=>an,bindAll:()=>cn,chain:()=>nn,chunk:()=>me,clone:()=>Tt,collect:()=>zn,compact:()=>fe,compose:()=>gn,constant:()=>K,contains:()=>Fn,countBy:()=>Kn,create:()=>At,debounce:()=>dn,default:()=>Me,defaults:()=>wt,defer:()=>ln,delay:()=>sn,detect:()=>En,difference:()=>le,drop:()=>ue,each:()=>Cn,escape:()=>Ht,every:()=>Pn,extend:()=>mt,extendOwn:()=>xt,filter:()=>jn,find:()=>En,findIndex:()=>wn,findKey:()=>mn,findLastIndex:()=>Mn,findWhere:()=>Nn,first:()=>ae,flatten:()=>se,foldl:()=>On,foldr:()=>Dn,forEach:()=>Cn,functions:()=>yt,groupBy:()=>$n,has:()=>St,head:()=>ae,identity:()=>Et,include:()=>Fn,includes:()=>Fn,indexBy:()=>Gn,indexOf:()=>kn,initial:()=>oe,inject:()=>On,intersection:()=>_e,invert:()=>vt,invoke:()=>Bn,isArguments:()=>X,isArray:()=>q,isArrayBuffer:()=>B,isBoolean:()=>S,isDataView:()=>I,isDate:()=>U,isElement:()=>E,isEmpty:()=>ct,isEqual:()=>dt,isError:()=>D,isFinite:()=>$,isFunction:()=>Z,isMap:()=>R,isMatch:()=>ft,isNaN:()=>G,isNull:()=>T,isNumber:()=>z,isObject:()=>A,isRegExp:()=>O,isSet:()=>L,isString:()=>C,isSymbol:()=>j,isTypedArray:()=>rt,isUndefined:()=>k,isWeakMap:()=>P,isWeakSet:()=>F,iteratee:()=>Dt,keys:()=>ut,last:()=>ce,lastIndexOf:()=>Sn,map:()=>zn,mapObject:()=>Rt,matcher:()=>Nt,matches:()=>Nt,max:()=>Yn,memoize:()=>fn,methods:()=>yt,min:()=>Hn,mixin:()=>we,negate:()=>_n,noop:()=>Pt,now:()=>It,object:()=>ye,omit:()=>ie,once:()=>bn,pairs:()=>gt,partial:()=>on,partition:()=>Qn,pick:()=>re,pluck:()=>In,property:()=>zt,propertyOf:()=>Lt,random:()=>Bt,range:()=>be,reduce:()=>On,reduceRight:()=>Dn,reject:()=>Rn,rest:()=>ue,restArguments:()=>M,result:()=>Qt,sample:()=>Zn,select:()=>jn,shuffle:()=>Wn,size:()=>ne,some:()=>Ln,sortBy:()=>Vn,sortedIndex:()=>An,tail:()=>ue,take:()=>ae,tap:()=>kt,template:()=>Kt,templateSettings:()=>Wt,throttle:()=>hn,times:()=>Ft,toArray:()=>te,transpose:()=>ge,unescape:()=>Zt,union:()=>pe,uniq:()=>de,unique:()=>de,uniqueId:()=>tn,unzip:()=>ge,values:()=>_t,where:()=>qn,without:()=>he,wrap:()=>pn,zip:()=>ve});var i="1.11.0",o="object"==typeof self&&self.self===self&&self||"object"==typeof e.g&&e.g.global===e.g&&e.g||Function("return this")()||{},a=Array.prototype,u=Object.prototype,c="undefined"!=typeof Symbol?Symbol.prototype:null,f=a.push,s=a.slice,l=u.toString,h=u.hasOwnProperty,d="undefined"!=typeof ArrayBuffer,p=Array.isArray,_=Object.keys,g=Object.create,v=d&&ArrayBuffer.isView,y=isNaN,b=isFinite,m=!{toString:null}.propertyIsEnumerable("toString"),x=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],w=Math.pow(2,53)-1;function M(t,n){return n=null==n?t.length-1:+n,function(){for(var e=Math.max(arguments.length-n,0),r=Array(e),i=0;i<e;i++)r[i]=arguments[i+n];switch(n){case 0:return t.call(this,r);case 1:return t.call(this,arguments[0],r);case 2:return t.call(this,arguments[0],arguments[1],r)}var o=Array(n+1);for(i=0;i<n;i++)o[i]=arguments[i];return o[n]=r,t.apply(this,o)}}function A(t){var n=typeof t;return"function"===n||"object"===n&&!!t}function T(t){return null===t}function k(t){return void 0===t}function S(t){return!0===t||!1===t||"[object Boolean]"===l.call(t)}function E(t){return!(!t||1!==t.nodeType)}function N(t){return function(n){return l.call(n)==="[object "+t+"]"}}const C=N("String"),z=N("Number"),U=N("Date"),O=N("RegExp"),D=N("Error"),j=N("Symbol"),R=N("Map"),P=N("WeakMap"),L=N("Set"),F=N("WeakSet"),B=N("ArrayBuffer"),I=N("DataView"),q=p||N("Array");var Y=N("Function"),H=o.document&&o.document.childNodes;"object"!=typeof Int8Array&&"function"!=typeof H&&(Y=function(t){return"function"==typeof t||!1});const Z=Y;function W(t,n){return null!=t&&h.call(t,n)}var V=N("Arguments");!function(){V(arguments)||(V=function(t){return W(t,"callee")})}();const X=V;function $(t){return!j(t)&&b(t)&&!isNaN(parseFloat(t))}function G(t){return z(t)&&y(t)}function K(t){return function(){return t}}function Q(t){return function(n){var e=t(n);return"number"==typeof e&&e>=0&&e<=w}}function J(t){return function(n){return null==n?void 0:n[t]}}const tt=J("byteLength"),nt=Q(tt);var et=/\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;const rt=d?function(t){return v?v(t)&&!I(t):nt(t)&&et.test(l.call(t))}:K(!1),it=J("length"),ot=Q(it);function at(t,n){n=function(t){for(var n={},e=t.length,r=0;r<e;++r)n[t[r]]=!0;return{contains:function(t){return n[t]},push:function(e){return n[e]=!0,t.push(e)}}}(n);var e=x.length,r=t.constructor,i=Z(r)&&r.prototype||u,o="constructor";for(W(t,o)&&!n.contains(o)&&n.push(o);e--;)(o=x[e])in t&&t[o]!==i[o]&&!n.contains(o)&&n.push(o)}function ut(t){if(!A(t))return[];if(_)return _(t);var n=[];for(var e in t)W(t,e)&&n.push(e);return m&&at(t,n),n}function ct(t){return null==t||(ot(t)&&(q(t)||C(t)||X(t))?0===t.length:0===ut(t).length)}function ft(t,n){var e=ut(n),r=e.length;if(null==t)return!r;for(var i=Object(t),o=0;o<r;o++){var a=e[o];if(n[a]!==i[a]||!(a in i))return!1}return!0}function st(t){return t instanceof st?t:this instanceof st?void(this._wrapped=t):new st(t)}function lt(t,n,e,r){if(t===n)return 0!==t||1/t==1/n;if(null==t||null==n)return!1;if(t!=t)return n!=n;var i=typeof t;return("function"===i||"object"===i||"object"==typeof n)&&ht(t,n,e,r)}function ht(t,n,e,r){t instanceof st&&(t=t._wrapped),n instanceof st&&(n=n._wrapped);var i=l.call(t);if(i!==l.call(n))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+t==""+n;case"[object Number]":return+t!=+t?+n!=+n:0==+t?1/+t==1/n:+t==+n;case"[object Date]":case"[object Boolean]":return+t==+n;case"[object Symbol]":return c.valueOf.call(t)===c.valueOf.call(n);case"[object ArrayBuffer]":return ht(new DataView(t),new DataView(n),e,r);case"[object DataView]":var o=tt(t);if(o!==tt(n))return!1;for(;o--;)if(t.getUint8(o)!==n.getUint8(o))return!1;return!0}if(rt(t))return ht(new DataView(t.buffer),new DataView(n.buffer),e,r);var a="[object Array]"===i;if(!a){if("object"!=typeof t||"object"!=typeof n)return!1;var u=t.constructor,f=n.constructor;if(u!==f&&!(Z(u)&&u instanceof u&&Z(f)&&f instanceof f)&&"constructor"in t&&"constructor"in n)return!1}r=r||[];for(var s=(e=e||[]).length;s--;)if(e[s]===t)return r[s]===n;if(e.push(t),r.push(n),a){if((s=t.length)!==n.length)return!1;for(;s--;)if(!lt(t[s],n[s],e,r))return!1}else{var h,d=ut(t);if(s=d.length,ut(n).length!==s)return!1;for(;s--;)if(!W(n,h=d[s])||!lt(t[h],n[h],e,r))return!1}return e.pop(),r.pop(),!0}function dt(t,n){return lt(t,n)}function pt(t){if(!A(t))return[];var n=[];for(var e in t)n.push(e);return m&&at(t,n),n}function _t(t){for(var n=ut(t),e=n.length,r=Array(e),i=0;i<e;i++)r[i]=t[n[i]];return r}function gt(t){for(var n=ut(t),e=n.length,r=Array(e),i=0;i<e;i++)r[i]=[n[i],t[n[i]]];return r}function vt(t){for(var n={},e=ut(t),r=0,i=e.length;r<i;r++)n[t[e[r]]]=e[r];return n}function yt(t){var n=[];for(var e in t)Z(t[e])&&n.push(e);return n.sort()}function bt(t,n){return function(e){var r=arguments.length;if(n&&(e=Object(e)),r<2||null==e)return e;for(var i=1;i<r;i++)for(var o=arguments[i],a=t(o),u=a.length,c=0;c<u;c++){var f=a[c];n&&void 0!==e[f]||(e[f]=o[f])}return e}}st.VERSION=i,st.prototype.value=function(){return this._wrapped},st.prototype.valueOf=st.prototype.toJSON=st.prototype.value,st.prototype.toString=function(){return String(this._wrapped)};const mt=bt(pt),xt=bt(ut),wt=bt(pt,!0);function Mt(t){if(!A(t))return{};if(g)return g(t);var n=function(){};n.prototype=t;var e=new n;return n.prototype=null,e}function At(t,n){var e=Mt(t);return n&&xt(e,n),e}function Tt(t){return A(t)?q(t)?t.slice():mt({},t):t}function kt(t,n){return n(t),t}function St(t,n){if(!q(n))return W(t,n);for(var e=n.length,r=0;r<e;r++){var i=n[r];if(null==t||!h.call(t,i))return!1;t=t[i]}return!!e}function Et(t){return t}function Nt(t){return t=xt({},t),function(n){return ft(n,t)}}function Ct(t,n){for(var e=n.length,r=0;r<e;r++){if(null==t)return;t=t[n[r]]}return e?t:void 0}function zt(t){return q(t)?function(n){return Ct(n,t)}:J(t)}function Ut(t,n,e){if(void 0===n)return t;switch(null==e?3:e){case 1:return function(e){return t.call(n,e)};case 3:return function(e,r,i){return t.call(n,e,r,i)};case 4:return function(e,r,i,o){return t.call(n,e,r,i,o)}}return function(){return t.apply(n,arguments)}}function Ot(t,n,e){return null==t?Et:Z(t)?Ut(t,n,e):A(t)&&!q(t)?Nt(t):zt(t)}function Dt(t,n){return Ot(t,n,1/0)}function jt(t,n,e){return st.iteratee!==Dt?st.iteratee(t,n):Ot(t,n,e)}function Rt(t,n,e){n=jt(n,e);for(var r=ut(t),i=r.length,o={},a=0;a<i;a++){var u=r[a];o[u]=n(t[u],u,t)}return o}function Pt(){}function Lt(t){return null==t?function(){}:function(n){return q(n)?Ct(t,n):t[n]}}function Ft(t,n,e){var r=Array(Math.max(0,t));n=Ut(n,e,1);for(var i=0;i<t;i++)r[i]=n(i);return r}function Bt(t,n){return null==n&&(n=t,t=0),t+Math.floor(Math.random()*(n-t+1))}st.iteratee=Dt;const It=Date.now||function(){return(new Date).getTime()};function qt(t){var n=function(n){return t[n]},e="(?:"+ut(t).join("|")+")",r=RegExp(e),i=RegExp(e,"g");return function(t){return t=null==t?"":""+t,r.test(t)?t.replace(i,n):t}}const Yt={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},Ht=qt(Yt),Zt=qt(vt(Yt)),Wt=st.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var Vt=/(.)^/,Xt={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},$t=/\\|'|\r|\n|\u2028|\u2029/g;function Gt(t){return"\\"+Xt[t]}function Kt(t,n,e){!n&&e&&(n=e),n=wt({},n,st.templateSettings);var r,i=RegExp([(n.escape||Vt).source,(n.interpolate||Vt).source,(n.evaluate||Vt).source].join("|")+"|$","g"),o=0,a="__p+='";t.replace(i,(function(n,e,r,i,u){return a+=t.slice(o,u).replace($t,Gt),o=u+n.length,e?a+="'+\n((__t=("+e+"))==null?'':_.escape(__t))+\n'":r?a+="'+\n((__t=("+r+"))==null?'':__t)+\n'":i&&(a+="';\n"+i+"\n__p+='"),n})),a+="';\n",n.variable||(a="with(obj||{}){\n"+a+"}\n"),a="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+a+"return __p;\n";try{r=new Function(n.variable||"obj","_",a)}catch(t){throw t.source=a,t}var u=function(t){return r.call(this,t,st)},c=n.variable||"obj";return u.source="function("+c+"){\n"+a+"}",u}function Qt(t,n,e){q(n)||(n=[n]);var r=n.length;if(!r)return Z(e)?e.call(t):e;for(var i=0;i<r;i++){var o=null==t?void 0:t[n[i]];void 0===o&&(o=e,i=r),t=Z(o)?o.call(t):o}return t}var Jt=0;function tn(t){var n=++Jt+"";return t?t+n:n}function nn(t){var n=st(t);return n._chain=!0,n}function en(t,n,e,r,i){if(!(r instanceof n))return t.apply(e,i);var o=Mt(t.prototype),a=t.apply(o,i);return A(a)?a:o}var rn=M((function(t,n){var e=rn.placeholder,r=function(){for(var i=0,o=n.length,a=Array(o),u=0;u<o;u++)a[u]=n[u]===e?arguments[i++]:n[u];for(;i<arguments.length;)a.push(arguments[i++]);return en(t,r,this,this,a)};return r}));rn.placeholder=st;const on=rn,an=M((function(t,n,e){if(!Z(t))throw new TypeError("Bind must be called on a function");var r=M((function(i){return en(t,r,n,this,e.concat(i))}));return r}));function un(t,n,e,r){if(r=r||[],n||0===n){if(n<=0)return r.concat(t)}else n=1/0;for(var i=r.length,o=0,a=it(t);o<a;o++){var u=t[o];if(ot(u)&&(q(u)||X(u)))if(n>1)un(u,n-1,e,r),i=r.length;else for(var c=0,f=u.length;c<f;)r[i++]=u[c++];else e||(r[i++]=u)}return r}const cn=M((function(t,n){var e=(n=un(n,!1,!1)).length;if(e<1)throw new Error("bindAll must be passed function names");for(;e--;){var r=n[e];t[r]=an(t[r],t)}return t}));function fn(t,n){var e=function(r){var i=e.cache,o=""+(n?n.apply(this,arguments):r);return W(i,o)||(i[o]=t.apply(this,arguments)),i[o]};return e.cache={},e}const sn=M((function(t,n,e){return setTimeout((function(){return t.apply(null,e)}),n)})),ln=on(sn,st,1);function hn(t,n,e){var r,i,o,a,u=0;e||(e={});var c=function(){u=!1===e.leading?0:It(),r=null,a=t.apply(i,o),r||(i=o=null)},f=function(){var f=It();u||!1!==e.leading||(u=f);var s=n-(f-u);return i=this,o=arguments,s<=0||s>n?(r&&(clearTimeout(r),r=null),u=f,a=t.apply(i,o),r||(i=o=null)):r||!1===e.trailing||(r=setTimeout(c,s)),a};return f.cancel=function(){clearTimeout(r),u=0,r=i=o=null},f}function dn(t,n,e){var r,i,o=function(n,e){r=null,e&&(i=t.apply(n,e))},a=M((function(a){if(r&&clearTimeout(r),e){var u=!r;r=setTimeout(o,n),u&&(i=t.apply(this,a))}else r=sn(o,n,this,a);return i}));return a.cancel=function(){clearTimeout(r),r=null},a}function pn(t,n){return on(n,t)}function _n(t){return function(){return!t.apply(this,arguments)}}function gn(){var t=arguments,n=t.length-1;return function(){for(var e=n,r=t[n].apply(this,arguments);e--;)r=t[e].call(this,r);return r}}function vn(t,n){return function(){if(--t<1)return n.apply(this,arguments)}}function yn(t,n){var e;return function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=null),e}}const bn=on(yn,2);function mn(t,n,e){n=jt(n,e);for(var r,i=ut(t),o=0,a=i.length;o<a;o++)if(n(t[r=i[o]],r,t))return r}function xn(t){return function(n,e,r){e=jt(e,r);for(var i=it(n),o=t>0?0:i-1;o>=0&&o<i;o+=t)if(e(n[o],o,n))return o;return-1}}const wn=xn(1),Mn=xn(-1);function An(t,n,e,r){for(var i=(e=jt(e,r,1))(n),o=0,a=it(t);o<a;){var u=Math.floor((o+a)/2);e(t[u])<i?o=u+1:a=u}return o}function Tn(t,n,e){return function(r,i,o){var a=0,u=it(r);if("number"==typeof o)t>0?a=o>=0?o:Math.max(o+u,a):u=o>=0?Math.min(o+1,u):o+u+1;else if(e&&o&&u)return r[o=e(r,i)]===i?o:-1;if(i!=i)return(o=n(s.call(r,a,u),G))>=0?o+a:-1;for(o=t>0?a:u-1;o>=0&&o<u;o+=t)if(r[o]===i)return o;return-1}}const kn=Tn(1,wn,An),Sn=Tn(-1,Mn);function En(t,n,e){var r=(ot(t)?wn:mn)(t,n,e);if(void 0!==r&&-1!==r)return t[r]}function Nn(t,n){return En(t,Nt(n))}function Cn(t,n,e){var r,i;if(n=Ut(n,e),ot(t))for(r=0,i=t.length;r<i;r++)n(t[r],r,t);else{var o=ut(t);for(r=0,i=o.length;r<i;r++)n(t[o[r]],o[r],t)}return t}function zn(t,n,e){n=jt(n,e);for(var r=!ot(t)&&ut(t),i=(r||t).length,o=Array(i),a=0;a<i;a++){var u=r?r[a]:a;o[a]=n(t[u],u,t)}return o}function Un(t){var n=function(n,e,r,i){var o=!ot(n)&&ut(n),a=(o||n).length,u=t>0?0:a-1;for(i||(r=n[o?o[u]:u],u+=t);u>=0&&u<a;u+=t){var c=o?o[u]:u;r=e(r,n[c],c,n)}return r};return function(t,e,r,i){var o=arguments.length>=3;return n(t,Ut(e,i,4),r,o)}}const On=Un(1),Dn=Un(-1);function jn(t,n,e){var r=[];return n=jt(n,e),Cn(t,(function(t,e,i){n(t,e,i)&&r.push(t)})),r}function Rn(t,n,e){return jn(t,_n(jt(n)),e)}function Pn(t,n,e){n=jt(n,e);for(var r=!ot(t)&&ut(t),i=(r||t).length,o=0;o<i;o++){var a=r?r[o]:o;if(!n(t[a],a,t))return!1}return!0}function Ln(t,n,e){n=jt(n,e);for(var r=!ot(t)&&ut(t),i=(r||t).length,o=0;o<i;o++){var a=r?r[o]:o;if(n(t[a],a,t))return!0}return!1}function Fn(t,n,e,r){return ot(t)||(t=_t(t)),("number"!=typeof e||r)&&(e=0),kn(t,n,e)>=0}const Bn=M((function(t,n,e){var r,i;return Z(n)?i=n:q(n)&&(r=n.slice(0,-1),n=n[n.length-1]),zn(t,(function(t){var o=i;if(!o){if(r&&r.length&&(t=Ct(t,r)),null==t)return;o=t[n]}return null==o?o:o.apply(t,e)}))}));function In(t,n){return zn(t,zt(n))}function qn(t,n){return jn(t,Nt(n))}function Yn(t,n,e){var r,i,o=-1/0,a=-1/0;if(null==n||"number"==typeof n&&"object"!=typeof t[0]&&null!=t)for(var u=0,c=(t=ot(t)?t:_t(t)).length;u<c;u++)null!=(r=t[u])&&r>o&&(o=r);else n=jt(n,e),Cn(t,(function(t,e,r){((i=n(t,e,r))>a||i===-1/0&&o===-1/0)&&(o=t,a=i)}));return o}function Hn(t,n,e){var r,i,o=1/0,a=1/0;if(null==n||"number"==typeof n&&"object"!=typeof t[0]&&null!=t)for(var u=0,c=(t=ot(t)?t:_t(t)).length;u<c;u++)null!=(r=t[u])&&r<o&&(o=r);else n=jt(n,e),Cn(t,(function(t,e,r){((i=n(t,e,r))<a||i===1/0&&o===1/0)&&(o=t,a=i)}));return o}function Zn(t,n,e){if(null==n||e)return ot(t)||(t=_t(t)),t[Bt(t.length-1)];var r=ot(t)?Tt(t):_t(t),i=it(r);n=Math.max(Math.min(n,i),0);for(var o=i-1,a=0;a<n;a++){var u=Bt(a,o),c=r[a];r[a]=r[u],r[u]=c}return r.slice(0,n)}function Wn(t){return Zn(t,1/0)}function Vn(t,n,e){var r=0;return n=jt(n,e),In(zn(t,(function(t,e,i){return{value:t,index:r++,criteria:n(t,e,i)}})).sort((function(t,n){var e=t.criteria,r=n.criteria;if(e!==r){if(e>r||void 0===e)return 1;if(e<r||void 0===r)return-1}return t.index-n.index})),"value")}function Xn(t,n){return function(e,r,i){var o=n?[[],[]]:{};return r=jt(r,i),Cn(e,(function(n,i){var a=r(n,i,e);t(o,n,a)})),o}}const $n=Xn((function(t,n,e){W(t,e)?t[e].push(n):t[e]=[n]})),Gn=Xn((function(t,n,e){t[e]=n})),Kn=Xn((function(t,n,e){W(t,e)?t[e]++:t[e]=1})),Qn=Xn((function(t,n,e){t[e?0:1].push(n)}),!0);var Jn=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;function te(t){return t?q(t)?s.call(t):C(t)?t.match(Jn):ot(t)?zn(t,Et):_t(t):[]}function ne(t){return null==t?0:ot(t)?t.length:ut(t).length}function ee(t,n,e){return n in e}const re=M((function(t,n){var e={},r=n[0];if(null==t)return e;Z(r)?(n.length>1&&(r=Ut(r,n[1])),n=pt(t)):(r=ee,n=un(n,!1,!1),t=Object(t));for(var i=0,o=n.length;i<o;i++){var a=n[i],u=t[a];r(u,a,t)&&(e[a]=u)}return e})),ie=M((function(t,n){var e,r=n[0];return Z(r)?(r=_n(r),n.length>1&&(e=n[1])):(n=zn(un(n,!1,!1),String),r=function(t,e){return!Fn(n,e)}),re(t,r,e)}));function oe(t,n,e){return s.call(t,0,Math.max(0,t.length-(null==n||e?1:n)))}function ae(t,n,e){return null==t||t.length<1?null==n||e?void 0:[]:null==n||e?t[0]:oe(t,t.length-n)}function ue(t,n,e){return s.call(t,null==n||e?1:n)}function ce(t,n,e){return null==t||t.length<1?null==n||e?void 0:[]:null==n||e?t[t.length-1]:ue(t,Math.max(0,t.length-n))}function fe(t){return jn(t,Boolean)}function se(t,n){return un(t,n,!1)}const le=M((function(t,n){return n=un(n,!0,!0),jn(t,(function(t){return!Fn(n,t)}))})),he=M((function(t,n){return le(t,n)}));function de(t,n,e,r){S(n)||(r=e,e=n,n=!1),null!=e&&(e=jt(e,r));for(var i=[],o=[],a=0,u=it(t);a<u;a++){var c=t[a],f=e?e(c,a,t):c;n&&!e?(a&&o===f||i.push(c),o=f):e?Fn(o,f)||(o.push(f),i.push(c)):Fn(i,c)||i.push(c)}return i}const pe=M((function(t){return de(un(t,!0,!0))}));function _e(t){for(var n=[],e=arguments.length,r=0,i=it(t);r<i;r++){var o=t[r];if(!Fn(n,o)){var a;for(a=1;a<e&&Fn(arguments[a],o);a++);a===e&&n.push(o)}}return n}function ge(t){for(var n=t&&Yn(t,it).length||0,e=Array(n),r=0;r<n;r++)e[r]=In(t,r);return e}const ve=M(ge);function ye(t,n){for(var e={},r=0,i=it(t);r<i;r++)n?e[t[r]]=n[r]:e[t[r][0]]=t[r][1];return e}function be(t,n,e){null==n&&(n=t||0,t=0),e||(e=n<t?-1:1);for(var r=Math.max(Math.ceil((n-t)/e),0),i=Array(r),o=0;o<r;o++,t+=e)i[o]=t;return i}function me(t,n){if(null==n||n<1)return[];for(var e=[],r=0,i=t.length;r<i;)e.push(s.call(t,r,r+=n));return e}function xe(t,n){return t._chain?st(n).chain():n}function we(t){return Cn(yt(t),(function(n){var e=st[n]=t[n];st.prototype[n]=function(){var t=[this._wrapped];return f.apply(t,arguments),xe(this,e.apply(st,t))}})),st}Cn(["pop","push","reverse","shift","sort","splice","unshift"],(function(t){var n=a[t];st.prototype[t]=function(){var e=this._wrapped;return null!=e&&(n.apply(e,arguments),"shift"!==t&&"splice"!==t||0!==e.length||delete e[0]),xe(this,e)}})),Cn(["concat","join","slice"],(function(t){var n=a[t];st.prototype[t]=function(){var t=this._wrapped;return null!=t&&(t=n.apply(t,arguments)),xe(this,t)}}));const Me=st;var Ae=we(r);Ae._=Ae;const Te=Ae},81:(t,n,e)=>{e(16),t.exports={paramResults:function(){var t=document.createElement("TEXTAREA");t.setAttribute("id","pulledparameters"),t.style.height="200px",t.style.width="280px";var n=document.createTextNode("Log likelihood = -2636.08076729692402295768\nresult=phylo1\nphylo1=Single(process=1,data=1)\nmodel1=HKY85(kappa=7.335317023935,theta=0.549069149392,theta1=0.519914511076,theta2=0.479422925834)\nrate_distribution1=Constant()\nprocess1=Homogeneous(model=1, tree=1, rate=1)");t.appendChild(n),document.body.appendChild(t);var e=document.getElementById("childElement");e.parentNode.insertBefore(t,e);var r=document.createElement("TEXTAREA");r.setAttribute("id","pulledparameters"),n=document.createTextNode("CONFUSIOOOOOOON"),r.appendChild(n),document.body.appendChild(r),document.getElementById("childElement2").parentNode.insertBefore(r,e)}}}},n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={id:r,loaded:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),e(81)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,